/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyB0aGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgIGlmICghZnVuY3Rpb25hbCkge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(26)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(25)\n}\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(13),\n  /* template */\n  __webpack_require__(22),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\HimelR\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\App.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] App.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-f65f1004\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-f65f1004\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8zNWE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUEyTDtBQUMzTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQW9IO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWY2NWYxMDA0XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BcHAudnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcHAudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1mNjVmMTAwNFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BcHAudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxSXFxcXERvY3VtZW50c1xcXFxOZXRCZWFuc1Byb2plY3RzXFxcXE1vb3NlQmVhdFxcXFxzcmNcXFxcQXBwLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gQXBwLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi1mNjVmMTAwNFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LWY2NWYxMDA0XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(23)\n}\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(14),\n  /* template */\n  __webpack_require__(20),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\HimelR\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\meat.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] meat.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-08a847be\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-08a847be\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZWF0LnZ1ZT8yZmFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUE4TDtBQUM5TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXVIO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0RBQXNELElBQUk7QUFDekksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTA4YTg0N2JlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9tZWF0LnZ1ZVwiKVxufVxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vbWVhdC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTA4YTg0N2JlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL21lYXQudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxSXFxcXERvY3VtZW50c1xcXFxOZXRCZWFuc1Byb2plY3RzXFxcXE1vb3NlQmVhdFxcXFxzcmNcXFxcY29tcG9uZW50c1xcXFxtZWF0LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5LnN1YnN0cigwLCAyKSAhPT0gXCJfX1wifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gbWVhdC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMDhhODQ3YmVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0wOGE4NDdiZVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvbWVhdC52dWVcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(24)\n}\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(15),\n  /* template */\n  __webpack_require__(21),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-6e6425b9\",\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\HimelR\\\\Documents\\\\NetBeansProjects\\\\MooseBeat\\\\src\\\\components\\\\moose.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] moose.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-6e6425b9\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-6e6425b9\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWU/ZTU4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNkw7QUFDN0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFzSDtBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNmU2NDI1YjlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vbW9vc2UudnVlXCIpXG59XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9tb29zZS52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTZlNjQyNWI5XFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vbW9vc2UudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgaW5qZWN0U3R5bGUsXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtNmU2NDI1YjlcIixcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcSGltZWxSXFxcXERvY3VtZW50c1xcXFxOZXRCZWFuc1Byb2plY3RzXFxcXE1vb3NlQmVhdFxcXFxzcmNcXFxcY29tcG9uZW50c1xcXFxtb29zZS52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleS5zdWJzdHIoMCwgMikgIT09IFwiX19cIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIG1vb3NlLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi02ZTY0MjViOVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTZlNjQyNWI5XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWVcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n  * vue-router v2.7.0\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && !route.redirect && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias];\n\n    aliases.forEach(function (alias) {\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path, pathToRegexpOptions) {\n  var regex = index(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return\n    }\n    var isObject = typeof shouldScroll === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};\n        offset = normalizeOffset(offset);\n        position = getElementPosition(el, offset);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (resolvedDef.__esModule && resolvedDef.default) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  window.location.replace((base + \"#\" + path));\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.7.0';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VueRouter);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(3)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\r\n * Vue.js v2.4.2\r\n * (c) 2014-2017 Evan You\r\n * Released under the MIT License.\r\n */\r\n/*  */\r\n\r\n// these helpers produces better vm code in JS engines due to their\r\n// explicitness and function inlining\r\nfunction isUndef (v) {\r\n  return v === undefined || v === null\r\n}\r\n\r\nfunction isDef (v) {\r\n  return v !== undefined && v !== null\r\n}\r\n\r\nfunction isTrue (v) {\r\n  return v === true\r\n}\r\n\r\nfunction isFalse (v) {\r\n  return v === false\r\n}\r\n\r\n/**\r\n * Check if value is primitive\r\n */\r\nfunction isPrimitive (value) {\r\n  return (\r\n    typeof value === 'string' ||\r\n    typeof value === 'number' ||\r\n    typeof value === 'boolean'\r\n  )\r\n}\r\n\r\n/**\r\n * Quick object check - this is primarily used to tell\r\n * Objects from primitive values when we know the value\r\n * is a JSON-compliant type.\r\n */\r\nfunction isObject (obj) {\r\n  return obj !== null && typeof obj === 'object'\r\n}\r\n\r\nvar _toString = Object.prototype.toString;\r\n\r\n/**\r\n * Strict object type check. Only returns true\r\n * for plain JavaScript objects.\r\n */\r\nfunction isPlainObject (obj) {\r\n  return _toString.call(obj) === '[object Object]'\r\n}\r\n\r\nfunction isRegExp (v) {\r\n  return _toString.call(v) === '[object RegExp]'\r\n}\r\n\r\n/**\r\n * Check if val is a valid array index.\r\n */\r\nfunction isValidArrayIndex (val) {\r\n  var n = parseFloat(val);\r\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\r\n}\r\n\r\n/**\r\n * Convert a value to a string that is actually rendered.\r\n */\r\nfunction toString (val) {\r\n  return val == null\r\n    ? ''\r\n    : typeof val === 'object'\r\n      ? JSON.stringify(val, null, 2)\r\n      : String(val)\r\n}\r\n\r\n/**\r\n * Convert a input value to a number for persistence.\r\n * If the conversion fails, return original string.\r\n */\r\nfunction toNumber (val) {\r\n  var n = parseFloat(val);\r\n  return isNaN(n) ? val : n\r\n}\r\n\r\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n */\r\nfunction makeMap (\r\n  str,\r\n  expectsLowerCase\r\n) {\r\n  var map = Object.create(null);\r\n  var list = str.split(',');\r\n  for (var i = 0; i < list.length; i++) {\r\n    map[list[i]] = true;\r\n  }\r\n  return expectsLowerCase\r\n    ? function (val) { return map[val.toLowerCase()]; }\r\n    : function (val) { return map[val]; }\r\n}\r\n\r\n/**\r\n * Check if a tag is a built-in tag.\r\n */\r\nvar isBuiltInTag = makeMap('slot,component', true);\r\n\r\n/**\r\n * Check if a attribute is a reserved attribute.\r\n */\r\nvar isReservedAttribute = makeMap('key,ref,slot,is');\r\n\r\n/**\r\n * Remove an item from an array\r\n */\r\nfunction remove (arr, item) {\r\n  if (arr.length) {\r\n    var index = arr.indexOf(item);\r\n    if (index > -1) {\r\n      return arr.splice(index, 1)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether the object has the property.\r\n */\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nfunction hasOwn (obj, key) {\r\n  return hasOwnProperty.call(obj, key)\r\n}\r\n\r\n/**\r\n * Create a cached version of a pure function.\r\n */\r\nfunction cached (fn) {\r\n  var cache = Object.create(null);\r\n  return (function cachedFn (str) {\r\n    var hit = cache[str];\r\n    return hit || (cache[str] = fn(str))\r\n  })\r\n}\r\n\r\n/**\r\n * Camelize a hyphen-delimited string.\r\n */\r\nvar camelizeRE = /-(\\w)/g;\r\nvar camelize = cached(function (str) {\r\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\r\n});\r\n\r\n/**\r\n * Capitalize a string.\r\n */\r\nvar capitalize = cached(function (str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1)\r\n});\r\n\r\n/**\r\n * Hyphenate a camelCase string.\r\n */\r\nvar hyphenateRE = /([^-])([A-Z])/g;\r\nvar hyphenate = cached(function (str) {\r\n  return str\r\n    .replace(hyphenateRE, '$1-$2')\r\n    .replace(hyphenateRE, '$1-$2')\r\n    .toLowerCase()\r\n});\r\n\r\n/**\r\n * Simple bind, faster than native\r\n */\r\nfunction bind (fn, ctx) {\r\n  function boundFn (a) {\r\n    var l = arguments.length;\r\n    return l\r\n      ? l > 1\r\n        ? fn.apply(ctx, arguments)\r\n        : fn.call(ctx, a)\r\n      : fn.call(ctx)\r\n  }\r\n  // record original fn length\r\n  boundFn._length = fn.length;\r\n  return boundFn\r\n}\r\n\r\n/**\r\n * Convert an Array-like object to a real Array.\r\n */\r\nfunction toArray (list, start) {\r\n  start = start || 0;\r\n  var i = list.length - start;\r\n  var ret = new Array(i);\r\n  while (i--) {\r\n    ret[i] = list[i + start];\r\n  }\r\n  return ret\r\n}\r\n\r\n/**\r\n * Mix properties into target object.\r\n */\r\nfunction extend (to, _from) {\r\n  for (var key in _from) {\r\n    to[key] = _from[key];\r\n  }\r\n  return to\r\n}\r\n\r\n/**\r\n * Merge an Array of Objects into a single Object.\r\n */\r\nfunction toObject (arr) {\r\n  var res = {};\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (arr[i]) {\r\n      extend(res, arr[i]);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/**\r\n * Perform no operation.\r\n * Stubbing args to make Flow happy without leaving useless transpiled code\r\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\r\n */\r\nfunction noop (a, b, c) {}\r\n\r\n/**\r\n * Always return false.\r\n */\r\nvar no = function (a, b, c) { return false; };\r\n\r\n/**\r\n * Return same value\r\n */\r\nvar identity = function (_) { return _; };\r\n\r\n/**\r\n * Generate a static keys string from compiler modules.\r\n */\r\nfunction genStaticKeys (modules) {\r\n  return modules.reduce(function (keys, m) {\r\n    return keys.concat(m.staticKeys || [])\r\n  }, []).join(',')\r\n}\r\n\r\n/**\r\n * Check if two values are loosely equal - that is,\r\n * if they are plain objects, do they have the same shape?\r\n */\r\nfunction looseEqual (a, b) {\r\n  if (a === b) { return true }\r\n  var isObjectA = isObject(a);\r\n  var isObjectB = isObject(b);\r\n  if (isObjectA && isObjectB) {\r\n    try {\r\n      var isArrayA = Array.isArray(a);\r\n      var isArrayB = Array.isArray(b);\r\n      if (isArrayA && isArrayB) {\r\n        return a.length === b.length && a.every(function (e, i) {\r\n          return looseEqual(e, b[i])\r\n        })\r\n      } else if (!isArrayA && !isArrayB) {\r\n        var keysA = Object.keys(a);\r\n        var keysB = Object.keys(b);\r\n        return keysA.length === keysB.length && keysA.every(function (key) {\r\n          return looseEqual(a[key], b[key])\r\n        })\r\n      } else {\r\n        /* istanbul ignore next */\r\n        return false\r\n      }\r\n    } catch (e) {\r\n      /* istanbul ignore next */\r\n      return false\r\n    }\r\n  } else if (!isObjectA && !isObjectB) {\r\n    return String(a) === String(b)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction looseIndexOf (arr, val) {\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (looseEqual(arr[i], val)) { return i }\r\n  }\r\n  return -1\r\n}\r\n\r\n/**\r\n * Ensure a function is called only once.\r\n */\r\nfunction once (fn) {\r\n  var called = false;\r\n  return function () {\r\n    if (!called) {\r\n      called = true;\r\n      fn.apply(this, arguments);\r\n    }\r\n  }\r\n}\r\n\r\nvar SSR_ATTR = 'data-server-rendered';\r\n\r\nvar ASSET_TYPES = [\r\n  'component',\r\n  'directive',\r\n  'filter'\r\n];\r\n\r\nvar LIFECYCLE_HOOKS = [\r\n  'beforeCreate',\r\n  'created',\r\n  'beforeMount',\r\n  'mounted',\r\n  'beforeUpdate',\r\n  'updated',\r\n  'beforeDestroy',\r\n  'destroyed',\r\n  'activated',\r\n  'deactivated'\r\n];\r\n\r\n/*  */\r\n\r\nvar config = ({\r\n  /**\r\n   * Option merge strategies (used in core/util/options)\r\n   */\r\n  optionMergeStrategies: Object.create(null),\r\n\r\n  /**\r\n   * Whether to suppress warnings.\r\n   */\r\n  silent: false,\r\n\r\n  /**\r\n   * Show production mode tip message on boot?\r\n   */\r\n  productionTip: process.env.NODE_ENV !== 'production',\r\n\r\n  /**\r\n   * Whether to enable devtools\r\n   */\r\n  devtools: process.env.NODE_ENV !== 'production',\r\n\r\n  /**\r\n   * Whether to record perf\r\n   */\r\n  performance: false,\r\n\r\n  /**\r\n   * Error handler for watcher errors\r\n   */\r\n  errorHandler: null,\r\n\r\n  /**\r\n   * Warn handler for watcher warns\r\n   */\r\n  warnHandler: null,\r\n\r\n  /**\r\n   * Ignore certain custom elements\r\n   */\r\n  ignoredElements: [],\r\n\r\n  /**\r\n   * Custom user key aliases for v-on\r\n   */\r\n  keyCodes: Object.create(null),\r\n\r\n  /**\r\n   * Check if a tag is reserved so that it cannot be registered as a\r\n   * component. This is platform-dependent and may be overwritten.\r\n   */\r\n  isReservedTag: no,\r\n\r\n  /**\r\n   * Check if an attribute is reserved so that it cannot be used as a component\r\n   * prop. This is platform-dependent and may be overwritten.\r\n   */\r\n  isReservedAttr: no,\r\n\r\n  /**\r\n   * Check if a tag is an unknown element.\r\n   * Platform-dependent.\r\n   */\r\n  isUnknownElement: no,\r\n\r\n  /**\r\n   * Get the namespace of an element\r\n   */\r\n  getTagNamespace: noop,\r\n\r\n  /**\r\n   * Parse the real tag name for the specific platform.\r\n   */\r\n  parsePlatformTagName: identity,\r\n\r\n  /**\r\n   * Check if an attribute must be bound using property, e.g. value\r\n   * Platform-dependent.\r\n   */\r\n  mustUseProp: no,\r\n\r\n  /**\r\n   * Exposed for legacy reasons\r\n   */\r\n  _lifecycleHooks: LIFECYCLE_HOOKS\r\n});\r\n\r\n/*  */\r\n\r\nvar emptyObject = Object.freeze({});\r\n\r\n/**\r\n * Check if a string starts with $ or _\r\n */\r\nfunction isReserved (str) {\r\n  var c = (str + '').charCodeAt(0);\r\n  return c === 0x24 || c === 0x5F\r\n}\r\n\r\n/**\r\n * Define a property.\r\n */\r\nfunction def (obj, key, val, enumerable) {\r\n  Object.defineProperty(obj, key, {\r\n    value: val,\r\n    enumerable: !!enumerable,\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\n/**\r\n * Parse simple path.\r\n */\r\nvar bailRE = /[^\\w.$]/;\r\nfunction parsePath (path) {\r\n  if (bailRE.test(path)) {\r\n    return\r\n  }\r\n  var segments = path.split('.');\r\n  return function (obj) {\r\n    for (var i = 0; i < segments.length; i++) {\r\n      if (!obj) { return }\r\n      obj = obj[segments[i]];\r\n    }\r\n    return obj\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar warn = noop;\r\nvar tip = noop;\r\nvar formatComponentName = (null); // work around flow check\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var hasConsole = typeof console !== 'undefined';\r\n  var classifyRE = /(?:^|[-_])(\\w)/g;\r\n  var classify = function (str) { return str\r\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\r\n    .replace(/[-_]/g, ''); };\r\n\r\n  warn = function (msg, vm) {\r\n    var trace = vm ? generateComponentTrace(vm) : '';\r\n\r\n    if (config.warnHandler) {\r\n      config.warnHandler.call(null, msg, vm, trace);\r\n    } else if (hasConsole && (!config.silent)) {\r\n      console.error((\"[Vue warn]: \" + msg + trace));\r\n    }\r\n  };\r\n\r\n  tip = function (msg, vm) {\r\n    if (hasConsole && (!config.silent)) {\r\n      console.warn(\"[Vue tip]: \" + msg + (\r\n        vm ? generateComponentTrace(vm) : ''\r\n      ));\r\n    }\r\n  };\r\n\r\n  formatComponentName = function (vm, includeFile) {\r\n    if (vm.$root === vm) {\r\n      return '<Root>'\r\n    }\r\n    var name = typeof vm === 'string'\r\n      ? vm\r\n      : typeof vm === 'function' && vm.options\r\n        ? vm.options.name\r\n        : vm._isVue\r\n          ? vm.$options.name || vm.$options._componentTag\r\n          : vm.name;\r\n\r\n    var file = vm._isVue && vm.$options.__file;\r\n    if (!name && file) {\r\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\r\n      name = match && match[1];\r\n    }\r\n\r\n    return (\r\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\r\n      (file && includeFile !== false ? (\" at \" + file) : '')\r\n    )\r\n  };\r\n\r\n  var repeat = function (str, n) {\r\n    var res = '';\r\n    while (n) {\r\n      if (n % 2 === 1) { res += str; }\r\n      if (n > 1) { str += str; }\r\n      n >>= 1;\r\n    }\r\n    return res\r\n  };\r\n\r\n  var generateComponentTrace = function (vm) {\r\n    if (vm._isVue && vm.$parent) {\r\n      var tree = [];\r\n      var currentRecursiveSequence = 0;\r\n      while (vm) {\r\n        if (tree.length > 0) {\r\n          var last = tree[tree.length - 1];\r\n          if (last.constructor === vm.constructor) {\r\n            currentRecursiveSequence++;\r\n            vm = vm.$parent;\r\n            continue\r\n          } else if (currentRecursiveSequence > 0) {\r\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\r\n            currentRecursiveSequence = 0;\r\n          }\r\n        }\r\n        tree.push(vm);\r\n        vm = vm.$parent;\r\n      }\r\n      return '\\n\\nfound in\\n\\n' + tree\r\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\r\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\r\n            : formatComponentName(vm))); })\r\n        .join('\\n')\r\n    } else {\r\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\r\n    }\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nfunction handleError (err, vm, info) {\r\n  if (config.errorHandler) {\r\n    config.errorHandler.call(null, err, vm, info);\r\n  } else {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\r\n    }\r\n    /* istanbul ignore else */\r\n    if (inBrowser && typeof console !== 'undefined') {\r\n      console.error(err);\r\n    } else {\r\n      throw err\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n/* globals MutationObserver */\r\n\r\n// can we use __proto__?\r\nvar hasProto = '__proto__' in {};\r\n\r\n// Browser environment sniffing\r\nvar inBrowser = typeof window !== 'undefined';\r\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\r\nvar isIE = UA && /msie|trident/.test(UA);\r\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\r\nvar isEdge = UA && UA.indexOf('edge/') > 0;\r\nvar isAndroid = UA && UA.indexOf('android') > 0;\r\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\r\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\r\n\r\n// Firefix has a \"watch\" function on Object.prototype...\r\nvar nativeWatch = ({}).watch;\r\n\r\nvar supportsPassive = false;\r\nif (inBrowser) {\r\n  try {\r\n    var opts = {};\r\n    Object.defineProperty(opts, 'passive', ({\r\n      get: function get () {\r\n        /* istanbul ignore next */\r\n        supportsPassive = true;\r\n      }\r\n    })); // https://github.com/facebook/flow/issues/285\r\n    window.addEventListener('test-passive', null, opts);\r\n  } catch (e) {}\r\n}\r\n\r\n// this needs to be lazy-evaled because vue may be required before\r\n// vue-server-renderer can set VUE_ENV\r\nvar _isServer;\r\nvar isServerRendering = function () {\r\n  if (_isServer === undefined) {\r\n    /* istanbul ignore if */\r\n    if (!inBrowser && typeof global !== 'undefined') {\r\n      // detect presence of vue-server-renderer and avoid\r\n      // Webpack shimming the process\r\n      _isServer = global['process'].env.VUE_ENV === 'server';\r\n    } else {\r\n      _isServer = false;\r\n    }\r\n  }\r\n  return _isServer\r\n};\r\n\r\n// detect devtools\r\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\r\n\r\n/* istanbul ignore next */\r\nfunction isNative (Ctor) {\r\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\r\n}\r\n\r\nvar hasSymbol =\r\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\r\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\r\n\r\n/**\r\n * Defer a task to execute it asynchronously.\r\n */\r\nvar nextTick = (function () {\r\n  var callbacks = [];\r\n  var pending = false;\r\n  var timerFunc;\r\n\r\n  function nextTickHandler () {\r\n    pending = false;\r\n    var copies = callbacks.slice(0);\r\n    callbacks.length = 0;\r\n    for (var i = 0; i < copies.length; i++) {\r\n      copies[i]();\r\n    }\r\n  }\r\n\r\n  // the nextTick behavior leverages the microtask queue, which can be accessed\r\n  // via either native Promise.then or MutationObserver.\r\n  // MutationObserver has wider support, however it is seriously bugged in\r\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\r\n  // completely stops working after triggering a few times... so, if native\r\n  // Promise is available, we will use it:\r\n  /* istanbul ignore if */\r\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\r\n    var p = Promise.resolve();\r\n    var logError = function (err) { console.error(err); };\r\n    timerFunc = function () {\r\n      p.then(nextTickHandler).catch(logError);\r\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\r\n      // it can get stuck in a weird state where callbacks are pushed into the\r\n      // microtask queue but the queue isn't being flushed, until the browser\r\n      // needs to do some other work, e.g. handle a timer. Therefore we can\r\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\r\n      if (isIOS) { setTimeout(noop); }\r\n    };\r\n  } else if (typeof MutationObserver !== 'undefined' && (\r\n    isNative(MutationObserver) ||\r\n    // PhantomJS and iOS 7.x\r\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\r\n  )) {\r\n    // use MutationObserver where native Promise is not available,\r\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\r\n    var counter = 1;\r\n    var observer = new MutationObserver(nextTickHandler);\r\n    var textNode = document.createTextNode(String(counter));\r\n    observer.observe(textNode, {\r\n      characterData: true\r\n    });\r\n    timerFunc = function () {\r\n      counter = (counter + 1) % 2;\r\n      textNode.data = String(counter);\r\n    };\r\n  } else {\r\n    // fallback to setTimeout\r\n    /* istanbul ignore next */\r\n    timerFunc = function () {\r\n      setTimeout(nextTickHandler, 0);\r\n    };\r\n  }\r\n\r\n  return function queueNextTick (cb, ctx) {\r\n    var _resolve;\r\n    callbacks.push(function () {\r\n      if (cb) {\r\n        try {\r\n          cb.call(ctx);\r\n        } catch (e) {\r\n          handleError(e, ctx, 'nextTick');\r\n        }\r\n      } else if (_resolve) {\r\n        _resolve(ctx);\r\n      }\r\n    });\r\n    if (!pending) {\r\n      pending = true;\r\n      timerFunc();\r\n    }\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n      return new Promise(function (resolve, reject) {\r\n        _resolve = resolve;\r\n      })\r\n    }\r\n  }\r\n})();\r\n\r\nvar _Set;\r\n/* istanbul ignore if */\r\nif (typeof Set !== 'undefined' && isNative(Set)) {\r\n  // use native Set when available.\r\n  _Set = Set;\r\n} else {\r\n  // a non-standard Set polyfill that only works with primitive keys.\r\n  _Set = (function () {\r\n    function Set () {\r\n      this.set = Object.create(null);\r\n    }\r\n    Set.prototype.has = function has (key) {\r\n      return this.set[key] === true\r\n    };\r\n    Set.prototype.add = function add (key) {\r\n      this.set[key] = true;\r\n    };\r\n    Set.prototype.clear = function clear () {\r\n      this.set = Object.create(null);\r\n    };\r\n\r\n    return Set;\r\n  }());\r\n}\r\n\r\n/*  */\r\n\r\n\r\nvar uid = 0;\r\n\r\n/**\r\n * A dep is an observable that can have multiple\r\n * directives subscribing to it.\r\n */\r\nvar Dep = function Dep () {\r\n  this.id = uid++;\r\n  this.subs = [];\r\n};\r\n\r\nDep.prototype.addSub = function addSub (sub) {\r\n  this.subs.push(sub);\r\n};\r\n\r\nDep.prototype.removeSub = function removeSub (sub) {\r\n  remove(this.subs, sub);\r\n};\r\n\r\nDep.prototype.depend = function depend () {\r\n  if (Dep.target) {\r\n    Dep.target.addDep(this);\r\n  }\r\n};\r\n\r\nDep.prototype.notify = function notify () {\r\n  // stabilize the subscriber list first\r\n  var subs = this.subs.slice();\r\n  for (var i = 0, l = subs.length; i < l; i++) {\r\n    subs[i].update();\r\n  }\r\n};\r\n\r\n// the current target watcher being evaluated.\r\n// this is globally unique because there could be only one\r\n// watcher being evaluated at any time.\r\nDep.target = null;\r\nvar targetStack = [];\r\n\r\nfunction pushTarget (_target) {\r\n  if (Dep.target) { targetStack.push(Dep.target); }\r\n  Dep.target = _target;\r\n}\r\n\r\nfunction popTarget () {\r\n  Dep.target = targetStack.pop();\r\n}\r\n\r\n/*\r\n * not type checking this file because flow doesn't play well with\r\n * dynamically accessing methods on Array prototype\r\n */\r\n\r\nvar arrayProto = Array.prototype;\r\nvar arrayMethods = Object.create(arrayProto);[\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'splice',\r\n  'sort',\r\n  'reverse'\r\n]\r\n.forEach(function (method) {\r\n  // cache original method\r\n  var original = arrayProto[method];\r\n  def(arrayMethods, method, function mutator () {\r\n    var args = [], len = arguments.length;\r\n    while ( len-- ) args[ len ] = arguments[ len ];\r\n\r\n    var result = original.apply(this, args);\r\n    var ob = this.__ob__;\r\n    var inserted;\r\n    switch (method) {\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args;\r\n        break\r\n      case 'splice':\r\n        inserted = args.slice(2);\r\n        break\r\n    }\r\n    if (inserted) { ob.observeArray(inserted); }\r\n    // notify change\r\n    ob.dep.notify();\r\n    return result\r\n  });\r\n});\r\n\r\n/*  */\r\n\r\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\r\n\r\n/**\r\n * By default, when a reactive property is set, the new value is\r\n * also converted to become reactive. However when passing down props,\r\n * we don't want to force conversion because the value may be a nested value\r\n * under a frozen data structure. Converting it would defeat the optimization.\r\n */\r\nvar observerState = {\r\n  shouldConvert: true\r\n};\r\n\r\n/**\r\n * Observer class that are attached to each observed\r\n * object. Once attached, the observer converts target\r\n * object's property keys into getter/setters that\r\n * collect dependencies and dispatches updates.\r\n */\r\nvar Observer = function Observer (value) {\r\n  this.value = value;\r\n  this.dep = new Dep();\r\n  this.vmCount = 0;\r\n  def(value, '__ob__', this);\r\n  if (Array.isArray(value)) {\r\n    var augment = hasProto\r\n      ? protoAugment\r\n      : copyAugment;\r\n    augment(value, arrayMethods, arrayKeys);\r\n    this.observeArray(value);\r\n  } else {\r\n    this.walk(value);\r\n  }\r\n};\r\n\r\n/**\r\n * Walk through each property and convert them into\r\n * getter/setters. This method should only be called when\r\n * value type is Object.\r\n */\r\nObserver.prototype.walk = function walk (obj) {\r\n  var keys = Object.keys(obj);\r\n  for (var i = 0; i < keys.length; i++) {\r\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\r\n  }\r\n};\r\n\r\n/**\r\n * Observe a list of Array items.\r\n */\r\nObserver.prototype.observeArray = function observeArray (items) {\r\n  for (var i = 0, l = items.length; i < l; i++) {\r\n    observe(items[i]);\r\n  }\r\n};\r\n\r\n// helpers\r\n\r\n/**\r\n * Augment an target Object or Array by intercepting\r\n * the prototype chain using __proto__\r\n */\r\nfunction protoAugment (target, src, keys) {\r\n  /* eslint-disable no-proto */\r\n  target.__proto__ = src;\r\n  /* eslint-enable no-proto */\r\n}\r\n\r\n/**\r\n * Augment an target Object or Array by defining\r\n * hidden properties.\r\n */\r\n/* istanbul ignore next */\r\nfunction copyAugment (target, src, keys) {\r\n  for (var i = 0, l = keys.length; i < l; i++) {\r\n    var key = keys[i];\r\n    def(target, key, src[key]);\r\n  }\r\n}\r\n\r\n/**\r\n * Attempt to create an observer instance for a value,\r\n * returns the new observer if successfully observed,\r\n * or the existing observer if the value already has one.\r\n */\r\nfunction observe (value, asRootData) {\r\n  if (!isObject(value)) {\r\n    return\r\n  }\r\n  var ob;\r\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n    ob = value.__ob__;\r\n  } else if (\r\n    observerState.shouldConvert &&\r\n    !isServerRendering() &&\r\n    (Array.isArray(value) || isPlainObject(value)) &&\r\n    Object.isExtensible(value) &&\r\n    !value._isVue\r\n  ) {\r\n    ob = new Observer(value);\r\n  }\r\n  if (asRootData && ob) {\r\n    ob.vmCount++;\r\n  }\r\n  return ob\r\n}\r\n\r\n/**\r\n * Define a reactive property on an Object.\r\n */\r\nfunction defineReactive$$1 (\r\n  obj,\r\n  key,\r\n  val,\r\n  customSetter,\r\n  shallow\r\n) {\r\n  var dep = new Dep();\r\n\r\n  var property = Object.getOwnPropertyDescriptor(obj, key);\r\n  if (property && property.configurable === false) {\r\n    return\r\n  }\r\n\r\n  // cater for pre-defined getter/setters\r\n  var getter = property && property.get;\r\n  var setter = property && property.set;\r\n\r\n  var childOb = !shallow && observe(val);\r\n  Object.defineProperty(obj, key, {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: function reactiveGetter () {\r\n      var value = getter ? getter.call(obj) : val;\r\n      if (Dep.target) {\r\n        dep.depend();\r\n        if (childOb) {\r\n          childOb.dep.depend();\r\n        }\r\n        if (Array.isArray(value)) {\r\n          dependArray(value);\r\n        }\r\n      }\r\n      return value\r\n    },\r\n    set: function reactiveSetter (newVal) {\r\n      var value = getter ? getter.call(obj) : val;\r\n      /* eslint-disable no-self-compare */\r\n      if (newVal === value || (newVal !== newVal && value !== value)) {\r\n        return\r\n      }\r\n      /* eslint-enable no-self-compare */\r\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\r\n        customSetter();\r\n      }\r\n      if (setter) {\r\n        setter.call(obj, newVal);\r\n      } else {\r\n        val = newVal;\r\n      }\r\n      childOb = !shallow && observe(newVal);\r\n      dep.notify();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set a property on an object. Adds the new property and\r\n * triggers change notification if the property doesn't\r\n * already exist.\r\n */\r\nfunction set (target, key, val) {\r\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\r\n    target.length = Math.max(target.length, key);\r\n    target.splice(key, 1, val);\r\n    return val\r\n  }\r\n  if (hasOwn(target, key)) {\r\n    target[key] = val;\r\n    return val\r\n  }\r\n  var ob = (target).__ob__;\r\n  if (target._isVue || (ob && ob.vmCount)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\r\n      'at runtime - declare it upfront in the data option.'\r\n    );\r\n    return val\r\n  }\r\n  if (!ob) {\r\n    target[key] = val;\r\n    return val\r\n  }\r\n  defineReactive$$1(ob.value, key, val);\r\n  ob.dep.notify();\r\n  return val\r\n}\r\n\r\n/**\r\n * Delete a property and trigger change if necessary.\r\n */\r\nfunction del (target, key) {\r\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\r\n    target.splice(key, 1);\r\n    return\r\n  }\r\n  var ob = (target).__ob__;\r\n  if (target._isVue || (ob && ob.vmCount)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      'Avoid deleting properties on a Vue instance or its root $data ' +\r\n      '- just set it to null.'\r\n    );\r\n    return\r\n  }\r\n  if (!hasOwn(target, key)) {\r\n    return\r\n  }\r\n  delete target[key];\r\n  if (!ob) {\r\n    return\r\n  }\r\n  ob.dep.notify();\r\n}\r\n\r\n/**\r\n * Collect dependencies on array elements when the array is touched, since\r\n * we cannot intercept array element access like property getters.\r\n */\r\nfunction dependArray (value) {\r\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\r\n    e = value[i];\r\n    e && e.__ob__ && e.__ob__.dep.depend();\r\n    if (Array.isArray(e)) {\r\n      dependArray(e);\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Option overwriting strategies are functions that handle\r\n * how to merge a parent option value and a child option\r\n * value into the final value.\r\n */\r\nvar strats = config.optionMergeStrategies;\r\n\r\n/**\r\n * Options with restrictions\r\n */\r\nif (process.env.NODE_ENV !== 'production') {\r\n  strats.el = strats.propsData = function (parent, child, vm, key) {\r\n    if (!vm) {\r\n      warn(\r\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\r\n        'creation with the `new` keyword.'\r\n      );\r\n    }\r\n    return defaultStrat(parent, child)\r\n  };\r\n}\r\n\r\n/**\r\n * Helper that recursively merges two data objects together.\r\n */\r\nfunction mergeData (to, from) {\r\n  if (!from) { return to }\r\n  var key, toVal, fromVal;\r\n  var keys = Object.keys(from);\r\n  for (var i = 0; i < keys.length; i++) {\r\n    key = keys[i];\r\n    toVal = to[key];\r\n    fromVal = from[key];\r\n    if (!hasOwn(to, key)) {\r\n      set(to, key, fromVal);\r\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\r\n      mergeData(toVal, fromVal);\r\n    }\r\n  }\r\n  return to\r\n}\r\n\r\n/**\r\n * Data\r\n */\r\nfunction mergeDataOrFn (\r\n  parentVal,\r\n  childVal,\r\n  vm\r\n) {\r\n  if (!vm) {\r\n    // in a Vue.extend merge, both should be functions\r\n    if (!childVal) {\r\n      return parentVal\r\n    }\r\n    if (!parentVal) {\r\n      return childVal\r\n    }\r\n    // when parentVal & childVal are both present,\r\n    // we need to return a function that returns the\r\n    // merged result of both functions... no need to\r\n    // check if parentVal is a function here because\r\n    // it has to be a function to pass previous merges.\r\n    return function mergedDataFn () {\r\n      return mergeData(\r\n        typeof childVal === 'function' ? childVal.call(this) : childVal,\r\n        typeof parentVal === 'function' ? parentVal.call(this) : parentVal\r\n      )\r\n    }\r\n  } else if (parentVal || childVal) {\r\n    return function mergedInstanceDataFn () {\r\n      // instance merge\r\n      var instanceData = typeof childVal === 'function'\r\n        ? childVal.call(vm)\r\n        : childVal;\r\n      var defaultData = typeof parentVal === 'function'\r\n        ? parentVal.call(vm)\r\n        : undefined;\r\n      if (instanceData) {\r\n        return mergeData(instanceData, defaultData)\r\n      } else {\r\n        return defaultData\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nstrats.data = function (\r\n  parentVal,\r\n  childVal,\r\n  vm\r\n) {\r\n  if (!vm) {\r\n    if (childVal && typeof childVal !== 'function') {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'The \"data\" option should be a function ' +\r\n        'that returns a per-instance value in component ' +\r\n        'definitions.',\r\n        vm\r\n      );\r\n\r\n      return parentVal\r\n    }\r\n    return mergeDataOrFn.call(this, parentVal, childVal)\r\n  }\r\n\r\n  return mergeDataOrFn(parentVal, childVal, vm)\r\n};\r\n\r\n/**\r\n * Hooks and props are merged as arrays.\r\n */\r\nfunction mergeHook (\r\n  parentVal,\r\n  childVal\r\n) {\r\n  return childVal\r\n    ? parentVal\r\n      ? parentVal.concat(childVal)\r\n      : Array.isArray(childVal)\r\n        ? childVal\r\n        : [childVal]\r\n    : parentVal\r\n}\r\n\r\nLIFECYCLE_HOOKS.forEach(function (hook) {\r\n  strats[hook] = mergeHook;\r\n});\r\n\r\n/**\r\n * Assets\r\n *\r\n * When a vm is present (instance creation), we need to do\r\n * a three-way merge between constructor options, instance\r\n * options and parent options.\r\n */\r\nfunction mergeAssets (parentVal, childVal) {\r\n  var res = Object.create(parentVal || null);\r\n  return childVal\r\n    ? extend(res, childVal)\r\n    : res\r\n}\r\n\r\nASSET_TYPES.forEach(function (type) {\r\n  strats[type + 's'] = mergeAssets;\r\n});\r\n\r\n/**\r\n * Watchers.\r\n *\r\n * Watchers hashes should not overwrite one\r\n * another, so we merge them as arrays.\r\n */\r\nstrats.watch = function (parentVal, childVal) {\r\n  // work around Firefox's Object.prototype.watch...\r\n  if (parentVal === nativeWatch) { parentVal = undefined; }\r\n  if (childVal === nativeWatch) { childVal = undefined; }\r\n  /* istanbul ignore if */\r\n  if (!childVal) { return Object.create(parentVal || null) }\r\n  if (!parentVal) { return childVal }\r\n  var ret = {};\r\n  extend(ret, parentVal);\r\n  for (var key in childVal) {\r\n    var parent = ret[key];\r\n    var child = childVal[key];\r\n    if (parent && !Array.isArray(parent)) {\r\n      parent = [parent];\r\n    }\r\n    ret[key] = parent\r\n      ? parent.concat(child)\r\n      : Array.isArray(child) ? child : [child];\r\n  }\r\n  return ret\r\n};\r\n\r\n/**\r\n * Other object hashes.\r\n */\r\nstrats.props =\r\nstrats.methods =\r\nstrats.inject =\r\nstrats.computed = function (parentVal, childVal) {\r\n  if (!parentVal) { return childVal }\r\n  var ret = Object.create(null);\r\n  extend(ret, parentVal);\r\n  if (childVal) { extend(ret, childVal); }\r\n  return ret\r\n};\r\nstrats.provide = mergeDataOrFn;\r\n\r\n/**\r\n * Default strategy.\r\n */\r\nvar defaultStrat = function (parentVal, childVal) {\r\n  return childVal === undefined\r\n    ? parentVal\r\n    : childVal\r\n};\r\n\r\n/**\r\n * Validate component names\r\n */\r\nfunction checkComponents (options) {\r\n  for (var key in options.components) {\r\n    var lower = key.toLowerCase();\r\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\r\n      warn(\r\n        'Do not use built-in or reserved HTML elements as component ' +\r\n        'id: ' + key\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Ensure all props option syntax are normalized into the\r\n * Object-based format.\r\n */\r\nfunction normalizeProps (options) {\r\n  var props = options.props;\r\n  if (!props) { return }\r\n  var res = {};\r\n  var i, val, name;\r\n  if (Array.isArray(props)) {\r\n    i = props.length;\r\n    while (i--) {\r\n      val = props[i];\r\n      if (typeof val === 'string') {\r\n        name = camelize(val);\r\n        res[name] = { type: null };\r\n      } else if (process.env.NODE_ENV !== 'production') {\r\n        warn('props must be strings when using array syntax.');\r\n      }\r\n    }\r\n  } else if (isPlainObject(props)) {\r\n    for (var key in props) {\r\n      val = props[key];\r\n      name = camelize(key);\r\n      res[name] = isPlainObject(val)\r\n        ? val\r\n        : { type: val };\r\n    }\r\n  }\r\n  options.props = res;\r\n}\r\n\r\n/**\r\n * Normalize all injections into Object-based format\r\n */\r\nfunction normalizeInject (options) {\r\n  var inject = options.inject;\r\n  if (Array.isArray(inject)) {\r\n    var normalized = options.inject = {};\r\n    for (var i = 0; i < inject.length; i++) {\r\n      normalized[inject[i]] = inject[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Normalize raw function directives into object format.\r\n */\r\nfunction normalizeDirectives (options) {\r\n  var dirs = options.directives;\r\n  if (dirs) {\r\n    for (var key in dirs) {\r\n      var def = dirs[key];\r\n      if (typeof def === 'function') {\r\n        dirs[key] = { bind: def, update: def };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Merge two option objects into a new one.\r\n * Core utility used in both instantiation and inheritance.\r\n */\r\nfunction mergeOptions (\r\n  parent,\r\n  child,\r\n  vm\r\n) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    checkComponents(child);\r\n  }\r\n\r\n  if (typeof child === 'function') {\r\n    child = child.options;\r\n  }\r\n\r\n  normalizeProps(child);\r\n  normalizeInject(child);\r\n  normalizeDirectives(child);\r\n  var extendsFrom = child.extends;\r\n  if (extendsFrom) {\r\n    parent = mergeOptions(parent, extendsFrom, vm);\r\n  }\r\n  if (child.mixins) {\r\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\r\n      parent = mergeOptions(parent, child.mixins[i], vm);\r\n    }\r\n  }\r\n  var options = {};\r\n  var key;\r\n  for (key in parent) {\r\n    mergeField(key);\r\n  }\r\n  for (key in child) {\r\n    if (!hasOwn(parent, key)) {\r\n      mergeField(key);\r\n    }\r\n  }\r\n  function mergeField (key) {\r\n    var strat = strats[key] || defaultStrat;\r\n    options[key] = strat(parent[key], child[key], vm, key);\r\n  }\r\n  return options\r\n}\r\n\r\n/**\r\n * Resolve an asset.\r\n * This function is used because child instances need access\r\n * to assets defined in its ancestor chain.\r\n */\r\nfunction resolveAsset (\r\n  options,\r\n  type,\r\n  id,\r\n  warnMissing\r\n) {\r\n  /* istanbul ignore if */\r\n  if (typeof id !== 'string') {\r\n    return\r\n  }\r\n  var assets = options[type];\r\n  // check local registration variations first\r\n  if (hasOwn(assets, id)) { return assets[id] }\r\n  var camelizedId = camelize(id);\r\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\r\n  var PascalCaseId = capitalize(camelizedId);\r\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\r\n  // fallback to prototype chain\r\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\r\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\r\n    warn(\r\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\r\n      options\r\n    );\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nfunction validateProp (\r\n  key,\r\n  propOptions,\r\n  propsData,\r\n  vm\r\n) {\r\n  var prop = propOptions[key];\r\n  var absent = !hasOwn(propsData, key);\r\n  var value = propsData[key];\r\n  // handle boolean props\r\n  if (isType(Boolean, prop.type)) {\r\n    if (absent && !hasOwn(prop, 'default')) {\r\n      value = false;\r\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\r\n      value = true;\r\n    }\r\n  }\r\n  // check default value\r\n  if (value === undefined) {\r\n    value = getPropDefaultValue(vm, prop, key);\r\n    // since the default value is a fresh copy,\r\n    // make sure to observe it.\r\n    var prevShouldConvert = observerState.shouldConvert;\r\n    observerState.shouldConvert = true;\r\n    observe(value);\r\n    observerState.shouldConvert = prevShouldConvert;\r\n  }\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertProp(prop, key, value, vm, absent);\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Get the default value of a prop.\r\n */\r\nfunction getPropDefaultValue (vm, prop, key) {\r\n  // no default, return undefined\r\n  if (!hasOwn(prop, 'default')) {\r\n    return undefined\r\n  }\r\n  var def = prop.default;\r\n  // warn against non-factory defaults for Object & Array\r\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\r\n    warn(\r\n      'Invalid default value for prop \"' + key + '\": ' +\r\n      'Props with type Object/Array must use a factory function ' +\r\n      'to return the default value.',\r\n      vm\r\n    );\r\n  }\r\n  // the raw prop value was also undefined from previous render,\r\n  // return previous default value to avoid unnecessary watcher trigger\r\n  if (vm && vm.$options.propsData &&\r\n    vm.$options.propsData[key] === undefined &&\r\n    vm._props[key] !== undefined\r\n  ) {\r\n    return vm._props[key]\r\n  }\r\n  // call factory function for non-Function types\r\n  // a value is Function if its prototype is function even across different execution context\r\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\r\n    ? def.call(vm)\r\n    : def\r\n}\r\n\r\n/**\r\n * Assert whether a prop is valid.\r\n */\r\nfunction assertProp (\r\n  prop,\r\n  name,\r\n  value,\r\n  vm,\r\n  absent\r\n) {\r\n  if (prop.required && absent) {\r\n    warn(\r\n      'Missing required prop: \"' + name + '\"',\r\n      vm\r\n    );\r\n    return\r\n  }\r\n  if (value == null && !prop.required) {\r\n    return\r\n  }\r\n  var type = prop.type;\r\n  var valid = !type || type === true;\r\n  var expectedTypes = [];\r\n  if (type) {\r\n    if (!Array.isArray(type)) {\r\n      type = [type];\r\n    }\r\n    for (var i = 0; i < type.length && !valid; i++) {\r\n      var assertedType = assertType(value, type[i]);\r\n      expectedTypes.push(assertedType.expectedType || '');\r\n      valid = assertedType.valid;\r\n    }\r\n  }\r\n  if (!valid) {\r\n    warn(\r\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\r\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\r\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\r\n      vm\r\n    );\r\n    return\r\n  }\r\n  var validator = prop.validator;\r\n  if (validator) {\r\n    if (!validator(value)) {\r\n      warn(\r\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\r\n        vm\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\r\n\r\nfunction assertType (value, type) {\r\n  var valid;\r\n  var expectedType = getType(type);\r\n  if (simpleCheckRE.test(expectedType)) {\r\n    valid = typeof value === expectedType.toLowerCase();\r\n  } else if (expectedType === 'Object') {\r\n    valid = isPlainObject(value);\r\n  } else if (expectedType === 'Array') {\r\n    valid = Array.isArray(value);\r\n  } else {\r\n    valid = value instanceof type;\r\n  }\r\n  return {\r\n    valid: valid,\r\n    expectedType: expectedType\r\n  }\r\n}\r\n\r\n/**\r\n * Use function string name to check built-in types,\r\n * because a simple equality check will fail when running\r\n * across different vms / iframes.\r\n */\r\nfunction getType (fn) {\r\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\r\n  return match ? match[1] : ''\r\n}\r\n\r\nfunction isType (type, fn) {\r\n  if (!Array.isArray(fn)) {\r\n    return getType(fn) === getType(type)\r\n  }\r\n  for (var i = 0, len = fn.length; i < len; i++) {\r\n    if (getType(fn[i]) === getType(type)) {\r\n      return true\r\n    }\r\n  }\r\n  /* istanbul ignore next */\r\n  return false\r\n}\r\n\r\n/*  */\r\n\r\nvar mark;\r\nvar measure;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var perf = inBrowser && window.performance;\r\n  /* istanbul ignore if */\r\n  if (\r\n    perf &&\r\n    perf.mark &&\r\n    perf.measure &&\r\n    perf.clearMarks &&\r\n    perf.clearMeasures\r\n  ) {\r\n    mark = function (tag) { return perf.mark(tag); };\r\n    measure = function (name, startTag, endTag) {\r\n      perf.measure(name, startTag, endTag);\r\n      perf.clearMarks(startTag);\r\n      perf.clearMarks(endTag);\r\n      perf.clearMeasures(name);\r\n    };\r\n  }\r\n}\r\n\r\n/* not type checking this file because flow doesn't play well with Proxy */\r\n\r\nvar initProxy;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var allowedGlobals = makeMap(\r\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\r\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\r\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\r\n    'require' // for Webpack/Browserify\r\n  );\r\n\r\n  var warnNonPresent = function (target, key) {\r\n    warn(\r\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\r\n      \"referenced during render. Make sure to declare reactive data \" +\r\n      \"properties in the data option.\",\r\n      target\r\n    );\r\n  };\r\n\r\n  var hasProxy =\r\n    typeof Proxy !== 'undefined' &&\r\n    Proxy.toString().match(/native code/);\r\n\r\n  if (hasProxy) {\r\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\r\n    config.keyCodes = new Proxy(config.keyCodes, {\r\n      set: function set (target, key, value) {\r\n        if (isBuiltInModifier(key)) {\r\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\r\n          return false\r\n        } else {\r\n          target[key] = value;\r\n          return true\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  var hasHandler = {\r\n    has: function has (target, key) {\r\n      var has = key in target;\r\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\r\n      if (!has && !isAllowed) {\r\n        warnNonPresent(target, key);\r\n      }\r\n      return has || !isAllowed\r\n    }\r\n  };\r\n\r\n  var getHandler = {\r\n    get: function get (target, key) {\r\n      if (typeof key === 'string' && !(key in target)) {\r\n        warnNonPresent(target, key);\r\n      }\r\n      return target[key]\r\n    }\r\n  };\r\n\r\n  initProxy = function initProxy (vm) {\r\n    if (hasProxy) {\r\n      // determine which proxy handler to use\r\n      var options = vm.$options;\r\n      var handlers = options.render && options.render._withStripped\r\n        ? getHandler\r\n        : hasHandler;\r\n      vm._renderProxy = new Proxy(vm, handlers);\r\n    } else {\r\n      vm._renderProxy = vm;\r\n    }\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nvar VNode = function VNode (\r\n  tag,\r\n  data,\r\n  children,\r\n  text,\r\n  elm,\r\n  context,\r\n  componentOptions,\r\n  asyncFactory\r\n) {\r\n  this.tag = tag;\r\n  this.data = data;\r\n  this.children = children;\r\n  this.text = text;\r\n  this.elm = elm;\r\n  this.ns = undefined;\r\n  this.context = context;\r\n  this.functionalContext = undefined;\r\n  this.key = data && data.key;\r\n  this.componentOptions = componentOptions;\r\n  this.componentInstance = undefined;\r\n  this.parent = undefined;\r\n  this.raw = false;\r\n  this.isStatic = false;\r\n  this.isRootInsert = true;\r\n  this.isComment = false;\r\n  this.isCloned = false;\r\n  this.isOnce = false;\r\n  this.asyncFactory = asyncFactory;\r\n  this.asyncMeta = undefined;\r\n  this.isAsyncPlaceholder = false;\r\n};\r\n\r\nvar prototypeAccessors = { child: {} };\r\n\r\n// DEPRECATED: alias for componentInstance for backwards compat.\r\n/* istanbul ignore next */\r\nprototypeAccessors.child.get = function () {\r\n  return this.componentInstance\r\n};\r\n\r\nObject.defineProperties( VNode.prototype, prototypeAccessors );\r\n\r\nvar createEmptyVNode = function (text) {\r\n  if ( text === void 0 ) text = '';\r\n\r\n  var node = new VNode();\r\n  node.text = text;\r\n  node.isComment = true;\r\n  return node\r\n};\r\n\r\nfunction createTextVNode (val) {\r\n  return new VNode(undefined, undefined, undefined, String(val))\r\n}\r\n\r\n// optimized shallow clone\r\n// used for static nodes and slot nodes because they may be reused across\r\n// multiple renders, cloning them avoids errors when DOM manipulations rely\r\n// on their elm reference.\r\nfunction cloneVNode (vnode) {\r\n  var cloned = new VNode(\r\n    vnode.tag,\r\n    vnode.data,\r\n    vnode.children,\r\n    vnode.text,\r\n    vnode.elm,\r\n    vnode.context,\r\n    vnode.componentOptions,\r\n    vnode.asyncFactory\r\n  );\r\n  cloned.ns = vnode.ns;\r\n  cloned.isStatic = vnode.isStatic;\r\n  cloned.key = vnode.key;\r\n  cloned.isComment = vnode.isComment;\r\n  cloned.isCloned = true;\r\n  return cloned\r\n}\r\n\r\nfunction cloneVNodes (vnodes) {\r\n  var len = vnodes.length;\r\n  var res = new Array(len);\r\n  for (var i = 0; i < len; i++) {\r\n    res[i] = cloneVNode(vnodes[i]);\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar normalizeEvent = cached(function (name) {\r\n  var passive = name.charAt(0) === '&';\r\n  name = passive ? name.slice(1) : name;\r\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\r\n  name = once$$1 ? name.slice(1) : name;\r\n  var capture = name.charAt(0) === '!';\r\n  name = capture ? name.slice(1) : name;\r\n  return {\r\n    name: name,\r\n    once: once$$1,\r\n    capture: capture,\r\n    passive: passive\r\n  }\r\n});\r\n\r\nfunction createFnInvoker (fns) {\r\n  function invoker () {\r\n    var arguments$1 = arguments;\r\n\r\n    var fns = invoker.fns;\r\n    if (Array.isArray(fns)) {\r\n      var cloned = fns.slice();\r\n      for (var i = 0; i < cloned.length; i++) {\r\n        cloned[i].apply(null, arguments$1);\r\n      }\r\n    } else {\r\n      // return handler return value for single handlers\r\n      return fns.apply(null, arguments)\r\n    }\r\n  }\r\n  invoker.fns = fns;\r\n  return invoker\r\n}\r\n\r\nfunction updateListeners (\r\n  on,\r\n  oldOn,\r\n  add,\r\n  remove$$1,\r\n  vm\r\n) {\r\n  var name, cur, old, event;\r\n  for (name in on) {\r\n    cur = on[name];\r\n    old = oldOn[name];\r\n    event = normalizeEvent(name);\r\n    if (isUndef(cur)) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\r\n        vm\r\n      );\r\n    } else if (isUndef(old)) {\r\n      if (isUndef(cur.fns)) {\r\n        cur = on[name] = createFnInvoker(cur);\r\n      }\r\n      add(event.name, cur, event.once, event.capture, event.passive);\r\n    } else if (cur !== old) {\r\n      old.fns = cur;\r\n      on[name] = old;\r\n    }\r\n  }\r\n  for (name in oldOn) {\r\n    if (isUndef(on[name])) {\r\n      event = normalizeEvent(name);\r\n      remove$$1(event.name, oldOn[name], event.capture);\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction mergeVNodeHook (def, hookKey, hook) {\r\n  var invoker;\r\n  var oldHook = def[hookKey];\r\n\r\n  function wrappedHook () {\r\n    hook.apply(this, arguments);\r\n    // important: remove merged hook to ensure it's called only once\r\n    // and prevent memory leak\r\n    remove(invoker.fns, wrappedHook);\r\n  }\r\n\r\n  if (isUndef(oldHook)) {\r\n    // no existing hook\r\n    invoker = createFnInvoker([wrappedHook]);\r\n  } else {\r\n    /* istanbul ignore if */\r\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\r\n      // already a merged invoker\r\n      invoker = oldHook;\r\n      invoker.fns.push(wrappedHook);\r\n    } else {\r\n      // existing plain hook\r\n      invoker = createFnInvoker([oldHook, wrappedHook]);\r\n    }\r\n  }\r\n\r\n  invoker.merged = true;\r\n  def[hookKey] = invoker;\r\n}\r\n\r\n/*  */\r\n\r\nfunction extractPropsFromVNodeData (\r\n  data,\r\n  Ctor,\r\n  tag\r\n) {\r\n  // we are only extracting raw values here.\r\n  // validation and default values are handled in the child\r\n  // component itself.\r\n  var propOptions = Ctor.options.props;\r\n  if (isUndef(propOptions)) {\r\n    return\r\n  }\r\n  var res = {};\r\n  var attrs = data.attrs;\r\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        var keyInLowerCase = key.toLowerCase();\r\n        if (\r\n          key !== keyInLowerCase &&\r\n          attrs && hasOwn(attrs, keyInLowerCase)\r\n        ) {\r\n          tip(\r\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\r\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\r\n            \" \\\"\" + key + \"\\\". \" +\r\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\r\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\r\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\r\n          );\r\n        }\r\n      }\r\n      checkProp(res, props, key, altKey, true) ||\r\n      checkProp(res, attrs, key, altKey, false);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction checkProp (\r\n  res,\r\n  hash,\r\n  key,\r\n  altKey,\r\n  preserve\r\n) {\r\n  if (isDef(hash)) {\r\n    if (hasOwn(hash, key)) {\r\n      res[key] = hash[key];\r\n      if (!preserve) {\r\n        delete hash[key];\r\n      }\r\n      return true\r\n    } else if (hasOwn(hash, altKey)) {\r\n      res[key] = hash[altKey];\r\n      if (!preserve) {\r\n        delete hash[altKey];\r\n      }\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/*  */\r\n\r\n// The template compiler attempts to minimize the need for normalization by\r\n// statically analyzing the template at compile time.\r\n//\r\n// For plain HTML markup, normalization can be completely skipped because the\r\n// generated render function is guaranteed to return Array<VNode>. There are\r\n// two cases where extra normalization is needed:\r\n\r\n// 1. When the children contains components - because a functional component\r\n// may return an Array instead of a single root. In this case, just a simple\r\n// normalization is needed - if any child is an Array, we flatten the whole\r\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\r\n// because functional components already normalize their own children.\r\nfunction simpleNormalizeChildren (children) {\r\n  for (var i = 0; i < children.length; i++) {\r\n    if (Array.isArray(children[i])) {\r\n      return Array.prototype.concat.apply([], children)\r\n    }\r\n  }\r\n  return children\r\n}\r\n\r\n// 2. When the children contains constructs that always generated nested Arrays,\r\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\r\n// with hand-written render functions / JSX. In such cases a full normalization\r\n// is needed to cater to all possible types of children values.\r\nfunction normalizeChildren (children) {\r\n  return isPrimitive(children)\r\n    ? [createTextVNode(children)]\r\n    : Array.isArray(children)\r\n      ? normalizeArrayChildren(children)\r\n      : undefined\r\n}\r\n\r\nfunction isTextNode (node) {\r\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\r\n}\r\n\r\nfunction normalizeArrayChildren (children, nestedIndex) {\r\n  var res = [];\r\n  var i, c, last;\r\n  for (i = 0; i < children.length; i++) {\r\n    c = children[i];\r\n    if (isUndef(c) || typeof c === 'boolean') { continue }\r\n    last = res[res.length - 1];\r\n    //  nested\r\n    if (Array.isArray(c)) {\r\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\r\n    } else if (isPrimitive(c)) {\r\n      if (isTextNode(last)) {\r\n        // merge adjacent text nodes\r\n        // this is necessary for SSR hydration because text nodes are\r\n        // essentially merged when rendered to HTML strings\r\n        (last).text += String(c);\r\n      } else if (c !== '') {\r\n        // convert primitive to vnode\r\n        res.push(createTextVNode(c));\r\n      }\r\n    } else {\r\n      if (isTextNode(c) && isTextNode(last)) {\r\n        // merge adjacent text nodes\r\n        res[res.length - 1] = createTextVNode(last.text + c.text);\r\n      } else {\r\n        // default key for nested array children (likely generated by v-for)\r\n        if (isTrue(children._isVList) &&\r\n          isDef(c.tag) &&\r\n          isUndef(c.key) &&\r\n          isDef(nestedIndex)) {\r\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\r\n        }\r\n        res.push(c);\r\n      }\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nfunction ensureCtor (comp, base) {\r\n  if (comp.__esModule && comp.default) {\r\n    comp = comp.default;\r\n  }\r\n  return isObject(comp)\r\n    ? base.extend(comp)\r\n    : comp\r\n}\r\n\r\nfunction createAsyncPlaceholder (\r\n  factory,\r\n  data,\r\n  context,\r\n  children,\r\n  tag\r\n) {\r\n  var node = createEmptyVNode();\r\n  node.asyncFactory = factory;\r\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\r\n  return node\r\n}\r\n\r\nfunction resolveAsyncComponent (\r\n  factory,\r\n  baseCtor,\r\n  context\r\n) {\r\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\r\n    return factory.errorComp\r\n  }\r\n\r\n  if (isDef(factory.resolved)) {\r\n    return factory.resolved\r\n  }\r\n\r\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\r\n    return factory.loadingComp\r\n  }\r\n\r\n  if (isDef(factory.contexts)) {\r\n    // already pending\r\n    factory.contexts.push(context);\r\n  } else {\r\n    var contexts = factory.contexts = [context];\r\n    var sync = true;\r\n\r\n    var forceRender = function () {\r\n      for (var i = 0, l = contexts.length; i < l; i++) {\r\n        contexts[i].$forceUpdate();\r\n      }\r\n    };\r\n\r\n    var resolve = once(function (res) {\r\n      // cache resolved\r\n      factory.resolved = ensureCtor(res, baseCtor);\r\n      // invoke callbacks only if this is not a synchronous resolve\r\n      // (async resolves are shimmed as synchronous during SSR)\r\n      if (!sync) {\r\n        forceRender();\r\n      }\r\n    });\r\n\r\n    var reject = once(function (reason) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"Failed to resolve async component: \" + (String(factory)) +\r\n        (reason ? (\"\\nReason: \" + reason) : '')\r\n      );\r\n      if (isDef(factory.errorComp)) {\r\n        factory.error = true;\r\n        forceRender();\r\n      }\r\n    });\r\n\r\n    var res = factory(resolve, reject);\r\n\r\n    if (isObject(res)) {\r\n      if (typeof res.then === 'function') {\r\n        // () => Promise\r\n        if (isUndef(factory.resolved)) {\r\n          res.then(resolve, reject);\r\n        }\r\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\r\n        res.component.then(resolve, reject);\r\n\r\n        if (isDef(res.error)) {\r\n          factory.errorComp = ensureCtor(res.error, baseCtor);\r\n        }\r\n\r\n        if (isDef(res.loading)) {\r\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\r\n          if (res.delay === 0) {\r\n            factory.loading = true;\r\n          } else {\r\n            setTimeout(function () {\r\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\r\n                factory.loading = true;\r\n                forceRender();\r\n              }\r\n            }, res.delay || 200);\r\n          }\r\n        }\r\n\r\n        if (isDef(res.timeout)) {\r\n          setTimeout(function () {\r\n            if (isUndef(factory.resolved)) {\r\n              reject(\r\n                process.env.NODE_ENV !== 'production'\r\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\r\n                  : null\r\n              );\r\n            }\r\n          }, res.timeout);\r\n        }\r\n      }\r\n    }\r\n\r\n    sync = false;\r\n    // return in case resolved synchronously\r\n    return factory.loading\r\n      ? factory.loadingComp\r\n      : factory.resolved\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction getFirstComponentChild (children) {\r\n  if (Array.isArray(children)) {\r\n    for (var i = 0; i < children.length; i++) {\r\n      var c = children[i];\r\n      if (isDef(c) && isDef(c.componentOptions)) {\r\n        return c\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/*  */\r\n\r\nfunction initEvents (vm) {\r\n  vm._events = Object.create(null);\r\n  vm._hasHookEvent = false;\r\n  // init parent attached events\r\n  var listeners = vm.$options._parentListeners;\r\n  if (listeners) {\r\n    updateComponentListeners(vm, listeners);\r\n  }\r\n}\r\n\r\nvar target;\r\n\r\nfunction add (event, fn, once$$1) {\r\n  if (once$$1) {\r\n    target.$once(event, fn);\r\n  } else {\r\n    target.$on(event, fn);\r\n  }\r\n}\r\n\r\nfunction remove$1 (event, fn) {\r\n  target.$off(event, fn);\r\n}\r\n\r\nfunction updateComponentListeners (\r\n  vm,\r\n  listeners,\r\n  oldListeners\r\n) {\r\n  target = vm;\r\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\r\n}\r\n\r\nfunction eventsMixin (Vue) {\r\n  var hookRE = /^hook:/;\r\n  Vue.prototype.$on = function (event, fn) {\r\n    var this$1 = this;\r\n\r\n    var vm = this;\r\n    if (Array.isArray(event)) {\r\n      for (var i = 0, l = event.length; i < l; i++) {\r\n        this$1.$on(event[i], fn);\r\n      }\r\n    } else {\r\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\r\n      // optimize hook:event cost by using a boolean flag marked at registration\r\n      // instead of a hash lookup\r\n      if (hookRE.test(event)) {\r\n        vm._hasHookEvent = true;\r\n      }\r\n    }\r\n    return vm\r\n  };\r\n\r\n  Vue.prototype.$once = function (event, fn) {\r\n    var vm = this;\r\n    function on () {\r\n      vm.$off(event, on);\r\n      fn.apply(vm, arguments);\r\n    }\r\n    on.fn = fn;\r\n    vm.$on(event, on);\r\n    return vm\r\n  };\r\n\r\n  Vue.prototype.$off = function (event, fn) {\r\n    var this$1 = this;\r\n\r\n    var vm = this;\r\n    // all\r\n    if (!arguments.length) {\r\n      vm._events = Object.create(null);\r\n      return vm\r\n    }\r\n    // array of events\r\n    if (Array.isArray(event)) {\r\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\r\n        this$1.$off(event[i$1], fn);\r\n      }\r\n      return vm\r\n    }\r\n    // specific event\r\n    var cbs = vm._events[event];\r\n    if (!cbs) {\r\n      return vm\r\n    }\r\n    if (arguments.length === 1) {\r\n      vm._events[event] = null;\r\n      return vm\r\n    }\r\n    // specific handler\r\n    var cb;\r\n    var i = cbs.length;\r\n    while (i--) {\r\n      cb = cbs[i];\r\n      if (cb === fn || cb.fn === fn) {\r\n        cbs.splice(i, 1);\r\n        break\r\n      }\r\n    }\r\n    return vm\r\n  };\r\n\r\n  Vue.prototype.$emit = function (event) {\r\n    var vm = this;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      var lowerCaseEvent = event.toLowerCase();\r\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\r\n        tip(\r\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\r\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\r\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\r\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\r\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\r\n        );\r\n      }\r\n    }\r\n    var cbs = vm._events[event];\r\n    if (cbs) {\r\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\r\n      var args = toArray(arguments, 1);\r\n      for (var i = 0, l = cbs.length; i < l; i++) {\r\n        try {\r\n          cbs[i].apply(vm, args);\r\n        } catch (e) {\r\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\r\n        }\r\n      }\r\n    }\r\n    return vm\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for resolving raw children VNodes into a slot object.\r\n */\r\nfunction resolveSlots (\r\n  children,\r\n  context\r\n) {\r\n  var slots = {};\r\n  if (!children) {\r\n    return slots\r\n  }\r\n  var defaultSlot = [];\r\n  for (var i = 0, l = children.length; i < l; i++) {\r\n    var child = children[i];\r\n    // named slots should only be respected if the vnode was rendered in the\r\n    // same context.\r\n    if ((child.context === context || child.functionalContext === context) &&\r\n      child.data && child.data.slot != null\r\n    ) {\r\n      var name = child.data.slot;\r\n      var slot = (slots[name] || (slots[name] = []));\r\n      if (child.tag === 'template') {\r\n        slot.push.apply(slot, child.children);\r\n      } else {\r\n        slot.push(child);\r\n      }\r\n    } else {\r\n      defaultSlot.push(child);\r\n    }\r\n  }\r\n  // ignore whitespace\r\n  if (!defaultSlot.every(isWhitespace)) {\r\n    slots.default = defaultSlot;\r\n  }\r\n  return slots\r\n}\r\n\r\nfunction isWhitespace (node) {\r\n  return node.isComment || node.text === ' '\r\n}\r\n\r\nfunction resolveScopedSlots (\r\n  fns, // see flow/vnode\r\n  res\r\n) {\r\n  res = res || {};\r\n  for (var i = 0; i < fns.length; i++) {\r\n    if (Array.isArray(fns[i])) {\r\n      resolveScopedSlots(fns[i], res);\r\n    } else {\r\n      res[fns[i].key] = fns[i].fn;\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar activeInstance = null;\r\nvar isUpdatingChildComponent = false;\r\n\r\nfunction initLifecycle (vm) {\r\n  var options = vm.$options;\r\n\r\n  // locate first non-abstract parent\r\n  var parent = options.parent;\r\n  if (parent && !options.abstract) {\r\n    while (parent.$options.abstract && parent.$parent) {\r\n      parent = parent.$parent;\r\n    }\r\n    parent.$children.push(vm);\r\n  }\r\n\r\n  vm.$parent = parent;\r\n  vm.$root = parent ? parent.$root : vm;\r\n\r\n  vm.$children = [];\r\n  vm.$refs = {};\r\n\r\n  vm._watcher = null;\r\n  vm._inactive = null;\r\n  vm._directInactive = false;\r\n  vm._isMounted = false;\r\n  vm._isDestroyed = false;\r\n  vm._isBeingDestroyed = false;\r\n}\r\n\r\nfunction lifecycleMixin (Vue) {\r\n  Vue.prototype._update = function (vnode, hydrating) {\r\n    var vm = this;\r\n    if (vm._isMounted) {\r\n      callHook(vm, 'beforeUpdate');\r\n    }\r\n    var prevEl = vm.$el;\r\n    var prevVnode = vm._vnode;\r\n    var prevActiveInstance = activeInstance;\r\n    activeInstance = vm;\r\n    vm._vnode = vnode;\r\n    // Vue.prototype.__patch__ is injected in entry points\r\n    // based on the rendering backend used.\r\n    if (!prevVnode) {\r\n      // initial render\r\n      vm.$el = vm.__patch__(\r\n        vm.$el, vnode, hydrating, false /* removeOnly */,\r\n        vm.$options._parentElm,\r\n        vm.$options._refElm\r\n      );\r\n      // no need for the ref nodes after initial patch\r\n      // this prevents keeping a detached DOM tree in memory (#5851)\r\n      vm.$options._parentElm = vm.$options._refElm = null;\r\n    } else {\r\n      // updates\r\n      vm.$el = vm.__patch__(prevVnode, vnode);\r\n    }\r\n    activeInstance = prevActiveInstance;\r\n    // update __vue__ reference\r\n    if (prevEl) {\r\n      prevEl.__vue__ = null;\r\n    }\r\n    if (vm.$el) {\r\n      vm.$el.__vue__ = vm;\r\n    }\r\n    // if parent is an HOC, update its $el as well\r\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\r\n      vm.$parent.$el = vm.$el;\r\n    }\r\n    // updated hook is called by the scheduler to ensure that children are\r\n    // updated in a parent's updated hook.\r\n  };\r\n\r\n  Vue.prototype.$forceUpdate = function () {\r\n    var vm = this;\r\n    if (vm._watcher) {\r\n      vm._watcher.update();\r\n    }\r\n  };\r\n\r\n  Vue.prototype.$destroy = function () {\r\n    var vm = this;\r\n    if (vm._isBeingDestroyed) {\r\n      return\r\n    }\r\n    callHook(vm, 'beforeDestroy');\r\n    vm._isBeingDestroyed = true;\r\n    // remove self from parent\r\n    var parent = vm.$parent;\r\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\r\n      remove(parent.$children, vm);\r\n    }\r\n    // teardown watchers\r\n    if (vm._watcher) {\r\n      vm._watcher.teardown();\r\n    }\r\n    var i = vm._watchers.length;\r\n    while (i--) {\r\n      vm._watchers[i].teardown();\r\n    }\r\n    // remove reference from data ob\r\n    // frozen object may not have observer.\r\n    if (vm._data.__ob__) {\r\n      vm._data.__ob__.vmCount--;\r\n    }\r\n    // call the last hook...\r\n    vm._isDestroyed = true;\r\n    // invoke destroy hooks on current rendered tree\r\n    vm.__patch__(vm._vnode, null);\r\n    // fire destroyed hook\r\n    callHook(vm, 'destroyed');\r\n    // turn off all instance listeners.\r\n    vm.$off();\r\n    // remove __vue__ reference\r\n    if (vm.$el) {\r\n      vm.$el.__vue__ = null;\r\n    }\r\n  };\r\n}\r\n\r\nfunction mountComponent (\r\n  vm,\r\n  el,\r\n  hydrating\r\n) {\r\n  vm.$el = el;\r\n  if (!vm.$options.render) {\r\n    vm.$options.render = createEmptyVNode;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      /* istanbul ignore if */\r\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\r\n        vm.$options.el || el) {\r\n        warn(\r\n          'You are using the runtime-only build of Vue where the template ' +\r\n          'compiler is not available. Either pre-compile the templates into ' +\r\n          'render functions, or use the compiler-included build.',\r\n          vm\r\n        );\r\n      } else {\r\n        warn(\r\n          'Failed to mount component: template or render function not defined.',\r\n          vm\r\n        );\r\n      }\r\n    }\r\n  }\r\n  callHook(vm, 'beforeMount');\r\n\r\n  var updateComponent;\r\n  /* istanbul ignore if */\r\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n    updateComponent = function () {\r\n      var name = vm._name;\r\n      var id = vm._uid;\r\n      var startTag = \"vue-perf-start:\" + id;\r\n      var endTag = \"vue-perf-end:\" + id;\r\n\r\n      mark(startTag);\r\n      var vnode = vm._render();\r\n      mark(endTag);\r\n      measure((name + \" render\"), startTag, endTag);\r\n\r\n      mark(startTag);\r\n      vm._update(vnode, hydrating);\r\n      mark(endTag);\r\n      measure((name + \" patch\"), startTag, endTag);\r\n    };\r\n  } else {\r\n    updateComponent = function () {\r\n      vm._update(vm._render(), hydrating);\r\n    };\r\n  }\r\n\r\n  vm._watcher = new Watcher(vm, updateComponent, noop);\r\n  hydrating = false;\r\n\r\n  // manually mounted instance, call mounted on self\r\n  // mounted is called for render-created child components in its inserted hook\r\n  if (vm.$vnode == null) {\r\n    vm._isMounted = true;\r\n    callHook(vm, 'mounted');\r\n  }\r\n  return vm\r\n}\r\n\r\nfunction updateChildComponent (\r\n  vm,\r\n  propsData,\r\n  listeners,\r\n  parentVnode,\r\n  renderChildren\r\n) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    isUpdatingChildComponent = true;\r\n  }\r\n\r\n  // determine whether component has slot children\r\n  // we need to do this before overwriting $options._renderChildren\r\n  var hasChildren = !!(\r\n    renderChildren ||               // has new static slots\r\n    vm.$options._renderChildren ||  // has old static slots\r\n    parentVnode.data.scopedSlots || // has new scoped slots\r\n    vm.$scopedSlots !== emptyObject // has old scoped slots\r\n  );\r\n\r\n  vm.$options._parentVnode = parentVnode;\r\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\r\n\r\n  if (vm._vnode) { // update child tree's parent\r\n    vm._vnode.parent = parentVnode;\r\n  }\r\n  vm.$options._renderChildren = renderChildren;\r\n\r\n  // update $attrs and $listensers hash\r\n  // these are also reactive so they may trigger child update if the child\r\n  // used them during render\r\n  vm.$attrs = parentVnode.data && parentVnode.data.attrs;\r\n  vm.$listeners = listeners;\r\n\r\n  // update props\r\n  if (propsData && vm.$options.props) {\r\n    observerState.shouldConvert = false;\r\n    var props = vm._props;\r\n    var propKeys = vm.$options._propKeys || [];\r\n    for (var i = 0; i < propKeys.length; i++) {\r\n      var key = propKeys[i];\r\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\r\n    }\r\n    observerState.shouldConvert = true;\r\n    // keep a copy of raw propsData\r\n    vm.$options.propsData = propsData;\r\n  }\r\n\r\n  // update listeners\r\n  if (listeners) {\r\n    var oldListeners = vm.$options._parentListeners;\r\n    vm.$options._parentListeners = listeners;\r\n    updateComponentListeners(vm, listeners, oldListeners);\r\n  }\r\n  // resolve slots + force update if has children\r\n  if (hasChildren) {\r\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\r\n    vm.$forceUpdate();\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    isUpdatingChildComponent = false;\r\n  }\r\n}\r\n\r\nfunction isInInactiveTree (vm) {\r\n  while (vm && (vm = vm.$parent)) {\r\n    if (vm._inactive) { return true }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction activateChildComponent (vm, direct) {\r\n  if (direct) {\r\n    vm._directInactive = false;\r\n    if (isInInactiveTree(vm)) {\r\n      return\r\n    }\r\n  } else if (vm._directInactive) {\r\n    return\r\n  }\r\n  if (vm._inactive || vm._inactive === null) {\r\n    vm._inactive = false;\r\n    for (var i = 0; i < vm.$children.length; i++) {\r\n      activateChildComponent(vm.$children[i]);\r\n    }\r\n    callHook(vm, 'activated');\r\n  }\r\n}\r\n\r\nfunction deactivateChildComponent (vm, direct) {\r\n  if (direct) {\r\n    vm._directInactive = true;\r\n    if (isInInactiveTree(vm)) {\r\n      return\r\n    }\r\n  }\r\n  if (!vm._inactive) {\r\n    vm._inactive = true;\r\n    for (var i = 0; i < vm.$children.length; i++) {\r\n      deactivateChildComponent(vm.$children[i]);\r\n    }\r\n    callHook(vm, 'deactivated');\r\n  }\r\n}\r\n\r\nfunction callHook (vm, hook) {\r\n  var handlers = vm.$options[hook];\r\n  if (handlers) {\r\n    for (var i = 0, j = handlers.length; i < j; i++) {\r\n      try {\r\n        handlers[i].call(vm);\r\n      } catch (e) {\r\n        handleError(e, vm, (hook + \" hook\"));\r\n      }\r\n    }\r\n  }\r\n  if (vm._hasHookEvent) {\r\n    vm.$emit('hook:' + hook);\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n\r\nvar MAX_UPDATE_COUNT = 100;\r\n\r\nvar queue = [];\r\nvar activatedChildren = [];\r\nvar has = {};\r\nvar circular = {};\r\nvar waiting = false;\r\nvar flushing = false;\r\nvar index = 0;\r\n\r\n/**\r\n * Reset the scheduler's state.\r\n */\r\nfunction resetSchedulerState () {\r\n  index = queue.length = activatedChildren.length = 0;\r\n  has = {};\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    circular = {};\r\n  }\r\n  waiting = flushing = false;\r\n}\r\n\r\n/**\r\n * Flush both queues and run the watchers.\r\n */\r\nfunction flushSchedulerQueue () {\r\n  flushing = true;\r\n  var watcher, id;\r\n\r\n  // Sort queue before flush.\r\n  // This ensures that:\r\n  // 1. Components are updated from parent to child. (because parent is always\r\n  //    created before the child)\r\n  // 2. A component's user watchers are run before its render watcher (because\r\n  //    user watchers are created before the render watcher)\r\n  // 3. If a component is destroyed during a parent component's watcher run,\r\n  //    its watchers can be skipped.\r\n  queue.sort(function (a, b) { return a.id - b.id; });\r\n\r\n  // do not cache length because more watchers might be pushed\r\n  // as we run existing watchers\r\n  for (index = 0; index < queue.length; index++) {\r\n    watcher = queue[index];\r\n    id = watcher.id;\r\n    has[id] = null;\r\n    watcher.run();\r\n    // in dev build, check and stop circular updates.\r\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\r\n      circular[id] = (circular[id] || 0) + 1;\r\n      if (circular[id] > MAX_UPDATE_COUNT) {\r\n        warn(\r\n          'You may have an infinite update loop ' + (\r\n            watcher.user\r\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\r\n              : \"in a component render function.\"\r\n          ),\r\n          watcher.vm\r\n        );\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // keep copies of post queues before resetting state\r\n  var activatedQueue = activatedChildren.slice();\r\n  var updatedQueue = queue.slice();\r\n\r\n  resetSchedulerState();\r\n\r\n  // call component updated and activated hooks\r\n  callActivatedHooks(activatedQueue);\r\n  callUpdatedHooks(updatedQueue);\r\n\r\n  // devtool hook\r\n  /* istanbul ignore if */\r\n  if (devtools && config.devtools) {\r\n    devtools.emit('flush');\r\n  }\r\n}\r\n\r\nfunction callUpdatedHooks (queue) {\r\n  var i = queue.length;\r\n  while (i--) {\r\n    var watcher = queue[i];\r\n    var vm = watcher.vm;\r\n    if (vm._watcher === watcher && vm._isMounted) {\r\n      callHook(vm, 'updated');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Queue a kept-alive component that was activated during patch.\r\n * The queue will be processed after the entire tree has been patched.\r\n */\r\nfunction queueActivatedComponent (vm) {\r\n  // setting _inactive to false here so that a render function can\r\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\r\n  vm._inactive = false;\r\n  activatedChildren.push(vm);\r\n}\r\n\r\nfunction callActivatedHooks (queue) {\r\n  for (var i = 0; i < queue.length; i++) {\r\n    queue[i]._inactive = true;\r\n    activateChildComponent(queue[i], true /* true */);\r\n  }\r\n}\r\n\r\n/**\r\n * Push a watcher into the watcher queue.\r\n * Jobs with duplicate IDs will be skipped unless it's\r\n * pushed when the queue is being flushed.\r\n */\r\nfunction queueWatcher (watcher) {\r\n  var id = watcher.id;\r\n  if (has[id] == null) {\r\n    has[id] = true;\r\n    if (!flushing) {\r\n      queue.push(watcher);\r\n    } else {\r\n      // if already flushing, splice the watcher based on its id\r\n      // if already past its id, it will be run next immediately.\r\n      var i = queue.length - 1;\r\n      while (i > index && queue[i].id > watcher.id) {\r\n        i--;\r\n      }\r\n      queue.splice(i + 1, 0, watcher);\r\n    }\r\n    // queue the flush\r\n    if (!waiting) {\r\n      waiting = true;\r\n      nextTick(flushSchedulerQueue);\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar uid$2 = 0;\r\n\r\n/**\r\n * A watcher parses an expression, collects dependencies,\r\n * and fires callback when the expression value changes.\r\n * This is used for both the $watch() api and directives.\r\n */\r\nvar Watcher = function Watcher (\r\n  vm,\r\n  expOrFn,\r\n  cb,\r\n  options\r\n) {\r\n  this.vm = vm;\r\n  vm._watchers.push(this);\r\n  // options\r\n  if (options) {\r\n    this.deep = !!options.deep;\r\n    this.user = !!options.user;\r\n    this.lazy = !!options.lazy;\r\n    this.sync = !!options.sync;\r\n  } else {\r\n    this.deep = this.user = this.lazy = this.sync = false;\r\n  }\r\n  this.cb = cb;\r\n  this.id = ++uid$2; // uid for batching\r\n  this.active = true;\r\n  this.dirty = this.lazy; // for lazy watchers\r\n  this.deps = [];\r\n  this.newDeps = [];\r\n  this.depIds = new _Set();\r\n  this.newDepIds = new _Set();\r\n  this.expression = process.env.NODE_ENV !== 'production'\r\n    ? expOrFn.toString()\r\n    : '';\r\n  // parse expression for getter\r\n  if (typeof expOrFn === 'function') {\r\n    this.getter = expOrFn;\r\n  } else {\r\n    this.getter = parsePath(expOrFn);\r\n    if (!this.getter) {\r\n      this.getter = function () {};\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\r\n        'Watcher only accepts simple dot-delimited paths. ' +\r\n        'For full control, use a function instead.',\r\n        vm\r\n      );\r\n    }\r\n  }\r\n  this.value = this.lazy\r\n    ? undefined\r\n    : this.get();\r\n};\r\n\r\n/**\r\n * Evaluate the getter, and re-collect dependencies.\r\n */\r\nWatcher.prototype.get = function get () {\r\n  pushTarget(this);\r\n  var value;\r\n  var vm = this.vm;\r\n  try {\r\n    value = this.getter.call(vm, vm);\r\n  } catch (e) {\r\n    if (this.user) {\r\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\r\n    } else {\r\n      throw e\r\n    }\r\n  } finally {\r\n    // \"touch\" every property so they are all tracked as\r\n    // dependencies for deep watching\r\n    if (this.deep) {\r\n      traverse(value);\r\n    }\r\n    popTarget();\r\n    this.cleanupDeps();\r\n  }\r\n  return value\r\n};\r\n\r\n/**\r\n * Add a dependency to this directive.\r\n */\r\nWatcher.prototype.addDep = function addDep (dep) {\r\n  var id = dep.id;\r\n  if (!this.newDepIds.has(id)) {\r\n    this.newDepIds.add(id);\r\n    this.newDeps.push(dep);\r\n    if (!this.depIds.has(id)) {\r\n      dep.addSub(this);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up for dependency collection.\r\n */\r\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\r\n    var this$1 = this;\r\n\r\n  var i = this.deps.length;\r\n  while (i--) {\r\n    var dep = this$1.deps[i];\r\n    if (!this$1.newDepIds.has(dep.id)) {\r\n      dep.removeSub(this$1);\r\n    }\r\n  }\r\n  var tmp = this.depIds;\r\n  this.depIds = this.newDepIds;\r\n  this.newDepIds = tmp;\r\n  this.newDepIds.clear();\r\n  tmp = this.deps;\r\n  this.deps = this.newDeps;\r\n  this.newDeps = tmp;\r\n  this.newDeps.length = 0;\r\n};\r\n\r\n/**\r\n * Subscriber interface.\r\n * Will be called when a dependency changes.\r\n */\r\nWatcher.prototype.update = function update () {\r\n  /* istanbul ignore else */\r\n  if (this.lazy) {\r\n    this.dirty = true;\r\n  } else if (this.sync) {\r\n    this.run();\r\n  } else {\r\n    queueWatcher(this);\r\n  }\r\n};\r\n\r\n/**\r\n * Scheduler job interface.\r\n * Will be called by the scheduler.\r\n */\r\nWatcher.prototype.run = function run () {\r\n  if (this.active) {\r\n    var value = this.get();\r\n    if (\r\n      value !== this.value ||\r\n      // Deep watchers and watchers on Object/Arrays should fire even\r\n      // when the value is the same, because the value may\r\n      // have mutated.\r\n      isObject(value) ||\r\n      this.deep\r\n    ) {\r\n      // set new value\r\n      var oldValue = this.value;\r\n      this.value = value;\r\n      if (this.user) {\r\n        try {\r\n          this.cb.call(this.vm, value, oldValue);\r\n        } catch (e) {\r\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\r\n        }\r\n      } else {\r\n        this.cb.call(this.vm, value, oldValue);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Evaluate the value of the watcher.\r\n * This only gets called for lazy watchers.\r\n */\r\nWatcher.prototype.evaluate = function evaluate () {\r\n  this.value = this.get();\r\n  this.dirty = false;\r\n};\r\n\r\n/**\r\n * Depend on all deps collected by this watcher.\r\n */\r\nWatcher.prototype.depend = function depend () {\r\n    var this$1 = this;\r\n\r\n  var i = this.deps.length;\r\n  while (i--) {\r\n    this$1.deps[i].depend();\r\n  }\r\n};\r\n\r\n/**\r\n * Remove self from all dependencies' subscriber list.\r\n */\r\nWatcher.prototype.teardown = function teardown () {\r\n    var this$1 = this;\r\n\r\n  if (this.active) {\r\n    // remove self from vm's watcher list\r\n    // this is a somewhat expensive operation so we skip it\r\n    // if the vm is being destroyed.\r\n    if (!this.vm._isBeingDestroyed) {\r\n      remove(this.vm._watchers, this);\r\n    }\r\n    var i = this.deps.length;\r\n    while (i--) {\r\n      this$1.deps[i].removeSub(this$1);\r\n    }\r\n    this.active = false;\r\n  }\r\n};\r\n\r\n/**\r\n * Recursively traverse an object to evoke all converted\r\n * getters, so that every nested property inside the object\r\n * is collected as a \"deep\" dependency.\r\n */\r\nvar seenObjects = new _Set();\r\nfunction traverse (val) {\r\n  seenObjects.clear();\r\n  _traverse(val, seenObjects);\r\n}\r\n\r\nfunction _traverse (val, seen) {\r\n  var i, keys;\r\n  var isA = Array.isArray(val);\r\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\r\n    return\r\n  }\r\n  if (val.__ob__) {\r\n    var depId = val.__ob__.dep.id;\r\n    if (seen.has(depId)) {\r\n      return\r\n    }\r\n    seen.add(depId);\r\n  }\r\n  if (isA) {\r\n    i = val.length;\r\n    while (i--) { _traverse(val[i], seen); }\r\n  } else {\r\n    keys = Object.keys(val);\r\n    i = keys.length;\r\n    while (i--) { _traverse(val[keys[i]], seen); }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar sharedPropertyDefinition = {\r\n  enumerable: true,\r\n  configurable: true,\r\n  get: noop,\r\n  set: noop\r\n};\r\n\r\nfunction proxy (target, sourceKey, key) {\r\n  sharedPropertyDefinition.get = function proxyGetter () {\r\n    return this[sourceKey][key]\r\n  };\r\n  sharedPropertyDefinition.set = function proxySetter (val) {\r\n    this[sourceKey][key] = val;\r\n  };\r\n  Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\n\r\nfunction initState (vm) {\r\n  vm._watchers = [];\r\n  var opts = vm.$options;\r\n  if (opts.props) { initProps(vm, opts.props); }\r\n  if (opts.methods) { initMethods(vm, opts.methods); }\r\n  if (opts.data) {\r\n    initData(vm);\r\n  } else {\r\n    observe(vm._data = {}, true /* asRootData */);\r\n  }\r\n  if (opts.computed) { initComputed(vm, opts.computed); }\r\n  if (opts.watch && opts.watch !== nativeWatch) {\r\n    initWatch(vm, opts.watch);\r\n  }\r\n}\r\n\r\nfunction checkOptionType (vm, name) {\r\n  var option = vm.$options[name];\r\n  if (!isPlainObject(option)) {\r\n    warn(\r\n      (\"component option \\\"\" + name + \"\\\" should be an object.\"),\r\n      vm\r\n    );\r\n  }\r\n}\r\n\r\nfunction initProps (vm, propsOptions) {\r\n  var propsData = vm.$options.propsData || {};\r\n  var props = vm._props = {};\r\n  // cache prop keys so that future props updates can iterate using Array\r\n  // instead of dynamic object key enumeration.\r\n  var keys = vm.$options._propKeys = [];\r\n  var isRoot = !vm.$parent;\r\n  // root instance props should be converted\r\n  observerState.shouldConvert = isRoot;\r\n  var loop = function ( key ) {\r\n    keys.push(key);\r\n    var value = validateProp(key, propsOptions, propsData, vm);\r\n    /* istanbul ignore else */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (isReservedAttribute(key) || config.isReservedAttr(key)) {\r\n        warn(\r\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\r\n          vm\r\n        );\r\n      }\r\n      defineReactive$$1(props, key, value, function () {\r\n        if (vm.$parent && !isUpdatingChildComponent) {\r\n          warn(\r\n            \"Avoid mutating a prop directly since the value will be \" +\r\n            \"overwritten whenever the parent component re-renders. \" +\r\n            \"Instead, use a data or computed property based on the prop's \" +\r\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\r\n            vm\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      defineReactive$$1(props, key, value);\r\n    }\r\n    // static props are already proxied on the component's prototype\r\n    // during Vue.extend(). We only need to proxy props defined at\r\n    // instantiation here.\r\n    if (!(key in vm)) {\r\n      proxy(vm, \"_props\", key);\r\n    }\r\n  };\r\n\r\n  for (var key in propsOptions) loop( key );\r\n  observerState.shouldConvert = true;\r\n}\r\n\r\nfunction initData (vm) {\r\n  var data = vm.$options.data;\r\n  data = vm._data = typeof data === 'function'\r\n    ? getData(data, vm)\r\n    : data || {};\r\n  if (!isPlainObject(data)) {\r\n    data = {};\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      'data functions should return an object:\\n' +\r\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\r\n      vm\r\n    );\r\n  }\r\n  // proxy data on instance\r\n  var keys = Object.keys(data);\r\n  var props = vm.$options.props;\r\n  var methods = vm.$options.methods;\r\n  var i = keys.length;\r\n  while (i--) {\r\n    var key = keys[i];\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (methods && hasOwn(methods, key)) {\r\n        warn(\r\n          (\"method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\r\n          vm\r\n        );\r\n      }\r\n    }\r\n    if (props && hasOwn(props, key)) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\r\n        \"Use prop default value instead.\",\r\n        vm\r\n      );\r\n    } else if (!isReserved(key)) {\r\n      proxy(vm, \"_data\", key);\r\n    }\r\n  }\r\n  // observe data\r\n  observe(data, true /* asRootData */);\r\n}\r\n\r\nfunction getData (data, vm) {\r\n  try {\r\n    return data.call(vm)\r\n  } catch (e) {\r\n    handleError(e, vm, \"data()\");\r\n    return {}\r\n  }\r\n}\r\n\r\nvar computedWatcherOptions = { lazy: true };\r\n\r\nfunction initComputed (vm, computed) {\r\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'computed');\r\n  var watchers = vm._computedWatchers = Object.create(null);\r\n\r\n  for (var key in computed) {\r\n    var userDef = computed[key];\r\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\r\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\r\n      warn(\r\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\r\n        vm\r\n      );\r\n    }\r\n    // create internal watcher for the computed property.\r\n    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);\r\n\r\n    // component-defined computed properties are already defined on the\r\n    // component prototype. We only need to define computed properties defined\r\n    // at instantiation here.\r\n    if (!(key in vm)) {\r\n      defineComputed(vm, key, userDef);\r\n    } else if (process.env.NODE_ENV !== 'production') {\r\n      if (key in vm.$data) {\r\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\r\n      } else if (vm.$options.props && key in vm.$options.props) {\r\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction defineComputed (target, key, userDef) {\r\n  if (typeof userDef === 'function') {\r\n    sharedPropertyDefinition.get = createComputedGetter(key);\r\n    sharedPropertyDefinition.set = noop;\r\n  } else {\r\n    sharedPropertyDefinition.get = userDef.get\r\n      ? userDef.cache !== false\r\n        ? createComputedGetter(key)\r\n        : userDef.get\r\n      : noop;\r\n    sharedPropertyDefinition.set = userDef.set\r\n      ? userDef.set\r\n      : noop;\r\n  }\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n      sharedPropertyDefinition.set === noop) {\r\n    sharedPropertyDefinition.set = function () {\r\n      warn(\r\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\r\n        this\r\n      );\r\n    };\r\n  }\r\n  Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\n\r\nfunction createComputedGetter (key) {\r\n  return function computedGetter () {\r\n    var watcher = this._computedWatchers && this._computedWatchers[key];\r\n    if (watcher) {\r\n      if (watcher.dirty) {\r\n        watcher.evaluate();\r\n      }\r\n      if (Dep.target) {\r\n        watcher.depend();\r\n      }\r\n      return watcher.value\r\n    }\r\n  }\r\n}\r\n\r\nfunction initMethods (vm, methods) {\r\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'methods');\r\n  var props = vm.$options.props;\r\n  for (var key in methods) {\r\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (methods[key] == null) {\r\n        warn(\r\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\r\n          \"Did you reference the function correctly?\",\r\n          vm\r\n        );\r\n      }\r\n      if (props && hasOwn(props, key)) {\r\n        warn(\r\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\r\n          vm\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initWatch (vm, watch) {\r\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'watch');\r\n  for (var key in watch) {\r\n    var handler = watch[key];\r\n    if (Array.isArray(handler)) {\r\n      for (var i = 0; i < handler.length; i++) {\r\n        createWatcher(vm, key, handler[i]);\r\n      }\r\n    } else {\r\n      createWatcher(vm, key, handler);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createWatcher (\r\n  vm,\r\n  keyOrFn,\r\n  handler,\r\n  options\r\n) {\r\n  if (isPlainObject(handler)) {\r\n    options = handler;\r\n    handler = handler.handler;\r\n  }\r\n  if (typeof handler === 'string') {\r\n    handler = vm[handler];\r\n  }\r\n  return vm.$watch(keyOrFn, handler, options)\r\n}\r\n\r\nfunction stateMixin (Vue) {\r\n  // flow somehow has problems with directly declared definition object\r\n  // when using Object.defineProperty, so we have to procedurally build up\r\n  // the object here.\r\n  var dataDef = {};\r\n  dataDef.get = function () { return this._data };\r\n  var propsDef = {};\r\n  propsDef.get = function () { return this._props };\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    dataDef.set = function (newData) {\r\n      warn(\r\n        'Avoid replacing instance root $data. ' +\r\n        'Use nested data properties instead.',\r\n        this\r\n      );\r\n    };\r\n    propsDef.set = function () {\r\n      warn(\"$props is readonly.\", this);\r\n    };\r\n  }\r\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\r\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\r\n\r\n  Vue.prototype.$set = set;\r\n  Vue.prototype.$delete = del;\r\n\r\n  Vue.prototype.$watch = function (\r\n    expOrFn,\r\n    cb,\r\n    options\r\n  ) {\r\n    var vm = this;\r\n    if (isPlainObject(cb)) {\r\n      return createWatcher(vm, expOrFn, cb, options)\r\n    }\r\n    options = options || {};\r\n    options.user = true;\r\n    var watcher = new Watcher(vm, expOrFn, cb, options);\r\n    if (options.immediate) {\r\n      cb.call(vm, watcher.value);\r\n    }\r\n    return function unwatchFn () {\r\n      watcher.teardown();\r\n    }\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nfunction initProvide (vm) {\r\n  var provide = vm.$options.provide;\r\n  if (provide) {\r\n    vm._provided = typeof provide === 'function'\r\n      ? provide.call(vm)\r\n      : provide;\r\n  }\r\n}\r\n\r\nfunction initInjections (vm) {\r\n  var result = resolveInject(vm.$options.inject, vm);\r\n  if (result) {\r\n    observerState.shouldConvert = false;\r\n    Object.keys(result).forEach(function (key) {\r\n      /* istanbul ignore else */\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        defineReactive$$1(vm, key, result[key], function () {\r\n          warn(\r\n            \"Avoid mutating an injected value directly since the changes will be \" +\r\n            \"overwritten whenever the provided component re-renders. \" +\r\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\r\n            vm\r\n          );\r\n        });\r\n      } else {\r\n        defineReactive$$1(vm, key, result[key]);\r\n      }\r\n    });\r\n    observerState.shouldConvert = true;\r\n  }\r\n}\r\n\r\nfunction resolveInject (inject, vm) {\r\n  if (inject) {\r\n    // inject is :any because flow is not smart enough to figure out cached\r\n    var result = Object.create(null);\r\n    var keys = hasSymbol\r\n        ? Reflect.ownKeys(inject)\r\n        : Object.keys(inject);\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i];\r\n      var provideKey = inject[key];\r\n      var source = vm;\r\n      while (source) {\r\n        if (source._provided && provideKey in source._provided) {\r\n          result[key] = source._provided[provideKey];\r\n          break\r\n        }\r\n        source = source.$parent;\r\n      }\r\n      if (process.env.NODE_ENV !== 'production' && !source) {\r\n        warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\r\n      }\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction createFunctionalComponent (\r\n  Ctor,\r\n  propsData,\r\n  data,\r\n  context,\r\n  children\r\n) {\r\n  var props = {};\r\n  var propOptions = Ctor.options.props;\r\n  if (isDef(propOptions)) {\r\n    for (var key in propOptions) {\r\n      props[key] = validateProp(key, propOptions, propsData || {});\r\n    }\r\n  } else {\r\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\r\n    if (isDef(data.props)) { mergeProps(props, data.props); }\r\n  }\r\n  // ensure the createElement function in functional components\r\n  // gets a unique context - this is necessary for correct named slot check\r\n  var _context = Object.create(context);\r\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\r\n  var vnode = Ctor.options.render.call(null, h, {\r\n    data: data,\r\n    props: props,\r\n    children: children,\r\n    parent: context,\r\n    listeners: data.on || {},\r\n    injections: resolveInject(Ctor.options.inject, context),\r\n    slots: function () { return resolveSlots(children, context); }\r\n  });\r\n  if (vnode instanceof VNode) {\r\n    vnode.functionalContext = context;\r\n    vnode.functionalOptions = Ctor.options;\r\n    if (data.slot) {\r\n      (vnode.data || (vnode.data = {})).slot = data.slot;\r\n    }\r\n  }\r\n  return vnode\r\n}\r\n\r\nfunction mergeProps (to, from) {\r\n  for (var key in from) {\r\n    to[camelize(key)] = from[key];\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n// hooks to be invoked on component VNodes during patch\r\nvar componentVNodeHooks = {\r\n  init: function init (\r\n    vnode,\r\n    hydrating,\r\n    parentElm,\r\n    refElm\r\n  ) {\r\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\r\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\r\n        vnode,\r\n        activeInstance,\r\n        parentElm,\r\n        refElm\r\n      );\r\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\r\n    } else if (vnode.data.keepAlive) {\r\n      // kept-alive components, treat as a patch\r\n      var mountedNode = vnode; // work around flow\r\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\r\n    }\r\n  },\r\n\r\n  prepatch: function prepatch (oldVnode, vnode) {\r\n    var options = vnode.componentOptions;\r\n    var child = vnode.componentInstance = oldVnode.componentInstance;\r\n    updateChildComponent(\r\n      child,\r\n      options.propsData, // updated props\r\n      options.listeners, // updated listeners\r\n      vnode, // new parent vnode\r\n      options.children // new children\r\n    );\r\n  },\r\n\r\n  insert: function insert (vnode) {\r\n    var context = vnode.context;\r\n    var componentInstance = vnode.componentInstance;\r\n    if (!componentInstance._isMounted) {\r\n      componentInstance._isMounted = true;\r\n      callHook(componentInstance, 'mounted');\r\n    }\r\n    if (vnode.data.keepAlive) {\r\n      if (context._isMounted) {\r\n        // vue-router#1212\r\n        // During updates, a kept-alive component's child components may\r\n        // change, so directly walking the tree here may call activated hooks\r\n        // on incorrect children. Instead we push them into a queue which will\r\n        // be processed after the whole patch process ended.\r\n        queueActivatedComponent(componentInstance);\r\n      } else {\r\n        activateChildComponent(componentInstance, true /* direct */);\r\n      }\r\n    }\r\n  },\r\n\r\n  destroy: function destroy (vnode) {\r\n    var componentInstance = vnode.componentInstance;\r\n    if (!componentInstance._isDestroyed) {\r\n      if (!vnode.data.keepAlive) {\r\n        componentInstance.$destroy();\r\n      } else {\r\n        deactivateChildComponent(componentInstance, true /* direct */);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar hooksToMerge = Object.keys(componentVNodeHooks);\r\n\r\nfunction createComponent (\r\n  Ctor,\r\n  data,\r\n  context,\r\n  children,\r\n  tag\r\n) {\r\n  if (isUndef(Ctor)) {\r\n    return\r\n  }\r\n\r\n  var baseCtor = context.$options._base;\r\n\r\n  // plain options object: turn it into a constructor\r\n  if (isObject(Ctor)) {\r\n    Ctor = baseCtor.extend(Ctor);\r\n  }\r\n\r\n  // if at this stage it's not a constructor or an async component factory,\r\n  // reject.\r\n  if (typeof Ctor !== 'function') {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\r\n    }\r\n    return\r\n  }\r\n\r\n  // async component\r\n  var asyncFactory;\r\n  if (isUndef(Ctor.cid)) {\r\n    asyncFactory = Ctor;\r\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\r\n    if (Ctor === undefined) {\r\n      // return a placeholder node for async component, which is rendered\r\n      // as a comment node but preserves all the raw information for the node.\r\n      // the information will be used for async server-rendering and hydration.\r\n      return createAsyncPlaceholder(\r\n        asyncFactory,\r\n        data,\r\n        context,\r\n        children,\r\n        tag\r\n      )\r\n    }\r\n  }\r\n\r\n  data = data || {};\r\n\r\n  // resolve constructor options in case global mixins are applied after\r\n  // component constructor creation\r\n  resolveConstructorOptions(Ctor);\r\n\r\n  // transform component v-model data into props & events\r\n  if (isDef(data.model)) {\r\n    transformModel(Ctor.options, data);\r\n  }\r\n\r\n  // extract props\r\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\r\n\r\n  // functional component\r\n  if (isTrue(Ctor.options.functional)) {\r\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\r\n  }\r\n\r\n  // extract listeners, since these needs to be treated as\r\n  // child component listeners instead of DOM listeners\r\n  var listeners = data.on;\r\n  // replace with listeners with .native modifier\r\n  // so it gets processed during parent component patch.\r\n  data.on = data.nativeOn;\r\n\r\n  if (isTrue(Ctor.options.abstract)) {\r\n    // abstract components do not keep anything\r\n    // other than props & listeners & slot\r\n\r\n    // work around flow\r\n    var slot = data.slot;\r\n    data = {};\r\n    if (slot) {\r\n      data.slot = slot;\r\n    }\r\n  }\r\n\r\n  // merge component management hooks onto the placeholder node\r\n  mergeHooks(data);\r\n\r\n  // return a placeholder vnode\r\n  var name = Ctor.options.name || tag;\r\n  var vnode = new VNode(\r\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\r\n    data, undefined, undefined, undefined, context,\r\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\r\n    asyncFactory\r\n  );\r\n  return vnode\r\n}\r\n\r\nfunction createComponentInstanceForVnode (\r\n  vnode, // we know it's MountedComponentVNode but flow doesn't\r\n  parent, // activeInstance in lifecycle state\r\n  parentElm,\r\n  refElm\r\n) {\r\n  var vnodeComponentOptions = vnode.componentOptions;\r\n  var options = {\r\n    _isComponent: true,\r\n    parent: parent,\r\n    propsData: vnodeComponentOptions.propsData,\r\n    _componentTag: vnodeComponentOptions.tag,\r\n    _parentVnode: vnode,\r\n    _parentListeners: vnodeComponentOptions.listeners,\r\n    _renderChildren: vnodeComponentOptions.children,\r\n    _parentElm: parentElm || null,\r\n    _refElm: refElm || null\r\n  };\r\n  // check inline-template render functions\r\n  var inlineTemplate = vnode.data.inlineTemplate;\r\n  if (isDef(inlineTemplate)) {\r\n    options.render = inlineTemplate.render;\r\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\r\n  }\r\n  return new vnodeComponentOptions.Ctor(options)\r\n}\r\n\r\nfunction mergeHooks (data) {\r\n  if (!data.hook) {\r\n    data.hook = {};\r\n  }\r\n  for (var i = 0; i < hooksToMerge.length; i++) {\r\n    var key = hooksToMerge[i];\r\n    var fromParent = data.hook[key];\r\n    var ours = componentVNodeHooks[key];\r\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\r\n  }\r\n}\r\n\r\nfunction mergeHook$1 (one, two) {\r\n  return function (a, b, c, d) {\r\n    one(a, b, c, d);\r\n    two(a, b, c, d);\r\n  }\r\n}\r\n\r\n// transform component v-model info (value and callback) into\r\n// prop and event handler respectively.\r\nfunction transformModel (options, data) {\r\n  var prop = (options.model && options.model.prop) || 'value';\r\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\r\n  var on = data.on || (data.on = {});\r\n  if (isDef(on[event])) {\r\n    on[event] = [data.model.callback].concat(on[event]);\r\n  } else {\r\n    on[event] = data.model.callback;\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar SIMPLE_NORMALIZE = 1;\r\nvar ALWAYS_NORMALIZE = 2;\r\n\r\n// wrapper function for providing a more flexible interface\r\n// without getting yelled at by flow\r\nfunction createElement (\r\n  context,\r\n  tag,\r\n  data,\r\n  children,\r\n  normalizationType,\r\n  alwaysNormalize\r\n) {\r\n  if (Array.isArray(data) || isPrimitive(data)) {\r\n    normalizationType = children;\r\n    children = data;\r\n    data = undefined;\r\n  }\r\n  if (isTrue(alwaysNormalize)) {\r\n    normalizationType = ALWAYS_NORMALIZE;\r\n  }\r\n  return _createElement(context, tag, data, children, normalizationType)\r\n}\r\n\r\nfunction _createElement (\r\n  context,\r\n  tag,\r\n  data,\r\n  children,\r\n  normalizationType\r\n) {\r\n  if (isDef(data) && isDef((data).__ob__)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\r\n      'Always create fresh vnode data objects in each render!',\r\n      context\r\n    );\r\n    return createEmptyVNode()\r\n  }\r\n  // object syntax in v-bind\r\n  if (isDef(data) && isDef(data.is)) {\r\n    tag = data.is;\r\n  }\r\n  if (!tag) {\r\n    // in case of component :is set to falsy value\r\n    return createEmptyVNode()\r\n  }\r\n  // warn against non-primitive key\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\r\n  ) {\r\n    warn(\r\n      'Avoid using non-primitive value as key, ' +\r\n      'use string/number value instead.',\r\n      context\r\n    );\r\n  }\r\n  // support single function children as default scoped slot\r\n  if (Array.isArray(children) &&\r\n    typeof children[0] === 'function'\r\n  ) {\r\n    data = data || {};\r\n    data.scopedSlots = { default: children[0] };\r\n    children.length = 0;\r\n  }\r\n  if (normalizationType === ALWAYS_NORMALIZE) {\r\n    children = normalizeChildren(children);\r\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\r\n    children = simpleNormalizeChildren(children);\r\n  }\r\n  var vnode, ns;\r\n  if (typeof tag === 'string') {\r\n    var Ctor;\r\n    ns = config.getTagNamespace(tag);\r\n    if (config.isReservedTag(tag)) {\r\n      // platform built-in elements\r\n      vnode = new VNode(\r\n        config.parsePlatformTagName(tag), data, children,\r\n        undefined, undefined, context\r\n      );\r\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\r\n      // component\r\n      vnode = createComponent(Ctor, data, context, children, tag);\r\n    } else {\r\n      // unknown or unlisted namespaced elements\r\n      // check at runtime because it may get assigned a namespace when its\r\n      // parent normalizes children\r\n      vnode = new VNode(\r\n        tag, data, children,\r\n        undefined, undefined, context\r\n      );\r\n    }\r\n  } else {\r\n    // direct component options / constructor\r\n    vnode = createComponent(tag, data, context, children);\r\n  }\r\n  if (isDef(vnode)) {\r\n    if (ns) { applyNS(vnode, ns); }\r\n    return vnode\r\n  } else {\r\n    return createEmptyVNode()\r\n  }\r\n}\r\n\r\nfunction applyNS (vnode, ns) {\r\n  vnode.ns = ns;\r\n  if (vnode.tag === 'foreignObject') {\r\n    // use default namespace inside foreignObject\r\n    return\r\n  }\r\n  if (isDef(vnode.children)) {\r\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\r\n      var child = vnode.children[i];\r\n      if (isDef(child.tag) && isUndef(child.ns)) {\r\n        applyNS(child, ns);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for rendering v-for lists.\r\n */\r\nfunction renderList (\r\n  val,\r\n  render\r\n) {\r\n  var ret, i, l, keys, key;\r\n  if (Array.isArray(val) || typeof val === 'string') {\r\n    ret = new Array(val.length);\r\n    for (i = 0, l = val.length; i < l; i++) {\r\n      ret[i] = render(val[i], i);\r\n    }\r\n  } else if (typeof val === 'number') {\r\n    ret = new Array(val);\r\n    for (i = 0; i < val; i++) {\r\n      ret[i] = render(i + 1, i);\r\n    }\r\n  } else if (isObject(val)) {\r\n    keys = Object.keys(val);\r\n    ret = new Array(keys.length);\r\n    for (i = 0, l = keys.length; i < l; i++) {\r\n      key = keys[i];\r\n      ret[i] = render(val[key], key, i);\r\n    }\r\n  }\r\n  if (isDef(ret)) {\r\n    (ret)._isVList = true;\r\n  }\r\n  return ret\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for rendering <slot>\r\n */\r\nfunction renderSlot (\r\n  name,\r\n  fallback,\r\n  props,\r\n  bindObject\r\n) {\r\n  var scopedSlotFn = this.$scopedSlots[name];\r\n  if (scopedSlotFn) { // scoped slot\r\n    props = props || {};\r\n    if (bindObject) {\r\n      props = extend(extend({}, bindObject), props);\r\n    }\r\n    return scopedSlotFn(props) || fallback\r\n  } else {\r\n    var slotNodes = this.$slots[name];\r\n    // warn duplicate slot usage\r\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\r\n      slotNodes._rendered && warn(\r\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\r\n        \"- this will likely cause render errors.\",\r\n        this\r\n      );\r\n      slotNodes._rendered = true;\r\n    }\r\n    return slotNodes || fallback\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for resolving filters\r\n */\r\nfunction resolveFilter (id) {\r\n  return resolveAsset(this.$options, 'filters', id, true) || identity\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for checking keyCodes from config.\r\n */\r\nfunction checkKeyCodes (\r\n  eventKeyCode,\r\n  key,\r\n  builtInAlias\r\n) {\r\n  var keyCodes = config.keyCodes[key] || builtInAlias;\r\n  if (Array.isArray(keyCodes)) {\r\n    return keyCodes.indexOf(eventKeyCode) === -1\r\n  } else {\r\n    return keyCodes !== eventKeyCode\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\r\n */\r\nfunction bindObjectProps (\r\n  data,\r\n  tag,\r\n  value,\r\n  asProp,\r\n  isSync\r\n) {\r\n  if (value) {\r\n    if (!isObject(value)) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'v-bind without argument expects an Object or Array value',\r\n        this\r\n      );\r\n    } else {\r\n      if (Array.isArray(value)) {\r\n        value = toObject(value);\r\n      }\r\n      var hash;\r\n      var loop = function ( key ) {\r\n        if (\r\n          key === 'class' ||\r\n          key === 'style' ||\r\n          isReservedAttribute(key)\r\n        ) {\r\n          hash = data;\r\n        } else {\r\n          var type = data.attrs && data.attrs.type;\r\n          hash = asProp || config.mustUseProp(tag, type, key)\r\n            ? data.domProps || (data.domProps = {})\r\n            : data.attrs || (data.attrs = {});\r\n        }\r\n        if (!(key in hash)) {\r\n          hash[key] = value[key];\r\n\r\n          if (isSync) {\r\n            var on = data.on || (data.on = {});\r\n            on[(\"update:\" + key)] = function ($event) {\r\n              value[key] = $event;\r\n            };\r\n          }\r\n        }\r\n      };\r\n\r\n      for (var key in value) loop( key );\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for rendering static trees.\r\n */\r\nfunction renderStatic (\r\n  index,\r\n  isInFor\r\n) {\r\n  var tree = this._staticTrees[index];\r\n  // if has already-rendered static tree and not inside v-for,\r\n  // we can reuse the same tree by doing a shallow clone.\r\n  if (tree && !isInFor) {\r\n    return Array.isArray(tree)\r\n      ? cloneVNodes(tree)\r\n      : cloneVNode(tree)\r\n  }\r\n  // otherwise, render a fresh tree.\r\n  tree = this._staticTrees[index] =\r\n    this.$options.staticRenderFns[index].call(this._renderProxy);\r\n  markStatic(tree, (\"__static__\" + index), false);\r\n  return tree\r\n}\r\n\r\n/**\r\n * Runtime helper for v-once.\r\n * Effectively it means marking the node as static with a unique key.\r\n */\r\nfunction markOnce (\r\n  tree,\r\n  index,\r\n  key\r\n) {\r\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\r\n  return tree\r\n}\r\n\r\nfunction markStatic (\r\n  tree,\r\n  key,\r\n  isOnce\r\n) {\r\n  if (Array.isArray(tree)) {\r\n    for (var i = 0; i < tree.length; i++) {\r\n      if (tree[i] && typeof tree[i] !== 'string') {\r\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\r\n      }\r\n    }\r\n  } else {\r\n    markStaticNode(tree, key, isOnce);\r\n  }\r\n}\r\n\r\nfunction markStaticNode (node, key, isOnce) {\r\n  node.isStatic = true;\r\n  node.key = key;\r\n  node.isOnce = isOnce;\r\n}\r\n\r\n/*  */\r\n\r\nfunction bindObjectListeners (data, value) {\r\n  if (value) {\r\n    if (!isPlainObject(value)) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'v-on without argument expects an Object value',\r\n        this\r\n      );\r\n    } else {\r\n      var on = data.on = data.on ? extend({}, data.on) : {};\r\n      for (var key in value) {\r\n        var existing = on[key];\r\n        var ours = value[key];\r\n        on[key] = existing ? [].concat(ours, existing) : ours;\r\n      }\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\n/*  */\r\n\r\nfunction initRender (vm) {\r\n  vm._vnode = null; // the root of the child tree\r\n  vm._staticTrees = null;\r\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\r\n  var renderContext = parentVnode && parentVnode.context;\r\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\r\n  vm.$scopedSlots = emptyObject;\r\n  // bind the createElement fn to this instance\r\n  // so that we get proper render context inside it.\r\n  // args order: tag, data, children, normalizationType, alwaysNormalize\r\n  // internal version is used by render functions compiled from templates\r\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\r\n  // normalization is always applied for the public version, used in\r\n  // user-written render functions.\r\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\r\n\r\n  // $attrs & $listeners are exposed for easier HOC creation.\r\n  // they need to be reactive so that HOCs using them are always updated\r\n  var parentData = parentVnode && parentVnode.data;\r\n  /* istanbul ignore else */\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, function () {\r\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\r\n    }, true);\r\n    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, function () {\r\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\r\n    }, true);\r\n  } else {\r\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, null, true);\r\n    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, null, true);\r\n  }\r\n}\r\n\r\nfunction renderMixin (Vue) {\r\n  Vue.prototype.$nextTick = function (fn) {\r\n    return nextTick(fn, this)\r\n  };\r\n\r\n  Vue.prototype._render = function () {\r\n    var vm = this;\r\n    var ref = vm.$options;\r\n    var render = ref.render;\r\n    var staticRenderFns = ref.staticRenderFns;\r\n    var _parentVnode = ref._parentVnode;\r\n\r\n    if (vm._isMounted) {\r\n      // clone slot nodes on re-renders\r\n      for (var key in vm.$slots) {\r\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\r\n      }\r\n    }\r\n\r\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\r\n\r\n    if (staticRenderFns && !vm._staticTrees) {\r\n      vm._staticTrees = [];\r\n    }\r\n    // set parent vnode. this allows render functions to have access\r\n    // to the data on the placeholder node.\r\n    vm.$vnode = _parentVnode;\r\n    // render self\r\n    var vnode;\r\n    try {\r\n      vnode = render.call(vm._renderProxy, vm.$createElement);\r\n    } catch (e) {\r\n      handleError(e, vm, \"render function\");\r\n      // return error render result,\r\n      // or previous vnode to prevent render error causing blank component\r\n      /* istanbul ignore else */\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        vnode = vm.$options.renderError\r\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\r\n          : vm._vnode;\r\n      } else {\r\n        vnode = vm._vnode;\r\n      }\r\n    }\r\n    // return empty vnode in case the render function errored out\r\n    if (!(vnode instanceof VNode)) {\r\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\r\n        warn(\r\n          'Multiple root nodes returned from render function. Render function ' +\r\n          'should return a single root node.',\r\n          vm\r\n        );\r\n      }\r\n      vnode = createEmptyVNode();\r\n    }\r\n    // set parent\r\n    vnode.parent = _parentVnode;\r\n    return vnode\r\n  };\r\n\r\n  // internal render helpers.\r\n  // these are exposed on the instance prototype to reduce generated render\r\n  // code size.\r\n  Vue.prototype._o = markOnce;\r\n  Vue.prototype._n = toNumber;\r\n  Vue.prototype._s = toString;\r\n  Vue.prototype._l = renderList;\r\n  Vue.prototype._t = renderSlot;\r\n  Vue.prototype._q = looseEqual;\r\n  Vue.prototype._i = looseIndexOf;\r\n  Vue.prototype._m = renderStatic;\r\n  Vue.prototype._f = resolveFilter;\r\n  Vue.prototype._k = checkKeyCodes;\r\n  Vue.prototype._b = bindObjectProps;\r\n  Vue.prototype._v = createTextVNode;\r\n  Vue.prototype._e = createEmptyVNode;\r\n  Vue.prototype._u = resolveScopedSlots;\r\n  Vue.prototype._g = bindObjectListeners;\r\n}\r\n\r\n/*  */\r\n\r\nvar uid$1 = 0;\r\n\r\nfunction initMixin (Vue) {\r\n  Vue.prototype._init = function (options) {\r\n    var vm = this;\r\n    // a uid\r\n    vm._uid = uid$1++;\r\n\r\n    var startTag, endTag;\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n      startTag = \"vue-perf-init:\" + (vm._uid);\r\n      endTag = \"vue-perf-end:\" + (vm._uid);\r\n      mark(startTag);\r\n    }\r\n\r\n    // a flag to avoid this being observed\r\n    vm._isVue = true;\r\n    // merge options\r\n    if (options && options._isComponent) {\r\n      // optimize internal component instantiation\r\n      // since dynamic options merging is pretty slow, and none of the\r\n      // internal component options needs special treatment.\r\n      initInternalComponent(vm, options);\r\n    } else {\r\n      vm.$options = mergeOptions(\r\n        resolveConstructorOptions(vm.constructor),\r\n        options || {},\r\n        vm\r\n      );\r\n    }\r\n    /* istanbul ignore else */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      initProxy(vm);\r\n    } else {\r\n      vm._renderProxy = vm;\r\n    }\r\n    // expose real self\r\n    vm._self = vm;\r\n    initLifecycle(vm);\r\n    initEvents(vm);\r\n    initRender(vm);\r\n    callHook(vm, 'beforeCreate');\r\n    initInjections(vm); // resolve injections before data/props\r\n    initState(vm);\r\n    initProvide(vm); // resolve provide after data/props\r\n    callHook(vm, 'created');\r\n\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n      vm._name = formatComponentName(vm, false);\r\n      mark(endTag);\r\n      measure(((vm._name) + \" init\"), startTag, endTag);\r\n    }\r\n\r\n    if (vm.$options.el) {\r\n      vm.$mount(vm.$options.el);\r\n    }\r\n  };\r\n}\r\n\r\nfunction initInternalComponent (vm, options) {\r\n  var opts = vm.$options = Object.create(vm.constructor.options);\r\n  // doing this because it's faster than dynamic enumeration.\r\n  opts.parent = options.parent;\r\n  opts.propsData = options.propsData;\r\n  opts._parentVnode = options._parentVnode;\r\n  opts._parentListeners = options._parentListeners;\r\n  opts._renderChildren = options._renderChildren;\r\n  opts._componentTag = options._componentTag;\r\n  opts._parentElm = options._parentElm;\r\n  opts._refElm = options._refElm;\r\n  if (options.render) {\r\n    opts.render = options.render;\r\n    opts.staticRenderFns = options.staticRenderFns;\r\n  }\r\n}\r\n\r\nfunction resolveConstructorOptions (Ctor) {\r\n  var options = Ctor.options;\r\n  if (Ctor.super) {\r\n    var superOptions = resolveConstructorOptions(Ctor.super);\r\n    var cachedSuperOptions = Ctor.superOptions;\r\n    if (superOptions !== cachedSuperOptions) {\r\n      // super option changed,\r\n      // need to resolve new options.\r\n      Ctor.superOptions = superOptions;\r\n      // check if there are any late-modified/attached options (#4976)\r\n      var modifiedOptions = resolveModifiedOptions(Ctor);\r\n      // update base extend options\r\n      if (modifiedOptions) {\r\n        extend(Ctor.extendOptions, modifiedOptions);\r\n      }\r\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\r\n      if (options.name) {\r\n        options.components[options.name] = Ctor;\r\n      }\r\n    }\r\n  }\r\n  return options\r\n}\r\n\r\nfunction resolveModifiedOptions (Ctor) {\r\n  var modified;\r\n  var latest = Ctor.options;\r\n  var extended = Ctor.extendOptions;\r\n  var sealed = Ctor.sealedOptions;\r\n  for (var key in latest) {\r\n    if (latest[key] !== sealed[key]) {\r\n      if (!modified) { modified = {}; }\r\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\r\n    }\r\n  }\r\n  return modified\r\n}\r\n\r\nfunction dedupe (latest, extended, sealed) {\r\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\r\n  // between merges\r\n  if (Array.isArray(latest)) {\r\n    var res = [];\r\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\r\n    extended = Array.isArray(extended) ? extended : [extended];\r\n    for (var i = 0; i < latest.length; i++) {\r\n      // push original options and not sealed options to exclude duplicated options\r\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\r\n        res.push(latest[i]);\r\n      }\r\n    }\r\n    return res\r\n  } else {\r\n    return latest\r\n  }\r\n}\r\n\r\nfunction Vue$3 (options) {\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n    !(this instanceof Vue$3)\r\n  ) {\r\n    warn('Vue is a constructor and should be called with the `new` keyword');\r\n  }\r\n  this._init(options);\r\n}\r\n\r\ninitMixin(Vue$3);\r\nstateMixin(Vue$3);\r\neventsMixin(Vue$3);\r\nlifecycleMixin(Vue$3);\r\nrenderMixin(Vue$3);\r\n\r\n/*  */\r\n\r\nfunction initUse (Vue) {\r\n  Vue.use = function (plugin) {\r\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\r\n    if (installedPlugins.indexOf(plugin) > -1) {\r\n      return this\r\n    }\r\n\r\n    // additional parameters\r\n    var args = toArray(arguments, 1);\r\n    args.unshift(this);\r\n    if (typeof plugin.install === 'function') {\r\n      plugin.install.apply(plugin, args);\r\n    } else if (typeof plugin === 'function') {\r\n      plugin.apply(null, args);\r\n    }\r\n    installedPlugins.push(plugin);\r\n    return this\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nfunction initMixin$1 (Vue) {\r\n  Vue.mixin = function (mixin) {\r\n    this.options = mergeOptions(this.options, mixin);\r\n    return this\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nfunction initExtend (Vue) {\r\n  /**\r\n   * Each instance constructor, including Vue, has a unique\r\n   * cid. This enables us to create wrapped \"child\r\n   * constructors\" for prototypal inheritance and cache them.\r\n   */\r\n  Vue.cid = 0;\r\n  var cid = 1;\r\n\r\n  /**\r\n   * Class inheritance\r\n   */\r\n  Vue.extend = function (extendOptions) {\r\n    extendOptions = extendOptions || {};\r\n    var Super = this;\r\n    var SuperId = Super.cid;\r\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\r\n    if (cachedCtors[SuperId]) {\r\n      return cachedCtors[SuperId]\r\n    }\r\n\r\n    var name = extendOptions.name || Super.options.name;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\r\n        warn(\r\n          'Invalid component name: \"' + name + '\". Component names ' +\r\n          'can only contain alphanumeric characters and the hyphen, ' +\r\n          'and must start with a letter.'\r\n        );\r\n      }\r\n    }\r\n\r\n    var Sub = function VueComponent (options) {\r\n      this._init(options);\r\n    };\r\n    Sub.prototype = Object.create(Super.prototype);\r\n    Sub.prototype.constructor = Sub;\r\n    Sub.cid = cid++;\r\n    Sub.options = mergeOptions(\r\n      Super.options,\r\n      extendOptions\r\n    );\r\n    Sub['super'] = Super;\r\n\r\n    // For props and computed properties, we define the proxy getters on\r\n    // the Vue instances at extension time, on the extended prototype. This\r\n    // avoids Object.defineProperty calls for each instance created.\r\n    if (Sub.options.props) {\r\n      initProps$1(Sub);\r\n    }\r\n    if (Sub.options.computed) {\r\n      initComputed$1(Sub);\r\n    }\r\n\r\n    // allow further extension/mixin/plugin usage\r\n    Sub.extend = Super.extend;\r\n    Sub.mixin = Super.mixin;\r\n    Sub.use = Super.use;\r\n\r\n    // create asset registers, so extended classes\r\n    // can have their private assets too.\r\n    ASSET_TYPES.forEach(function (type) {\r\n      Sub[type] = Super[type];\r\n    });\r\n    // enable recursive self-lookup\r\n    if (name) {\r\n      Sub.options.components[name] = Sub;\r\n    }\r\n\r\n    // keep a reference to the super options at extension time.\r\n    // later at instantiation we can check if Super's options have\r\n    // been updated.\r\n    Sub.superOptions = Super.options;\r\n    Sub.extendOptions = extendOptions;\r\n    Sub.sealedOptions = extend({}, Sub.options);\r\n\r\n    // cache constructor\r\n    cachedCtors[SuperId] = Sub;\r\n    return Sub\r\n  };\r\n}\r\n\r\nfunction initProps$1 (Comp) {\r\n  var props = Comp.options.props;\r\n  for (var key in props) {\r\n    proxy(Comp.prototype, \"_props\", key);\r\n  }\r\n}\r\n\r\nfunction initComputed$1 (Comp) {\r\n  var computed = Comp.options.computed;\r\n  for (var key in computed) {\r\n    defineComputed(Comp.prototype, key, computed[key]);\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction initAssetRegisters (Vue) {\r\n  /**\r\n   * Create asset registration methods.\r\n   */\r\n  ASSET_TYPES.forEach(function (type) {\r\n    Vue[type] = function (\r\n      id,\r\n      definition\r\n    ) {\r\n      if (!definition) {\r\n        return this.options[type + 's'][id]\r\n      } else {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (type === 'component' && config.isReservedTag(id)) {\r\n            warn(\r\n              'Do not use built-in or reserved HTML elements as component ' +\r\n              'id: ' + id\r\n            );\r\n          }\r\n        }\r\n        if (type === 'component' && isPlainObject(definition)) {\r\n          definition.name = definition.name || id;\r\n          definition = this.options._base.extend(definition);\r\n        }\r\n        if (type === 'directive' && typeof definition === 'function') {\r\n          definition = { bind: definition, update: definition };\r\n        }\r\n        this.options[type + 's'][id] = definition;\r\n        return definition\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/*  */\r\n\r\nvar patternTypes = [String, RegExp, Array];\r\n\r\nfunction getComponentName (opts) {\r\n  return opts && (opts.Ctor.options.name || opts.tag)\r\n}\r\n\r\nfunction matches (pattern, name) {\r\n  if (Array.isArray(pattern)) {\r\n    return pattern.indexOf(name) > -1\r\n  } else if (typeof pattern === 'string') {\r\n    return pattern.split(',').indexOf(name) > -1\r\n  } else if (isRegExp(pattern)) {\r\n    return pattern.test(name)\r\n  }\r\n  /* istanbul ignore next */\r\n  return false\r\n}\r\n\r\nfunction pruneCache (cache, current, filter) {\r\n  for (var key in cache) {\r\n    var cachedNode = cache[key];\r\n    if (cachedNode) {\r\n      var name = getComponentName(cachedNode.componentOptions);\r\n      if (name && !filter(name)) {\r\n        if (cachedNode !== current) {\r\n          pruneCacheEntry(cachedNode);\r\n        }\r\n        cache[key] = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction pruneCacheEntry (vnode) {\r\n  if (vnode) {\r\n    vnode.componentInstance.$destroy();\r\n  }\r\n}\r\n\r\nvar KeepAlive = {\r\n  name: 'keep-alive',\r\n  abstract: true,\r\n\r\n  props: {\r\n    include: patternTypes,\r\n    exclude: patternTypes\r\n  },\r\n\r\n  created: function created () {\r\n    this.cache = Object.create(null);\r\n  },\r\n\r\n  destroyed: function destroyed () {\r\n    var this$1 = this;\r\n\r\n    for (var key in this$1.cache) {\r\n      pruneCacheEntry(this$1.cache[key]);\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    include: function include (val) {\r\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\r\n    },\r\n    exclude: function exclude (val) {\r\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\r\n    }\r\n  },\r\n\r\n  render: function render () {\r\n    var vnode = getFirstComponentChild(this.$slots.default);\r\n    var componentOptions = vnode && vnode.componentOptions;\r\n    if (componentOptions) {\r\n      // check pattern\r\n      var name = getComponentName(componentOptions);\r\n      if (name && (\r\n        (this.include && !matches(this.include, name)) ||\r\n        (this.exclude && matches(this.exclude, name))\r\n      )) {\r\n        return vnode\r\n      }\r\n      var key = vnode.key == null\r\n        // same constructor may get registered as different local components\r\n        // so cid alone is not enough (#3269)\r\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\r\n        : vnode.key;\r\n      if (this.cache[key]) {\r\n        vnode.componentInstance = this.cache[key].componentInstance;\r\n      } else {\r\n        this.cache[key] = vnode;\r\n      }\r\n      vnode.data.keepAlive = true;\r\n    }\r\n    return vnode\r\n  }\r\n};\r\n\r\nvar builtInComponents = {\r\n  KeepAlive: KeepAlive\r\n};\r\n\r\n/*  */\r\n\r\nfunction initGlobalAPI (Vue) {\r\n  // config\r\n  var configDef = {};\r\n  configDef.get = function () { return config; };\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    configDef.set = function () {\r\n      warn(\r\n        'Do not replace the Vue.config object, set individual fields instead.'\r\n      );\r\n    };\r\n  }\r\n  Object.defineProperty(Vue, 'config', configDef);\r\n\r\n  // exposed util methods.\r\n  // NOTE: these are not considered part of the public API - avoid relying on\r\n  // them unless you are aware of the risk.\r\n  Vue.util = {\r\n    warn: warn,\r\n    extend: extend,\r\n    mergeOptions: mergeOptions,\r\n    defineReactive: defineReactive$$1\r\n  };\r\n\r\n  Vue.set = set;\r\n  Vue.delete = del;\r\n  Vue.nextTick = nextTick;\r\n\r\n  Vue.options = Object.create(null);\r\n  ASSET_TYPES.forEach(function (type) {\r\n    Vue.options[type + 's'] = Object.create(null);\r\n  });\r\n\r\n  // this is used to identify the \"base\" constructor to extend all plain-object\r\n  // components with in Weex's multi-instance scenarios.\r\n  Vue.options._base = Vue;\r\n\r\n  extend(Vue.options.components, builtInComponents);\r\n\r\n  initUse(Vue);\r\n  initMixin$1(Vue);\r\n  initExtend(Vue);\r\n  initAssetRegisters(Vue);\r\n}\r\n\r\ninitGlobalAPI(Vue$3);\r\n\r\nObject.defineProperty(Vue$3.prototype, '$isServer', {\r\n  get: isServerRendering\r\n});\r\n\r\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\r\n  get: function get () {\r\n    /* istanbul ignore next */\r\n    return this.$vnode && this.$vnode.ssrContext\r\n  }\r\n});\r\n\r\nVue$3.version = '2.4.2';\r\n\r\n/*  */\r\n\r\n// these are reserved for web because they are directly compiled away\r\n// during template compilation\r\nvar isReservedAttr = makeMap('style,class');\r\n\r\n// attributes that should be using props for binding\r\nvar acceptValue = makeMap('input,textarea,option,select');\r\nvar mustUseProp = function (tag, type, attr) {\r\n  return (\r\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\r\n    (attr === 'selected' && tag === 'option') ||\r\n    (attr === 'checked' && tag === 'input') ||\r\n    (attr === 'muted' && tag === 'video')\r\n  )\r\n};\r\n\r\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\r\n\r\nvar isBooleanAttr = makeMap(\r\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\r\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\r\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\r\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\r\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\r\n  'truespeed,typemustmatch,visible'\r\n);\r\n\r\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\r\n\r\nvar isXlink = function (name) {\r\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\r\n};\r\n\r\nvar getXlinkProp = function (name) {\r\n  return isXlink(name) ? name.slice(6, name.length) : ''\r\n};\r\n\r\nvar isFalsyAttrValue = function (val) {\r\n  return val == null || val === false\r\n};\r\n\r\n/*  */\r\n\r\nfunction genClassForVnode (vnode) {\r\n  var data = vnode.data;\r\n  var parentNode = vnode;\r\n  var childNode = vnode;\r\n  while (isDef(childNode.componentInstance)) {\r\n    childNode = childNode.componentInstance._vnode;\r\n    if (childNode.data) {\r\n      data = mergeClassData(childNode.data, data);\r\n    }\r\n  }\r\n  while (isDef(parentNode = parentNode.parent)) {\r\n    if (parentNode.data) {\r\n      data = mergeClassData(data, parentNode.data);\r\n    }\r\n  }\r\n  return renderClass(data.staticClass, data.class)\r\n}\r\n\r\nfunction mergeClassData (child, parent) {\r\n  return {\r\n    staticClass: concat(child.staticClass, parent.staticClass),\r\n    class: isDef(child.class)\r\n      ? [child.class, parent.class]\r\n      : parent.class\r\n  }\r\n}\r\n\r\nfunction renderClass (\r\n  staticClass,\r\n  dynamicClass\r\n) {\r\n  if (isDef(staticClass) || isDef(dynamicClass)) {\r\n    return concat(staticClass, stringifyClass(dynamicClass))\r\n  }\r\n  /* istanbul ignore next */\r\n  return ''\r\n}\r\n\r\nfunction concat (a, b) {\r\n  return a ? b ? (a + ' ' + b) : a : (b || '')\r\n}\r\n\r\nfunction stringifyClass (value) {\r\n  if (Array.isArray(value)) {\r\n    return stringifyArray(value)\r\n  }\r\n  if (isObject(value)) {\r\n    return stringifyObject(value)\r\n  }\r\n  if (typeof value === 'string') {\r\n    return value\r\n  }\r\n  /* istanbul ignore next */\r\n  return ''\r\n}\r\n\r\nfunction stringifyArray (value) {\r\n  var res = '';\r\n  var stringified;\r\n  for (var i = 0, l = value.length; i < l; i++) {\r\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\r\n      if (res) { res += ' '; }\r\n      res += stringified;\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction stringifyObject (value) {\r\n  var res = '';\r\n  for (var key in value) {\r\n    if (value[key]) {\r\n      if (res) { res += ' '; }\r\n      res += key;\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar namespaceMap = {\r\n  svg: 'http://www.w3.org/2000/svg',\r\n  math: 'http://www.w3.org/1998/Math/MathML'\r\n};\r\n\r\nvar isHTMLTag = makeMap(\r\n  'html,body,base,head,link,meta,style,title,' +\r\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\r\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\r\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\r\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\r\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\r\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\r\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\r\n  'output,progress,select,textarea,' +\r\n  'details,dialog,menu,menuitem,summary,' +\r\n  'content,element,shadow,template,blockquote,iframe,tfoot'\r\n);\r\n\r\n// this map is intentionally selective, only covering SVG elements that may\r\n// contain child elements.\r\nvar isSVG = makeMap(\r\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\r\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\r\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\r\n  true\r\n);\r\n\r\nvar isPreTag = function (tag) { return tag === 'pre'; };\r\n\r\nvar isReservedTag = function (tag) {\r\n  return isHTMLTag(tag) || isSVG(tag)\r\n};\r\n\r\nfunction getTagNamespace (tag) {\r\n  if (isSVG(tag)) {\r\n    return 'svg'\r\n  }\r\n  // basic support for MathML\r\n  // note it doesn't support other MathML elements being component roots\r\n  if (tag === 'math') {\r\n    return 'math'\r\n  }\r\n}\r\n\r\nvar unknownElementCache = Object.create(null);\r\nfunction isUnknownElement (tag) {\r\n  /* istanbul ignore if */\r\n  if (!inBrowser) {\r\n    return true\r\n  }\r\n  if (isReservedTag(tag)) {\r\n    return false\r\n  }\r\n  tag = tag.toLowerCase();\r\n  /* istanbul ignore if */\r\n  if (unknownElementCache[tag] != null) {\r\n    return unknownElementCache[tag]\r\n  }\r\n  var el = document.createElement(tag);\r\n  if (tag.indexOf('-') > -1) {\r\n    // http://stackoverflow.com/a/28210364/1070244\r\n    return (unknownElementCache[tag] = (\r\n      el.constructor === window.HTMLUnknownElement ||\r\n      el.constructor === window.HTMLElement\r\n    ))\r\n  } else {\r\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Query an element selector if it's not an element already.\r\n */\r\nfunction query (el) {\r\n  if (typeof el === 'string') {\r\n    var selected = document.querySelector(el);\r\n    if (!selected) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'Cannot find element: ' + el\r\n      );\r\n      return document.createElement('div')\r\n    }\r\n    return selected\r\n  } else {\r\n    return el\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction createElement$1 (tagName, vnode) {\r\n  var elm = document.createElement(tagName);\r\n  if (tagName !== 'select') {\r\n    return elm\r\n  }\r\n  // false or null will remove the attribute but undefined will not\r\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\r\n    elm.setAttribute('multiple', 'multiple');\r\n  }\r\n  return elm\r\n}\r\n\r\nfunction createElementNS (namespace, tagName) {\r\n  return document.createElementNS(namespaceMap[namespace], tagName)\r\n}\r\n\r\nfunction createTextNode (text) {\r\n  return document.createTextNode(text)\r\n}\r\n\r\nfunction createComment (text) {\r\n  return document.createComment(text)\r\n}\r\n\r\nfunction insertBefore (parentNode, newNode, referenceNode) {\r\n  parentNode.insertBefore(newNode, referenceNode);\r\n}\r\n\r\nfunction removeChild (node, child) {\r\n  node.removeChild(child);\r\n}\r\n\r\nfunction appendChild (node, child) {\r\n  node.appendChild(child);\r\n}\r\n\r\nfunction parentNode (node) {\r\n  return node.parentNode\r\n}\r\n\r\nfunction nextSibling (node) {\r\n  return node.nextSibling\r\n}\r\n\r\nfunction tagName (node) {\r\n  return node.tagName\r\n}\r\n\r\nfunction setTextContent (node, text) {\r\n  node.textContent = text;\r\n}\r\n\r\nfunction setAttribute (node, key, val) {\r\n  node.setAttribute(key, val);\r\n}\r\n\r\n\r\nvar nodeOps = Object.freeze({\r\n\tcreateElement: createElement$1,\r\n\tcreateElementNS: createElementNS,\r\n\tcreateTextNode: createTextNode,\r\n\tcreateComment: createComment,\r\n\tinsertBefore: insertBefore,\r\n\tremoveChild: removeChild,\r\n\tappendChild: appendChild,\r\n\tparentNode: parentNode,\r\n\tnextSibling: nextSibling,\r\n\ttagName: tagName,\r\n\tsetTextContent: setTextContent,\r\n\tsetAttribute: setAttribute\r\n});\r\n\r\n/*  */\r\n\r\nvar ref = {\r\n  create: function create (_, vnode) {\r\n    registerRef(vnode);\r\n  },\r\n  update: function update (oldVnode, vnode) {\r\n    if (oldVnode.data.ref !== vnode.data.ref) {\r\n      registerRef(oldVnode, true);\r\n      registerRef(vnode);\r\n    }\r\n  },\r\n  destroy: function destroy (vnode) {\r\n    registerRef(vnode, true);\r\n  }\r\n};\r\n\r\nfunction registerRef (vnode, isRemoval) {\r\n  var key = vnode.data.ref;\r\n  if (!key) { return }\r\n\r\n  var vm = vnode.context;\r\n  var ref = vnode.componentInstance || vnode.elm;\r\n  var refs = vm.$refs;\r\n  if (isRemoval) {\r\n    if (Array.isArray(refs[key])) {\r\n      remove(refs[key], ref);\r\n    } else if (refs[key] === ref) {\r\n      refs[key] = undefined;\r\n    }\r\n  } else {\r\n    if (vnode.data.refInFor) {\r\n      if (!Array.isArray(refs[key])) {\r\n        refs[key] = [ref];\r\n      } else if (refs[key].indexOf(ref) < 0) {\r\n        // $flow-disable-line\r\n        refs[key].push(ref);\r\n      }\r\n    } else {\r\n      refs[key] = ref;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Virtual DOM patching algorithm based on Snabbdom by\r\n * Simon Friis Vindum (@paldepind)\r\n * Licensed under the MIT License\r\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\r\n *\r\n * modified by Evan You (@yyx990803)\r\n *\r\n\r\n/*\r\n * Not type-checking this because this file is perf-critical and the cost\r\n * of making flow understand it is not worth it.\r\n */\r\n\r\nvar emptyNode = new VNode('', {}, []);\r\n\r\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\r\n\r\nfunction sameVnode (a, b) {\r\n  return (\r\n    a.key === b.key && (\r\n      (\r\n        a.tag === b.tag &&\r\n        a.isComment === b.isComment &&\r\n        isDef(a.data) === isDef(b.data) &&\r\n        sameInputType(a, b)\r\n      ) || (\r\n        isTrue(a.isAsyncPlaceholder) &&\r\n        a.asyncFactory === b.asyncFactory &&\r\n        isUndef(b.asyncFactory.error)\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\n// Some browsers do not support dynamically changing type for <input>\r\n// so they need to be treated as different nodes\r\nfunction sameInputType (a, b) {\r\n  if (a.tag !== 'input') { return true }\r\n  var i;\r\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\r\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\r\n  return typeA === typeB\r\n}\r\n\r\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\r\n  var i, key;\r\n  var map = {};\r\n  for (i = beginIdx; i <= endIdx; ++i) {\r\n    key = children[i].key;\r\n    if (isDef(key)) { map[key] = i; }\r\n  }\r\n  return map\r\n}\r\n\r\nfunction createPatchFunction (backend) {\r\n  var i, j;\r\n  var cbs = {};\r\n\r\n  var modules = backend.modules;\r\n  var nodeOps = backend.nodeOps;\r\n\r\n  for (i = 0; i < hooks.length; ++i) {\r\n    cbs[hooks[i]] = [];\r\n    for (j = 0; j < modules.length; ++j) {\r\n      if (isDef(modules[j][hooks[i]])) {\r\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function emptyNodeAt (elm) {\r\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\r\n  }\r\n\r\n  function createRmCb (childElm, listeners) {\r\n    function remove$$1 () {\r\n      if (--remove$$1.listeners === 0) {\r\n        removeNode(childElm);\r\n      }\r\n    }\r\n    remove$$1.listeners = listeners;\r\n    return remove$$1\r\n  }\r\n\r\n  function removeNode (el) {\r\n    var parent = nodeOps.parentNode(el);\r\n    // element may have already been removed due to v-html / v-text\r\n    if (isDef(parent)) {\r\n      nodeOps.removeChild(parent, el);\r\n    }\r\n  }\r\n\r\n  var inPre = 0;\r\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\r\n    vnode.isRootInsert = !nested; // for transition enter check\r\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\r\n      return\r\n    }\r\n\r\n    var data = vnode.data;\r\n    var children = vnode.children;\r\n    var tag = vnode.tag;\r\n    if (isDef(tag)) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (data && data.pre) {\r\n          inPre++;\r\n        }\r\n        if (\r\n          !inPre &&\r\n          !vnode.ns &&\r\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\r\n          config.isUnknownElement(tag)\r\n        ) {\r\n          warn(\r\n            'Unknown custom element: <' + tag + '> - did you ' +\r\n            'register the component correctly? For recursive components, ' +\r\n            'make sure to provide the \"name\" option.',\r\n            vnode.context\r\n          );\r\n        }\r\n      }\r\n      vnode.elm = vnode.ns\r\n        ? nodeOps.createElementNS(vnode.ns, tag)\r\n        : nodeOps.createElement(tag, vnode);\r\n      setScope(vnode);\r\n\r\n      /* istanbul ignore if */\r\n      {\r\n        createChildren(vnode, children, insertedVnodeQueue);\r\n        if (isDef(data)) {\r\n          invokeCreateHooks(vnode, insertedVnodeQueue);\r\n        }\r\n        insert(parentElm, vnode.elm, refElm);\r\n      }\r\n\r\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\r\n        inPre--;\r\n      }\r\n    } else if (isTrue(vnode.isComment)) {\r\n      vnode.elm = nodeOps.createComment(vnode.text);\r\n      insert(parentElm, vnode.elm, refElm);\r\n    } else {\r\n      vnode.elm = nodeOps.createTextNode(vnode.text);\r\n      insert(parentElm, vnode.elm, refElm);\r\n    }\r\n  }\r\n\r\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\r\n    var i = vnode.data;\r\n    if (isDef(i)) {\r\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\r\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\r\n        i(vnode, false /* hydrating */, parentElm, refElm);\r\n      }\r\n      // after calling the init hook, if the vnode is a child component\r\n      // it should've created a child instance and mounted it. the child\r\n      // component also has set the placeholder vnode's elm.\r\n      // in that case we can just return the element and be done.\r\n      if (isDef(vnode.componentInstance)) {\r\n        initComponent(vnode, insertedVnodeQueue);\r\n        if (isTrue(isReactivated)) {\r\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\r\n        }\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  function initComponent (vnode, insertedVnodeQueue) {\r\n    if (isDef(vnode.data.pendingInsert)) {\r\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\r\n      vnode.data.pendingInsert = null;\r\n    }\r\n    vnode.elm = vnode.componentInstance.$el;\r\n    if (isPatchable(vnode)) {\r\n      invokeCreateHooks(vnode, insertedVnodeQueue);\r\n      setScope(vnode);\r\n    } else {\r\n      // empty component root.\r\n      // skip all element-related modules except for ref (#3455)\r\n      registerRef(vnode);\r\n      // make sure to invoke the insert hook\r\n      insertedVnodeQueue.push(vnode);\r\n    }\r\n  }\r\n\r\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\r\n    var i;\r\n    // hack for #4339: a reactivated component with inner transition\r\n    // does not trigger because the inner node's created hooks are not called\r\n    // again. It's not ideal to involve module-specific logic in here but\r\n    // there doesn't seem to be a better way to do it.\r\n    var innerNode = vnode;\r\n    while (innerNode.componentInstance) {\r\n      innerNode = innerNode.componentInstance._vnode;\r\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\r\n        for (i = 0; i < cbs.activate.length; ++i) {\r\n          cbs.activate[i](emptyNode, innerNode);\r\n        }\r\n        insertedVnodeQueue.push(innerNode);\r\n        break\r\n      }\r\n    }\r\n    // unlike a newly created component,\r\n    // a reactivated keep-alive component doesn't insert itself\r\n    insert(parentElm, vnode.elm, refElm);\r\n  }\r\n\r\n  function insert (parent, elm, ref$$1) {\r\n    if (isDef(parent)) {\r\n      if (isDef(ref$$1)) {\r\n        if (ref$$1.parentNode === parent) {\r\n          nodeOps.insertBefore(parent, elm, ref$$1);\r\n        }\r\n      } else {\r\n        nodeOps.appendChild(parent, elm);\r\n      }\r\n    }\r\n  }\r\n\r\n  function createChildren (vnode, children, insertedVnodeQueue) {\r\n    if (Array.isArray(children)) {\r\n      for (var i = 0; i < children.length; ++i) {\r\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\r\n      }\r\n    } else if (isPrimitive(vnode.text)) {\r\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\r\n    }\r\n  }\r\n\r\n  function isPatchable (vnode) {\r\n    while (vnode.componentInstance) {\r\n      vnode = vnode.componentInstance._vnode;\r\n    }\r\n    return isDef(vnode.tag)\r\n  }\r\n\r\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\r\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\r\n      cbs.create[i$1](emptyNode, vnode);\r\n    }\r\n    i = vnode.data.hook; // Reuse variable\r\n    if (isDef(i)) {\r\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\r\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\r\n    }\r\n  }\r\n\r\n  // set scope id attribute for scoped CSS.\r\n  // this is implemented as a special case to avoid the overhead\r\n  // of going through the normal attribute patching process.\r\n  function setScope (vnode) {\r\n    var i;\r\n    var ancestor = vnode;\r\n    while (ancestor) {\r\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\r\n        nodeOps.setAttribute(vnode.elm, i, '');\r\n      }\r\n      ancestor = ancestor.parent;\r\n    }\r\n    // for slot content they should also get the scopeId from the host instance.\r\n    if (isDef(i = activeInstance) &&\r\n      i !== vnode.context &&\r\n      isDef(i = i.$options._scopeId)\r\n    ) {\r\n      nodeOps.setAttribute(vnode.elm, i, '');\r\n    }\r\n  }\r\n\r\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\r\n    for (; startIdx <= endIdx; ++startIdx) {\r\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\r\n    }\r\n  }\r\n\r\n  function invokeDestroyHook (vnode) {\r\n    var i, j;\r\n    var data = vnode.data;\r\n    if (isDef(data)) {\r\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\r\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\r\n    }\r\n    if (isDef(i = vnode.children)) {\r\n      for (j = 0; j < vnode.children.length; ++j) {\r\n        invokeDestroyHook(vnode.children[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\r\n    for (; startIdx <= endIdx; ++startIdx) {\r\n      var ch = vnodes[startIdx];\r\n      if (isDef(ch)) {\r\n        if (isDef(ch.tag)) {\r\n          removeAndInvokeRemoveHook(ch);\r\n          invokeDestroyHook(ch);\r\n        } else { // Text node\r\n          removeNode(ch.elm);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeAndInvokeRemoveHook (vnode, rm) {\r\n    if (isDef(rm) || isDef(vnode.data)) {\r\n      var i;\r\n      var listeners = cbs.remove.length + 1;\r\n      if (isDef(rm)) {\r\n        // we have a recursively passed down rm callback\r\n        // increase the listeners count\r\n        rm.listeners += listeners;\r\n      } else {\r\n        // directly removing\r\n        rm = createRmCb(vnode.elm, listeners);\r\n      }\r\n      // recursively invoke hooks on child component root node\r\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\r\n        removeAndInvokeRemoveHook(i, rm);\r\n      }\r\n      for (i = 0; i < cbs.remove.length; ++i) {\r\n        cbs.remove[i](vnode, rm);\r\n      }\r\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\r\n        i(vnode, rm);\r\n      } else {\r\n        rm();\r\n      }\r\n    } else {\r\n      removeNode(vnode.elm);\r\n    }\r\n  }\r\n\r\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\r\n    var oldStartIdx = 0;\r\n    var newStartIdx = 0;\r\n    var oldEndIdx = oldCh.length - 1;\r\n    var oldStartVnode = oldCh[0];\r\n    var oldEndVnode = oldCh[oldEndIdx];\r\n    var newEndIdx = newCh.length - 1;\r\n    var newStartVnode = newCh[0];\r\n    var newEndVnode = newCh[newEndIdx];\r\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\r\n\r\n    // removeOnly is a special flag used only by <transition-group>\r\n    // to ensure removed elements stay in correct relative positions\r\n    // during leaving transitions\r\n    var canMove = !removeOnly;\r\n\r\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\r\n      if (isUndef(oldStartVnode)) {\r\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\r\n      } else if (isUndef(oldEndVnode)) {\r\n        oldEndVnode = oldCh[--oldEndIdx];\r\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\r\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\r\n        oldStartVnode = oldCh[++oldStartIdx];\r\n        newStartVnode = newCh[++newStartIdx];\r\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\r\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\r\n        oldEndVnode = oldCh[--oldEndIdx];\r\n        newEndVnode = newCh[--newEndIdx];\r\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\r\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\r\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\r\n        oldStartVnode = oldCh[++oldStartIdx];\r\n        newEndVnode = newCh[--newEndIdx];\r\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\r\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\r\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\r\n        oldEndVnode = oldCh[--oldEndIdx];\r\n        newStartVnode = newCh[++newStartIdx];\r\n      } else {\r\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\r\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\r\n        if (isUndef(idxInOld)) { // New element\r\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\r\n          newStartVnode = newCh[++newStartIdx];\r\n        } else {\r\n          elmToMove = oldCh[idxInOld];\r\n          /* istanbul ignore if */\r\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\r\n            warn(\r\n              'It seems there are duplicate keys that is causing an update error. ' +\r\n              'Make sure each v-for item has a unique key.'\r\n            );\r\n          }\r\n          if (sameVnode(elmToMove, newStartVnode)) {\r\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\r\n            oldCh[idxInOld] = undefined;\r\n            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\r\n            newStartVnode = newCh[++newStartIdx];\r\n          } else {\r\n            // same key but different element. treat as new element\r\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\r\n            newStartVnode = newCh[++newStartIdx];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (oldStartIdx > oldEndIdx) {\r\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\r\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\r\n    } else if (newStartIdx > newEndIdx) {\r\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\r\n    }\r\n  }\r\n\r\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\r\n    if (oldVnode === vnode) {\r\n      return\r\n    }\r\n\r\n    var elm = vnode.elm = oldVnode.elm;\r\n\r\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\r\n      if (isDef(vnode.asyncFactory.resolved)) {\r\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\r\n      } else {\r\n        vnode.isAsyncPlaceholder = true;\r\n      }\r\n      return\r\n    }\r\n\r\n    // reuse element for static trees.\r\n    // note we only do this if the vnode is cloned -\r\n    // if the new node is not cloned it means the render functions have been\r\n    // reset by the hot-reload-api and we need to do a proper re-render.\r\n    if (isTrue(vnode.isStatic) &&\r\n      isTrue(oldVnode.isStatic) &&\r\n      vnode.key === oldVnode.key &&\r\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\r\n    ) {\r\n      vnode.componentInstance = oldVnode.componentInstance;\r\n      return\r\n    }\r\n\r\n    var i;\r\n    var data = vnode.data;\r\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\r\n      i(oldVnode, vnode);\r\n    }\r\n\r\n    var oldCh = oldVnode.children;\r\n    var ch = vnode.children;\r\n    if (isDef(data) && isPatchable(vnode)) {\r\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\r\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\r\n    }\r\n    if (isUndef(vnode.text)) {\r\n      if (isDef(oldCh) && isDef(ch)) {\r\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\r\n      } else if (isDef(ch)) {\r\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\r\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\r\n      } else if (isDef(oldCh)) {\r\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\r\n      } else if (isDef(oldVnode.text)) {\r\n        nodeOps.setTextContent(elm, '');\r\n      }\r\n    } else if (oldVnode.text !== vnode.text) {\r\n      nodeOps.setTextContent(elm, vnode.text);\r\n    }\r\n    if (isDef(data)) {\r\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\r\n    }\r\n  }\r\n\r\n  function invokeInsertHook (vnode, queue, initial) {\r\n    // delay insert hooks for component root nodes, invoke them after the\r\n    // element is really inserted\r\n    if (isTrue(initial) && isDef(vnode.parent)) {\r\n      vnode.parent.data.pendingInsert = queue;\r\n    } else {\r\n      for (var i = 0; i < queue.length; ++i) {\r\n        queue[i].data.hook.insert(queue[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  var bailed = false;\r\n  // list of modules that can skip create hook during hydration because they\r\n  // are already rendered on the client or has no need for initialization\r\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\r\n\r\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\r\n  function hydrate (elm, vnode, insertedVnodeQueue) {\r\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\r\n      vnode.elm = elm;\r\n      vnode.isAsyncPlaceholder = true;\r\n      return true\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!assertNodeMatch(elm, vnode)) {\r\n        return false\r\n      }\r\n    }\r\n    vnode.elm = elm;\r\n    var tag = vnode.tag;\r\n    var data = vnode.data;\r\n    var children = vnode.children;\r\n    if (isDef(data)) {\r\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\r\n      if (isDef(i = vnode.componentInstance)) {\r\n        // child component. it should have hydrated its own tree.\r\n        initComponent(vnode, insertedVnodeQueue);\r\n        return true\r\n      }\r\n    }\r\n    if (isDef(tag)) {\r\n      if (isDef(children)) {\r\n        // empty element, allow client to pick up and populate children\r\n        if (!elm.hasChildNodes()) {\r\n          createChildren(vnode, children, insertedVnodeQueue);\r\n        } else {\r\n          var childrenMatch = true;\r\n          var childNode = elm.firstChild;\r\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\r\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\r\n              childrenMatch = false;\r\n              break\r\n            }\r\n            childNode = childNode.nextSibling;\r\n          }\r\n          // if childNode is not null, it means the actual childNodes list is\r\n          // longer than the virtual children list.\r\n          if (!childrenMatch || childNode) {\r\n            if (process.env.NODE_ENV !== 'production' &&\r\n              typeof console !== 'undefined' &&\r\n              !bailed\r\n            ) {\r\n              bailed = true;\r\n              console.warn('Parent: ', elm);\r\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\r\n            }\r\n            return false\r\n          }\r\n        }\r\n      }\r\n      if (isDef(data)) {\r\n        for (var key in data) {\r\n          if (!isRenderedModule(key)) {\r\n            invokeCreateHooks(vnode, insertedVnodeQueue);\r\n            break\r\n          }\r\n        }\r\n      }\r\n    } else if (elm.data !== vnode.text) {\r\n      elm.data = vnode.text;\r\n    }\r\n    return true\r\n  }\r\n\r\n  function assertNodeMatch (node, vnode) {\r\n    if (isDef(vnode.tag)) {\r\n      return (\r\n        vnode.tag.indexOf('vue-component') === 0 ||\r\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\r\n      )\r\n    } else {\r\n      return node.nodeType === (vnode.isComment ? 8 : 3)\r\n    }\r\n  }\r\n\r\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\r\n    if (isUndef(vnode)) {\r\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\r\n      return\r\n    }\r\n\r\n    var isInitialPatch = false;\r\n    var insertedVnodeQueue = [];\r\n\r\n    if (isUndef(oldVnode)) {\r\n      // empty mount (likely as component), create new root element\r\n      isInitialPatch = true;\r\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\r\n    } else {\r\n      var isRealElement = isDef(oldVnode.nodeType);\r\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\r\n        // patch existing root node\r\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\r\n      } else {\r\n        if (isRealElement) {\r\n          // mounting to a real element\r\n          // check if this is server-rendered content and if we can perform\r\n          // a successful hydration.\r\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\r\n            oldVnode.removeAttribute(SSR_ATTR);\r\n            hydrating = true;\r\n          }\r\n          if (isTrue(hydrating)) {\r\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\r\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\r\n              return oldVnode\r\n            } else if (process.env.NODE_ENV !== 'production') {\r\n              warn(\r\n                'The client-side rendered virtual DOM tree is not matching ' +\r\n                'server-rendered content. This is likely caused by incorrect ' +\r\n                'HTML markup, for example nesting block-level elements inside ' +\r\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\r\n                'full client-side render.'\r\n              );\r\n            }\r\n          }\r\n          // either not server-rendered, or hydration failed.\r\n          // create an empty node and replace it\r\n          oldVnode = emptyNodeAt(oldVnode);\r\n        }\r\n        // replacing existing element\r\n        var oldElm = oldVnode.elm;\r\n        var parentElm$1 = nodeOps.parentNode(oldElm);\r\n        createElm(\r\n          vnode,\r\n          insertedVnodeQueue,\r\n          // extremely rare edge case: do not insert if old element is in a\r\n          // leaving transition. Only happens when combining transition +\r\n          // keep-alive + HOCs. (#4590)\r\n          oldElm._leaveCb ? null : parentElm$1,\r\n          nodeOps.nextSibling(oldElm)\r\n        );\r\n\r\n        if (isDef(vnode.parent)) {\r\n          // component root element replaced.\r\n          // update parent placeholder node element, recursively\r\n          var ancestor = vnode.parent;\r\n          while (ancestor) {\r\n            ancestor.elm = vnode.elm;\r\n            ancestor = ancestor.parent;\r\n          }\r\n          if (isPatchable(vnode)) {\r\n            for (var i = 0; i < cbs.create.length; ++i) {\r\n              cbs.create[i](emptyNode, vnode.parent);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (isDef(parentElm$1)) {\r\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\r\n        } else if (isDef(oldVnode.tag)) {\r\n          invokeDestroyHook(oldVnode);\r\n        }\r\n      }\r\n    }\r\n\r\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\r\n    return vnode.elm\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar directives = {\r\n  create: updateDirectives,\r\n  update: updateDirectives,\r\n  destroy: function unbindDirectives (vnode) {\r\n    updateDirectives(vnode, emptyNode);\r\n  }\r\n};\r\n\r\nfunction updateDirectives (oldVnode, vnode) {\r\n  if (oldVnode.data.directives || vnode.data.directives) {\r\n    _update(oldVnode, vnode);\r\n  }\r\n}\r\n\r\nfunction _update (oldVnode, vnode) {\r\n  var isCreate = oldVnode === emptyNode;\r\n  var isDestroy = vnode === emptyNode;\r\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\r\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\r\n\r\n  var dirsWithInsert = [];\r\n  var dirsWithPostpatch = [];\r\n\r\n  var key, oldDir, dir;\r\n  for (key in newDirs) {\r\n    oldDir = oldDirs[key];\r\n    dir = newDirs[key];\r\n    if (!oldDir) {\r\n      // new directive, bind\r\n      callHook$1(dir, 'bind', vnode, oldVnode);\r\n      if (dir.def && dir.def.inserted) {\r\n        dirsWithInsert.push(dir);\r\n      }\r\n    } else {\r\n      // existing directive, update\r\n      dir.oldValue = oldDir.value;\r\n      callHook$1(dir, 'update', vnode, oldVnode);\r\n      if (dir.def && dir.def.componentUpdated) {\r\n        dirsWithPostpatch.push(dir);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (dirsWithInsert.length) {\r\n    var callInsert = function () {\r\n      for (var i = 0; i < dirsWithInsert.length; i++) {\r\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\r\n      }\r\n    };\r\n    if (isCreate) {\r\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\r\n    } else {\r\n      callInsert();\r\n    }\r\n  }\r\n\r\n  if (dirsWithPostpatch.length) {\r\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\r\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\r\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!isCreate) {\r\n    for (key in oldDirs) {\r\n      if (!newDirs[key]) {\r\n        // no longer present, unbind\r\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar emptyModifiers = Object.create(null);\r\n\r\nfunction normalizeDirectives$1 (\r\n  dirs,\r\n  vm\r\n) {\r\n  var res = Object.create(null);\r\n  if (!dirs) {\r\n    return res\r\n  }\r\n  var i, dir;\r\n  for (i = 0; i < dirs.length; i++) {\r\n    dir = dirs[i];\r\n    if (!dir.modifiers) {\r\n      dir.modifiers = emptyModifiers;\r\n    }\r\n    res[getRawDirName(dir)] = dir;\r\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\r\n  }\r\n  return res\r\n}\r\n\r\nfunction getRawDirName (dir) {\r\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\r\n}\r\n\r\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\r\n  var fn = dir.def && dir.def[hook];\r\n  if (fn) {\r\n    try {\r\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\r\n    } catch (e) {\r\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\r\n    }\r\n  }\r\n}\r\n\r\nvar baseModules = [\r\n  ref,\r\n  directives\r\n];\r\n\r\n/*  */\r\n\r\nfunction updateAttrs (oldVnode, vnode) {\r\n  var opts = vnode.componentOptions;\r\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\r\n    return\r\n  }\r\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\r\n    return\r\n  }\r\n  var key, cur, old;\r\n  var elm = vnode.elm;\r\n  var oldAttrs = oldVnode.data.attrs || {};\r\n  var attrs = vnode.data.attrs || {};\r\n  // clone observed objects, as the user probably wants to mutate it\r\n  if (isDef(attrs.__ob__)) {\r\n    attrs = vnode.data.attrs = extend({}, attrs);\r\n  }\r\n\r\n  for (key in attrs) {\r\n    cur = attrs[key];\r\n    old = oldAttrs[key];\r\n    if (old !== cur) {\r\n      setAttr(elm, key, cur);\r\n    }\r\n  }\r\n  // #4391: in IE9, setting type can reset value for input[type=radio]\r\n  /* istanbul ignore if */\r\n  if (isIE9 && attrs.value !== oldAttrs.value) {\r\n    setAttr(elm, 'value', attrs.value);\r\n  }\r\n  for (key in oldAttrs) {\r\n    if (isUndef(attrs[key])) {\r\n      if (isXlink(key)) {\r\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n      } else if (!isEnumeratedAttr(key)) {\r\n        elm.removeAttribute(key);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction setAttr (el, key, value) {\r\n  if (isBooleanAttr(key)) {\r\n    // set attribute for blank value\r\n    // e.g. <option disabled>Select one</option>\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttribute(key);\r\n    } else {\r\n      el.setAttribute(key, key);\r\n    }\r\n  } else if (isEnumeratedAttr(key)) {\r\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\r\n  } else if (isXlink(key)) {\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n    } else {\r\n      el.setAttributeNS(xlinkNS, key, value);\r\n    }\r\n  } else {\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttribute(key);\r\n    } else {\r\n      el.setAttribute(key, value);\r\n    }\r\n  }\r\n}\r\n\r\nvar attrs = {\r\n  create: updateAttrs,\r\n  update: updateAttrs\r\n};\r\n\r\n/*  */\r\n\r\nfunction updateClass (oldVnode, vnode) {\r\n  var el = vnode.elm;\r\n  var data = vnode.data;\r\n  var oldData = oldVnode.data;\r\n  if (\r\n    isUndef(data.staticClass) &&\r\n    isUndef(data.class) && (\r\n      isUndef(oldData) || (\r\n        isUndef(oldData.staticClass) &&\r\n        isUndef(oldData.class)\r\n      )\r\n    )\r\n  ) {\r\n    return\r\n  }\r\n\r\n  var cls = genClassForVnode(vnode);\r\n\r\n  // handle transition classes\r\n  var transitionClass = el._transitionClasses;\r\n  if (isDef(transitionClass)) {\r\n    cls = concat(cls, stringifyClass(transitionClass));\r\n  }\r\n\r\n  // set the class\r\n  if (cls !== el._prevClass) {\r\n    el.setAttribute('class', cls);\r\n    el._prevClass = cls;\r\n  }\r\n}\r\n\r\nvar klass = {\r\n  create: updateClass,\r\n  update: updateClass\r\n};\r\n\r\n/*  */\r\n\r\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\n\r\nfunction parseFilters (exp) {\r\n  var inSingle = false;\r\n  var inDouble = false;\r\n  var inTemplateString = false;\r\n  var inRegex = false;\r\n  var curly = 0;\r\n  var square = 0;\r\n  var paren = 0;\r\n  var lastFilterIndex = 0;\r\n  var c, prev, i, expression, filters;\r\n\r\n  for (i = 0; i < exp.length; i++) {\r\n    prev = c;\r\n    c = exp.charCodeAt(i);\r\n    if (inSingle) {\r\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\r\n    } else if (inDouble) {\r\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\r\n    } else if (inTemplateString) {\r\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\r\n    } else if (inRegex) {\r\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\r\n    } else if (\r\n      c === 0x7C && // pipe\r\n      exp.charCodeAt(i + 1) !== 0x7C &&\r\n      exp.charCodeAt(i - 1) !== 0x7C &&\r\n      !curly && !square && !paren\r\n    ) {\r\n      if (expression === undefined) {\r\n        // first filter, end of expression\r\n        lastFilterIndex = i + 1;\r\n        expression = exp.slice(0, i).trim();\r\n      } else {\r\n        pushFilter();\r\n      }\r\n    } else {\r\n      switch (c) {\r\n        case 0x22: inDouble = true; break         // \"\r\n        case 0x27: inSingle = true; break         // '\r\n        case 0x60: inTemplateString = true; break // `\r\n        case 0x28: paren++; break                 // (\r\n        case 0x29: paren--; break                 // )\r\n        case 0x5B: square++; break                // [\r\n        case 0x5D: square--; break                // ]\r\n        case 0x7B: curly++; break                 // {\r\n        case 0x7D: curly--; break                 // }\r\n      }\r\n      if (c === 0x2f) { // /\r\n        var j = i - 1;\r\n        var p = (void 0);\r\n        // find first non-whitespace prev char\r\n        for (; j >= 0; j--) {\r\n          p = exp.charAt(j);\r\n          if (p !== ' ') { break }\r\n        }\r\n        if (!p || !validDivisionCharRE.test(p)) {\r\n          inRegex = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (expression === undefined) {\r\n    expression = exp.slice(0, i).trim();\r\n  } else if (lastFilterIndex !== 0) {\r\n    pushFilter();\r\n  }\r\n\r\n  function pushFilter () {\r\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\r\n    lastFilterIndex = i + 1;\r\n  }\r\n\r\n  if (filters) {\r\n    for (i = 0; i < filters.length; i++) {\r\n      expression = wrapFilter(expression, filters[i]);\r\n    }\r\n  }\r\n\r\n  return expression\r\n}\r\n\r\nfunction wrapFilter (exp, filter) {\r\n  var i = filter.indexOf('(');\r\n  if (i < 0) {\r\n    // _f: resolveFilter\r\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\r\n  } else {\r\n    var name = filter.slice(0, i);\r\n    var args = filter.slice(i + 1);\r\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction baseWarn (msg) {\r\n  console.error((\"[Vue compiler]: \" + msg));\r\n}\r\n\r\nfunction pluckModuleFunction (\r\n  modules,\r\n  key\r\n) {\r\n  return modules\r\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\r\n    : []\r\n}\r\n\r\nfunction addProp (el, name, value) {\r\n  (el.props || (el.props = [])).push({ name: name, value: value });\r\n}\r\n\r\nfunction addAttr (el, name, value) {\r\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\r\n}\r\n\r\nfunction addDirective (\r\n  el,\r\n  name,\r\n  rawName,\r\n  value,\r\n  arg,\r\n  modifiers\r\n) {\r\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\r\n}\r\n\r\nfunction addHandler (\r\n  el,\r\n  name,\r\n  value,\r\n  modifiers,\r\n  important,\r\n  warn\r\n) {\r\n  // warn prevent and passive modifier\r\n  /* istanbul ignore if */\r\n  if (\r\n    process.env.NODE_ENV !== 'production' && warn &&\r\n    modifiers && modifiers.prevent && modifiers.passive\r\n  ) {\r\n    warn(\r\n      'passive and prevent can\\'t be used together. ' +\r\n      'Passive handler can\\'t prevent default event.'\r\n    );\r\n  }\r\n  // check capture modifier\r\n  if (modifiers && modifiers.capture) {\r\n    delete modifiers.capture;\r\n    name = '!' + name; // mark the event as captured\r\n  }\r\n  if (modifiers && modifiers.once) {\r\n    delete modifiers.once;\r\n    name = '~' + name; // mark the event as once\r\n  }\r\n  /* istanbul ignore if */\r\n  if (modifiers && modifiers.passive) {\r\n    delete modifiers.passive;\r\n    name = '&' + name; // mark the event as passive\r\n  }\r\n  var events;\r\n  if (modifiers && modifiers.native) {\r\n    delete modifiers.native;\r\n    events = el.nativeEvents || (el.nativeEvents = {});\r\n  } else {\r\n    events = el.events || (el.events = {});\r\n  }\r\n  var newHandler = { value: value, modifiers: modifiers };\r\n  var handlers = events[name];\r\n  /* istanbul ignore if */\r\n  if (Array.isArray(handlers)) {\r\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\r\n  } else if (handlers) {\r\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\r\n  } else {\r\n    events[name] = newHandler;\r\n  }\r\n}\r\n\r\nfunction getBindingAttr (\r\n  el,\r\n  name,\r\n  getStatic\r\n) {\r\n  var dynamicValue =\r\n    getAndRemoveAttr(el, ':' + name) ||\r\n    getAndRemoveAttr(el, 'v-bind:' + name);\r\n  if (dynamicValue != null) {\r\n    return parseFilters(dynamicValue)\r\n  } else if (getStatic !== false) {\r\n    var staticValue = getAndRemoveAttr(el, name);\r\n    if (staticValue != null) {\r\n      return JSON.stringify(staticValue)\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAndRemoveAttr (el, name) {\r\n  var val;\r\n  if ((val = el.attrsMap[name]) != null) {\r\n    var list = el.attrsList;\r\n    for (var i = 0, l = list.length; i < l; i++) {\r\n      if (list[i].name === name) {\r\n        list.splice(i, 1);\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return val\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Cross-platform code generation for component v-model\r\n */\r\nfunction genComponentModel (\r\n  el,\r\n  value,\r\n  modifiers\r\n) {\r\n  var ref = modifiers || {};\r\n  var number = ref.number;\r\n  var trim = ref.trim;\r\n\r\n  var baseValueExpression = '$$v';\r\n  var valueExpression = baseValueExpression;\r\n  if (trim) {\r\n    valueExpression =\r\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\r\n        \"? \" + baseValueExpression + \".trim()\" +\r\n        \": \" + baseValueExpression + \")\";\r\n  }\r\n  if (number) {\r\n    valueExpression = \"_n(\" + valueExpression + \")\";\r\n  }\r\n  var assignment = genAssignmentCode(value, valueExpression);\r\n\r\n  el.model = {\r\n    value: (\"(\" + value + \")\"),\r\n    expression: (\"\\\"\" + value + \"\\\"\"),\r\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\r\n  };\r\n}\r\n\r\n/**\r\n * Cross-platform codegen helper for generating v-model value assignment code.\r\n */\r\nfunction genAssignmentCode (\r\n  value,\r\n  assignment\r\n) {\r\n  var modelRs = parseModel(value);\r\n  if (modelRs.idx === null) {\r\n    return (value + \"=\" + assignment)\r\n  } else {\r\n    return (\"$set(\" + (modelRs.exp) + \", \" + (modelRs.idx) + \", \" + assignment + \")\")\r\n  }\r\n}\r\n\r\n/**\r\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\r\n *\r\n * for loop possible cases:\r\n *\r\n * - test\r\n * - test[idx]\r\n * - test[test1[idx]]\r\n * - test[\"a\"][idx]\r\n * - xxx.test[a[a].test1[idx]]\r\n * - test.xxx.a[\"asa\"][test1[idx]]\r\n *\r\n */\r\n\r\nvar len;\r\nvar str;\r\nvar chr;\r\nvar index$1;\r\nvar expressionPos;\r\nvar expressionEndPos;\r\n\r\nfunction parseModel (val) {\r\n  str = val;\r\n  len = str.length;\r\n  index$1 = expressionPos = expressionEndPos = 0;\r\n\r\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\r\n    return {\r\n      exp: val,\r\n      idx: null\r\n    }\r\n  }\r\n\r\n  while (!eof()) {\r\n    chr = next();\r\n    /* istanbul ignore if */\r\n    if (isStringStart(chr)) {\r\n      parseString(chr);\r\n    } else if (chr === 0x5B) {\r\n      parseBracket(chr);\r\n    }\r\n  }\r\n\r\n  return {\r\n    exp: val.substring(0, expressionPos),\r\n    idx: val.substring(expressionPos + 1, expressionEndPos)\r\n  }\r\n}\r\n\r\nfunction next () {\r\n  return str.charCodeAt(++index$1)\r\n}\r\n\r\nfunction eof () {\r\n  return index$1 >= len\r\n}\r\n\r\nfunction isStringStart (chr) {\r\n  return chr === 0x22 || chr === 0x27\r\n}\r\n\r\nfunction parseBracket (chr) {\r\n  var inBracket = 1;\r\n  expressionPos = index$1;\r\n  while (!eof()) {\r\n    chr = next();\r\n    if (isStringStart(chr)) {\r\n      parseString(chr);\r\n      continue\r\n    }\r\n    if (chr === 0x5B) { inBracket++; }\r\n    if (chr === 0x5D) { inBracket--; }\r\n    if (inBracket === 0) {\r\n      expressionEndPos = index$1;\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseString (chr) {\r\n  var stringQuote = chr;\r\n  while (!eof()) {\r\n    chr = next();\r\n    if (chr === stringQuote) {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar warn$1;\r\n\r\n// in some cases, the event used has to be determined at runtime\r\n// so we used some reserved tokens during compile.\r\nvar RANGE_TOKEN = '__r';\r\nvar CHECKBOX_RADIO_TOKEN = '__c';\r\n\r\nfunction model (\r\n  el,\r\n  dir,\r\n  _warn\r\n) {\r\n  warn$1 = _warn;\r\n  var value = dir.value;\r\n  var modifiers = dir.modifiers;\r\n  var tag = el.tag;\r\n  var type = el.attrsMap.type;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\r\n    if (tag === 'input' && dynamicType) {\r\n      warn$1(\r\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\r\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\r\n      );\r\n    }\r\n    // inputs with type=\"file\" are read only and setting the input's\r\n    // value will throw an error.\r\n    if (tag === 'input' && type === 'file') {\r\n      warn$1(\r\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\r\n        \"File inputs are read only. Use a v-on:change listener instead.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  if (el.component) {\r\n    genComponentModel(el, value, modifiers);\r\n    // component v-model doesn't need extra runtime\r\n    return false\r\n  } else if (tag === 'select') {\r\n    genSelect(el, value, modifiers);\r\n  } else if (tag === 'input' && type === 'checkbox') {\r\n    genCheckboxModel(el, value, modifiers);\r\n  } else if (tag === 'input' && type === 'radio') {\r\n    genRadioModel(el, value, modifiers);\r\n  } else if (tag === 'input' || tag === 'textarea') {\r\n    genDefaultModel(el, value, modifiers);\r\n  } else if (!config.isReservedTag(tag)) {\r\n    genComponentModel(el, value, modifiers);\r\n    // component v-model doesn't need extra runtime\r\n    return false\r\n  } else if (process.env.NODE_ENV !== 'production') {\r\n    warn$1(\r\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\r\n      \"v-model is not supported on this element type. \" +\r\n      'If you are working with contenteditable, it\\'s recommended to ' +\r\n      'wrap a library dedicated for that purpose inside a custom component.'\r\n    );\r\n  }\r\n\r\n  // ensure runtime directive metadata\r\n  return true\r\n}\r\n\r\nfunction genCheckboxModel (\r\n  el,\r\n  value,\r\n  modifiers\r\n) {\r\n  var number = modifiers && modifiers.number;\r\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\r\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\r\n  addProp(el, 'checked',\r\n    \"Array.isArray(\" + value + \")\" +\r\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\r\n        trueValueBinding === 'true'\r\n          ? (\":(\" + value + \")\")\r\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\r\n      )\r\n  );\r\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\r\n    \"var $$a=\" + value + \",\" +\r\n        '$$el=$event.target,' +\r\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\r\n    'if(Array.isArray($$a)){' +\r\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\r\n          '$$i=_i($$a,$$v);' +\r\n      \"if($$el.checked){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\r\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\r\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\r\n    null, true\r\n  );\r\n}\r\n\r\nfunction genRadioModel (\r\n    el,\r\n    value,\r\n    modifiers\r\n) {\r\n  var number = modifiers && modifiers.number;\r\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\r\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\r\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\r\n}\r\n\r\nfunction genSelect (\r\n    el,\r\n    value,\r\n    modifiers\r\n) {\r\n  var number = modifiers && modifiers.number;\r\n  var selectedVal = \"Array.prototype.filter\" +\r\n    \".call($event.target.options,function(o){return o.selected})\" +\r\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\r\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\r\n\r\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\r\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\r\n  code = code + \" \" + (genAssignmentCode(value, assignment));\r\n  addHandler(el, 'change', code, null, true);\r\n}\r\n\r\nfunction genDefaultModel (\r\n  el,\r\n  value,\r\n  modifiers\r\n) {\r\n  var type = el.attrsMap.type;\r\n  var ref = modifiers || {};\r\n  var lazy = ref.lazy;\r\n  var number = ref.number;\r\n  var trim = ref.trim;\r\n  var needCompositionGuard = !lazy && type !== 'range';\r\n  var event = lazy\r\n    ? 'change'\r\n    : type === 'range'\r\n      ? RANGE_TOKEN\r\n      : 'input';\r\n\r\n  var valueExpression = '$event.target.value';\r\n  if (trim) {\r\n    valueExpression = \"$event.target.value.trim()\";\r\n  }\r\n  if (number) {\r\n    valueExpression = \"_n(\" + valueExpression + \")\";\r\n  }\r\n\r\n  var code = genAssignmentCode(value, valueExpression);\r\n  if (needCompositionGuard) {\r\n    code = \"if($event.target.composing)return;\" + code;\r\n  }\r\n\r\n  addProp(el, 'value', (\"(\" + value + \")\"));\r\n  addHandler(el, event, code, null, true);\r\n  if (trim || number) {\r\n    addHandler(el, 'blur', '$forceUpdate()');\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n// normalize v-model event tokens that can only be determined at runtime.\r\n// it's important to place the event as the first in the array because\r\n// the whole point is ensuring the v-model callback gets called before\r\n// user-attached handlers.\r\nfunction normalizeEvents (on) {\r\n  var event;\r\n  /* istanbul ignore if */\r\n  if (isDef(on[RANGE_TOKEN])) {\r\n    // IE input[type=range] only supports `change` event\r\n    event = isIE ? 'change' : 'input';\r\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\r\n    delete on[RANGE_TOKEN];\r\n  }\r\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\r\n    // Chrome fires microtasks in between click/change, leads to #4521\r\n    event = isChrome ? 'click' : 'change';\r\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\r\n    delete on[CHECKBOX_RADIO_TOKEN];\r\n  }\r\n}\r\n\r\nvar target$1;\r\n\r\nfunction add$1 (\r\n  event,\r\n  handler,\r\n  once$$1,\r\n  capture,\r\n  passive\r\n) {\r\n  if (once$$1) {\r\n    var oldHandler = handler;\r\n    var _target = target$1; // save current target element in closure\r\n    handler = function (ev) {\r\n      var res = arguments.length === 1\r\n        ? oldHandler(ev)\r\n        : oldHandler.apply(null, arguments);\r\n      if (res !== null) {\r\n        remove$2(event, handler, capture, _target);\r\n      }\r\n    };\r\n  }\r\n  target$1.addEventListener(\r\n    event,\r\n    handler,\r\n    supportsPassive\r\n      ? { capture: capture, passive: passive }\r\n      : capture\r\n  );\r\n}\r\n\r\nfunction remove$2 (\r\n  event,\r\n  handler,\r\n  capture,\r\n  _target\r\n) {\r\n  (_target || target$1).removeEventListener(event, handler, capture);\r\n}\r\n\r\nfunction updateDOMListeners (oldVnode, vnode) {\r\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\r\n    return\r\n  }\r\n  var on = vnode.data.on || {};\r\n  var oldOn = oldVnode.data.on || {};\r\n  target$1 = vnode.elm;\r\n  normalizeEvents(on);\r\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\r\n}\r\n\r\nvar events = {\r\n  create: updateDOMListeners,\r\n  update: updateDOMListeners\r\n};\r\n\r\n/*  */\r\n\r\nfunction updateDOMProps (oldVnode, vnode) {\r\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\r\n    return\r\n  }\r\n  var key, cur;\r\n  var elm = vnode.elm;\r\n  var oldProps = oldVnode.data.domProps || {};\r\n  var props = vnode.data.domProps || {};\r\n  // clone observed objects, as the user probably wants to mutate it\r\n  if (isDef(props.__ob__)) {\r\n    props = vnode.data.domProps = extend({}, props);\r\n  }\r\n\r\n  for (key in oldProps) {\r\n    if (isUndef(props[key])) {\r\n      elm[key] = '';\r\n    }\r\n  }\r\n  for (key in props) {\r\n    cur = props[key];\r\n    // ignore children if the node has textContent or innerHTML,\r\n    // as these will throw away existing DOM nodes and cause removal errors\r\n    // on subsequent patches (#3360)\r\n    if (key === 'textContent' || key === 'innerHTML') {\r\n      if (vnode.children) { vnode.children.length = 0; }\r\n      if (cur === oldProps[key]) { continue }\r\n    }\r\n\r\n    if (key === 'value') {\r\n      // store value as _value as well since\r\n      // non-string values will be stringified\r\n      elm._value = cur;\r\n      // avoid resetting cursor position when value is the same\r\n      var strCur = isUndef(cur) ? '' : String(cur);\r\n      if (shouldUpdateValue(elm, vnode, strCur)) {\r\n        elm.value = strCur;\r\n      }\r\n    } else {\r\n      elm[key] = cur;\r\n    }\r\n  }\r\n}\r\n\r\n// check platforms/web/util/attrs.js acceptValue\r\n\r\n\r\nfunction shouldUpdateValue (\r\n  elm,\r\n  vnode,\r\n  checkVal\r\n) {\r\n  return (!elm.composing && (\r\n    vnode.tag === 'option' ||\r\n    isDirty(elm, checkVal) ||\r\n    isInputChanged(elm, checkVal)\r\n  ))\r\n}\r\n\r\nfunction isDirty (elm, checkVal) {\r\n  // return true when textbox (.number and .trim) loses focus and its value is\r\n  // not equal to the updated value\r\n  var notInFocus = true;\r\n  // #6157\r\n  // work around IE bug when accessing document.activeElement in an iframe\r\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\r\n  return notInFocus && elm.value !== checkVal\r\n}\r\n\r\nfunction isInputChanged (elm, newVal) {\r\n  var value = elm.value;\r\n  var modifiers = elm._vModifiers; // injected by v-model runtime\r\n  if (isDef(modifiers) && modifiers.number) {\r\n    return toNumber(value) !== toNumber(newVal)\r\n  }\r\n  if (isDef(modifiers) && modifiers.trim) {\r\n    return value.trim() !== newVal.trim()\r\n  }\r\n  return value !== newVal\r\n}\r\n\r\nvar domProps = {\r\n  create: updateDOMProps,\r\n  update: updateDOMProps\r\n};\r\n\r\n/*  */\r\n\r\nvar parseStyleText = cached(function (cssText) {\r\n  var res = {};\r\n  var listDelimiter = /;(?![^(]*\\))/g;\r\n  var propertyDelimiter = /:(.+)/;\r\n  cssText.split(listDelimiter).forEach(function (item) {\r\n    if (item) {\r\n      var tmp = item.split(propertyDelimiter);\r\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\r\n    }\r\n  });\r\n  return res\r\n});\r\n\r\n// merge static and dynamic style data on the same vnode\r\nfunction normalizeStyleData (data) {\r\n  var style = normalizeStyleBinding(data.style);\r\n  // static style is pre-processed into an object during compilation\r\n  // and is always a fresh object, so it's safe to merge into it\r\n  return data.staticStyle\r\n    ? extend(data.staticStyle, style)\r\n    : style\r\n}\r\n\r\n// normalize possible array / string values into Object\r\nfunction normalizeStyleBinding (bindingStyle) {\r\n  if (Array.isArray(bindingStyle)) {\r\n    return toObject(bindingStyle)\r\n  }\r\n  if (typeof bindingStyle === 'string') {\r\n    return parseStyleText(bindingStyle)\r\n  }\r\n  return bindingStyle\r\n}\r\n\r\n/**\r\n * parent component style should be after child's\r\n * so that parent component's style could override it\r\n */\r\nfunction getStyle (vnode, checkChild) {\r\n  var res = {};\r\n  var styleData;\r\n\r\n  if (checkChild) {\r\n    var childNode = vnode;\r\n    while (childNode.componentInstance) {\r\n      childNode = childNode.componentInstance._vnode;\r\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\r\n        extend(res, styleData);\r\n      }\r\n    }\r\n  }\r\n\r\n  if ((styleData = normalizeStyleData(vnode.data))) {\r\n    extend(res, styleData);\r\n  }\r\n\r\n  var parentNode = vnode;\r\n  while ((parentNode = parentNode.parent)) {\r\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\r\n      extend(res, styleData);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar cssVarRE = /^--/;\r\nvar importantRE = /\\s*!important$/;\r\nvar setProp = function (el, name, val) {\r\n  /* istanbul ignore if */\r\n  if (cssVarRE.test(name)) {\r\n    el.style.setProperty(name, val);\r\n  } else if (importantRE.test(val)) {\r\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\r\n  } else {\r\n    var normalizedName = normalize(name);\r\n    if (Array.isArray(val)) {\r\n      // Support values array created by autoprefixer, e.g.\r\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\r\n      // Set them one by one, and the browser will only set those it can recognize\r\n      for (var i = 0, len = val.length; i < len; i++) {\r\n        el.style[normalizedName] = val[i];\r\n      }\r\n    } else {\r\n      el.style[normalizedName] = val;\r\n    }\r\n  }\r\n};\r\n\r\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\r\n\r\nvar emptyStyle;\r\nvar normalize = cached(function (prop) {\r\n  emptyStyle = emptyStyle || document.createElement('div').style;\r\n  prop = camelize(prop);\r\n  if (prop !== 'filter' && (prop in emptyStyle)) {\r\n    return prop\r\n  }\r\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\r\n  for (var i = 0; i < vendorNames.length; i++) {\r\n    var name = vendorNames[i] + capName;\r\n    if (name in emptyStyle) {\r\n      return name\r\n    }\r\n  }\r\n});\r\n\r\nfunction updateStyle (oldVnode, vnode) {\r\n  var data = vnode.data;\r\n  var oldData = oldVnode.data;\r\n\r\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\r\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\r\n  ) {\r\n    return\r\n  }\r\n\r\n  var cur, name;\r\n  var el = vnode.elm;\r\n  var oldStaticStyle = oldData.staticStyle;\r\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\r\n\r\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\r\n  var oldStyle = oldStaticStyle || oldStyleBinding;\r\n\r\n  var style = normalizeStyleBinding(vnode.data.style) || {};\r\n\r\n  // store normalized style under a different key for next diff\r\n  // make sure to clone it if it's reactive, since the user likley wants\r\n  // to mutate it.\r\n  vnode.data.normalizedStyle = isDef(style.__ob__)\r\n    ? extend({}, style)\r\n    : style;\r\n\r\n  var newStyle = getStyle(vnode, true);\r\n\r\n  for (name in oldStyle) {\r\n    if (isUndef(newStyle[name])) {\r\n      setProp(el, name, '');\r\n    }\r\n  }\r\n  for (name in newStyle) {\r\n    cur = newStyle[name];\r\n    if (cur !== oldStyle[name]) {\r\n      // ie9 setting to null has no effect, must use empty string\r\n      setProp(el, name, cur == null ? '' : cur);\r\n    }\r\n  }\r\n}\r\n\r\nvar style = {\r\n  create: updateStyle,\r\n  update: updateStyle\r\n};\r\n\r\n/*  */\r\n\r\n/**\r\n * Add class with compatibility for SVG since classList is not supported on\r\n * SVG elements in IE\r\n */\r\nfunction addClass (el, cls) {\r\n  /* istanbul ignore if */\r\n  if (!cls || !(cls = cls.trim())) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.classList) {\r\n    if (cls.indexOf(' ') > -1) {\r\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\r\n    } else {\r\n      el.classList.add(cls);\r\n    }\r\n  } else {\r\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\r\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\r\n      el.setAttribute('class', (cur + cls).trim());\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Remove class with compatibility for SVG since classList is not supported on\r\n * SVG elements in IE\r\n */\r\nfunction removeClass (el, cls) {\r\n  /* istanbul ignore if */\r\n  if (!cls || !(cls = cls.trim())) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.classList) {\r\n    if (cls.indexOf(' ') > -1) {\r\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\r\n    } else {\r\n      el.classList.remove(cls);\r\n    }\r\n    if (!el.classList.length) {\r\n      el.removeAttribute('class');\r\n    }\r\n  } else {\r\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\r\n    var tar = ' ' + cls + ' ';\r\n    while (cur.indexOf(tar) >= 0) {\r\n      cur = cur.replace(tar, ' ');\r\n    }\r\n    cur = cur.trim();\r\n    if (cur) {\r\n      el.setAttribute('class', cur);\r\n    } else {\r\n      el.removeAttribute('class');\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction resolveTransition (def$$1) {\r\n  if (!def$$1) {\r\n    return\r\n  }\r\n  /* istanbul ignore else */\r\n  if (typeof def$$1 === 'object') {\r\n    var res = {};\r\n    if (def$$1.css !== false) {\r\n      extend(res, autoCssTransition(def$$1.name || 'v'));\r\n    }\r\n    extend(res, def$$1);\r\n    return res\r\n  } else if (typeof def$$1 === 'string') {\r\n    return autoCssTransition(def$$1)\r\n  }\r\n}\r\n\r\nvar autoCssTransition = cached(function (name) {\r\n  return {\r\n    enterClass: (name + \"-enter\"),\r\n    enterToClass: (name + \"-enter-to\"),\r\n    enterActiveClass: (name + \"-enter-active\"),\r\n    leaveClass: (name + \"-leave\"),\r\n    leaveToClass: (name + \"-leave-to\"),\r\n    leaveActiveClass: (name + \"-leave-active\")\r\n  }\r\n});\r\n\r\nvar hasTransition = inBrowser && !isIE9;\r\nvar TRANSITION = 'transition';\r\nvar ANIMATION = 'animation';\r\n\r\n// Transition property/event sniffing\r\nvar transitionProp = 'transition';\r\nvar transitionEndEvent = 'transitionend';\r\nvar animationProp = 'animation';\r\nvar animationEndEvent = 'animationend';\r\nif (hasTransition) {\r\n  /* istanbul ignore if */\r\n  if (window.ontransitionend === undefined &&\r\n    window.onwebkittransitionend !== undefined\r\n  ) {\r\n    transitionProp = 'WebkitTransition';\r\n    transitionEndEvent = 'webkitTransitionEnd';\r\n  }\r\n  if (window.onanimationend === undefined &&\r\n    window.onwebkitanimationend !== undefined\r\n  ) {\r\n    animationProp = 'WebkitAnimation';\r\n    animationEndEvent = 'webkitAnimationEnd';\r\n  }\r\n}\r\n\r\n// binding to window is necessary to make hot reload work in IE in strict mode\r\nvar raf = inBrowser && window.requestAnimationFrame\r\n  ? window.requestAnimationFrame.bind(window)\r\n  : setTimeout;\r\n\r\nfunction nextFrame (fn) {\r\n  raf(function () {\r\n    raf(fn);\r\n  });\r\n}\r\n\r\nfunction addTransitionClass (el, cls) {\r\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\r\n  if (transitionClasses.indexOf(cls) < 0) {\r\n    transitionClasses.push(cls);\r\n    addClass(el, cls);\r\n  }\r\n}\r\n\r\nfunction removeTransitionClass (el, cls) {\r\n  if (el._transitionClasses) {\r\n    remove(el._transitionClasses, cls);\r\n  }\r\n  removeClass(el, cls);\r\n}\r\n\r\nfunction whenTransitionEnds (\r\n  el,\r\n  expectedType,\r\n  cb\r\n) {\r\n  var ref = getTransitionInfo(el, expectedType);\r\n  var type = ref.type;\r\n  var timeout = ref.timeout;\r\n  var propCount = ref.propCount;\r\n  if (!type) { return cb() }\r\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\r\n  var ended = 0;\r\n  var end = function () {\r\n    el.removeEventListener(event, onEnd);\r\n    cb();\r\n  };\r\n  var onEnd = function (e) {\r\n    if (e.target === el) {\r\n      if (++ended >= propCount) {\r\n        end();\r\n      }\r\n    }\r\n  };\r\n  setTimeout(function () {\r\n    if (ended < propCount) {\r\n      end();\r\n    }\r\n  }, timeout + 1);\r\n  el.addEventListener(event, onEnd);\r\n}\r\n\r\nvar transformRE = /\\b(transform|all)(,|$)/;\r\n\r\nfunction getTransitionInfo (el, expectedType) {\r\n  var styles = window.getComputedStyle(el);\r\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\r\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\r\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\r\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\r\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\r\n\r\n  var type;\r\n  var timeout = 0;\r\n  var propCount = 0;\r\n  /* istanbul ignore if */\r\n  if (expectedType === TRANSITION) {\r\n    if (transitionTimeout > 0) {\r\n      type = TRANSITION;\r\n      timeout = transitionTimeout;\r\n      propCount = transitionDurations.length;\r\n    }\r\n  } else if (expectedType === ANIMATION) {\r\n    if (animationTimeout > 0) {\r\n      type = ANIMATION;\r\n      timeout = animationTimeout;\r\n      propCount = animationDurations.length;\r\n    }\r\n  } else {\r\n    timeout = Math.max(transitionTimeout, animationTimeout);\r\n    type = timeout > 0\r\n      ? transitionTimeout > animationTimeout\r\n        ? TRANSITION\r\n        : ANIMATION\r\n      : null;\r\n    propCount = type\r\n      ? type === TRANSITION\r\n        ? transitionDurations.length\r\n        : animationDurations.length\r\n      : 0;\r\n  }\r\n  var hasTransform =\r\n    type === TRANSITION &&\r\n    transformRE.test(styles[transitionProp + 'Property']);\r\n  return {\r\n    type: type,\r\n    timeout: timeout,\r\n    propCount: propCount,\r\n    hasTransform: hasTransform\r\n  }\r\n}\r\n\r\nfunction getTimeout (delays, durations) {\r\n  /* istanbul ignore next */\r\n  while (delays.length < durations.length) {\r\n    delays = delays.concat(delays);\r\n  }\r\n\r\n  return Math.max.apply(null, durations.map(function (d, i) {\r\n    return toMs(d) + toMs(delays[i])\r\n  }))\r\n}\r\n\r\nfunction toMs (s) {\r\n  return Number(s.slice(0, -1)) * 1000\r\n}\r\n\r\n/*  */\r\n\r\nfunction enter (vnode, toggleDisplay) {\r\n  var el = vnode.elm;\r\n\r\n  // call leave callback now\r\n  if (isDef(el._leaveCb)) {\r\n    el._leaveCb.cancelled = true;\r\n    el._leaveCb();\r\n  }\r\n\r\n  var data = resolveTransition(vnode.data.transition);\r\n  if (isUndef(data)) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore if */\r\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\r\n    return\r\n  }\r\n\r\n  var css = data.css;\r\n  var type = data.type;\r\n  var enterClass = data.enterClass;\r\n  var enterToClass = data.enterToClass;\r\n  var enterActiveClass = data.enterActiveClass;\r\n  var appearClass = data.appearClass;\r\n  var appearToClass = data.appearToClass;\r\n  var appearActiveClass = data.appearActiveClass;\r\n  var beforeEnter = data.beforeEnter;\r\n  var enter = data.enter;\r\n  var afterEnter = data.afterEnter;\r\n  var enterCancelled = data.enterCancelled;\r\n  var beforeAppear = data.beforeAppear;\r\n  var appear = data.appear;\r\n  var afterAppear = data.afterAppear;\r\n  var appearCancelled = data.appearCancelled;\r\n  var duration = data.duration;\r\n\r\n  // activeInstance will always be the <transition> component managing this\r\n  // transition. One edge case to check is when the <transition> is placed\r\n  // as the root node of a child component. In that case we need to check\r\n  // <transition>'s parent for appear check.\r\n  var context = activeInstance;\r\n  var transitionNode = activeInstance.$vnode;\r\n  while (transitionNode && transitionNode.parent) {\r\n    transitionNode = transitionNode.parent;\r\n    context = transitionNode.context;\r\n  }\r\n\r\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\r\n\r\n  if (isAppear && !appear && appear !== '') {\r\n    return\r\n  }\r\n\r\n  var startClass = isAppear && appearClass\r\n    ? appearClass\r\n    : enterClass;\r\n  var activeClass = isAppear && appearActiveClass\r\n    ? appearActiveClass\r\n    : enterActiveClass;\r\n  var toClass = isAppear && appearToClass\r\n    ? appearToClass\r\n    : enterToClass;\r\n\r\n  var beforeEnterHook = isAppear\r\n    ? (beforeAppear || beforeEnter)\r\n    : beforeEnter;\r\n  var enterHook = isAppear\r\n    ? (typeof appear === 'function' ? appear : enter)\r\n    : enter;\r\n  var afterEnterHook = isAppear\r\n    ? (afterAppear || afterEnter)\r\n    : afterEnter;\r\n  var enterCancelledHook = isAppear\r\n    ? (appearCancelled || enterCancelled)\r\n    : enterCancelled;\r\n\r\n  var explicitEnterDuration = toNumber(\r\n    isObject(duration)\r\n      ? duration.enter\r\n      : duration\r\n  );\r\n\r\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\r\n    checkDuration(explicitEnterDuration, 'enter', vnode);\r\n  }\r\n\r\n  var expectsCSS = css !== false && !isIE9;\r\n  var userWantsControl = getHookArgumentsLength(enterHook);\r\n\r\n  var cb = el._enterCb = once(function () {\r\n    if (expectsCSS) {\r\n      removeTransitionClass(el, toClass);\r\n      removeTransitionClass(el, activeClass);\r\n    }\r\n    if (cb.cancelled) {\r\n      if (expectsCSS) {\r\n        removeTransitionClass(el, startClass);\r\n      }\r\n      enterCancelledHook && enterCancelledHook(el);\r\n    } else {\r\n      afterEnterHook && afterEnterHook(el);\r\n    }\r\n    el._enterCb = null;\r\n  });\r\n\r\n  if (!vnode.data.show) {\r\n    // remove pending leave element on enter by injecting an insert hook\r\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\r\n      var parent = el.parentNode;\r\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\r\n      if (pendingNode &&\r\n        pendingNode.tag === vnode.tag &&\r\n        pendingNode.elm._leaveCb\r\n      ) {\r\n        pendingNode.elm._leaveCb();\r\n      }\r\n      enterHook && enterHook(el, cb);\r\n    });\r\n  }\r\n\r\n  // start enter transition\r\n  beforeEnterHook && beforeEnterHook(el);\r\n  if (expectsCSS) {\r\n    addTransitionClass(el, startClass);\r\n    addTransitionClass(el, activeClass);\r\n    nextFrame(function () {\r\n      addTransitionClass(el, toClass);\r\n      removeTransitionClass(el, startClass);\r\n      if (!cb.cancelled && !userWantsControl) {\r\n        if (isValidDuration(explicitEnterDuration)) {\r\n          setTimeout(cb, explicitEnterDuration);\r\n        } else {\r\n          whenTransitionEnds(el, type, cb);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  if (vnode.data.show) {\r\n    toggleDisplay && toggleDisplay();\r\n    enterHook && enterHook(el, cb);\r\n  }\r\n\r\n  if (!expectsCSS && !userWantsControl) {\r\n    cb();\r\n  }\r\n}\r\n\r\nfunction leave (vnode, rm) {\r\n  var el = vnode.elm;\r\n\r\n  // call enter callback now\r\n  if (isDef(el._enterCb)) {\r\n    el._enterCb.cancelled = true;\r\n    el._enterCb();\r\n  }\r\n\r\n  var data = resolveTransition(vnode.data.transition);\r\n  if (isUndef(data)) {\r\n    return rm()\r\n  }\r\n\r\n  /* istanbul ignore if */\r\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\r\n    return\r\n  }\r\n\r\n  var css = data.css;\r\n  var type = data.type;\r\n  var leaveClass = data.leaveClass;\r\n  var leaveToClass = data.leaveToClass;\r\n  var leaveActiveClass = data.leaveActiveClass;\r\n  var beforeLeave = data.beforeLeave;\r\n  var leave = data.leave;\r\n  var afterLeave = data.afterLeave;\r\n  var leaveCancelled = data.leaveCancelled;\r\n  var delayLeave = data.delayLeave;\r\n  var duration = data.duration;\r\n\r\n  var expectsCSS = css !== false && !isIE9;\r\n  var userWantsControl = getHookArgumentsLength(leave);\r\n\r\n  var explicitLeaveDuration = toNumber(\r\n    isObject(duration)\r\n      ? duration.leave\r\n      : duration\r\n  );\r\n\r\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\r\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\r\n  }\r\n\r\n  var cb = el._leaveCb = once(function () {\r\n    if (el.parentNode && el.parentNode._pending) {\r\n      el.parentNode._pending[vnode.key] = null;\r\n    }\r\n    if (expectsCSS) {\r\n      removeTransitionClass(el, leaveToClass);\r\n      removeTransitionClass(el, leaveActiveClass);\r\n    }\r\n    if (cb.cancelled) {\r\n      if (expectsCSS) {\r\n        removeTransitionClass(el, leaveClass);\r\n      }\r\n      leaveCancelled && leaveCancelled(el);\r\n    } else {\r\n      rm();\r\n      afterLeave && afterLeave(el);\r\n    }\r\n    el._leaveCb = null;\r\n  });\r\n\r\n  if (delayLeave) {\r\n    delayLeave(performLeave);\r\n  } else {\r\n    performLeave();\r\n  }\r\n\r\n  function performLeave () {\r\n    // the delayed leave may have already been cancelled\r\n    if (cb.cancelled) {\r\n      return\r\n    }\r\n    // record leaving element\r\n    if (!vnode.data.show) {\r\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\r\n    }\r\n    beforeLeave && beforeLeave(el);\r\n    if (expectsCSS) {\r\n      addTransitionClass(el, leaveClass);\r\n      addTransitionClass(el, leaveActiveClass);\r\n      nextFrame(function () {\r\n        addTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveClass);\r\n        if (!cb.cancelled && !userWantsControl) {\r\n          if (isValidDuration(explicitLeaveDuration)) {\r\n            setTimeout(cb, explicitLeaveDuration);\r\n          } else {\r\n            whenTransitionEnds(el, type, cb);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    leave && leave(el, cb);\r\n    if (!expectsCSS && !userWantsControl) {\r\n      cb();\r\n    }\r\n  }\r\n}\r\n\r\n// only used in dev mode\r\nfunction checkDuration (val, name, vnode) {\r\n  if (typeof val !== 'number') {\r\n    warn(\r\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\r\n      \"got \" + (JSON.stringify(val)) + \".\",\r\n      vnode.context\r\n    );\r\n  } else if (isNaN(val)) {\r\n    warn(\r\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\r\n      'the duration expression might be incorrect.',\r\n      vnode.context\r\n    );\r\n  }\r\n}\r\n\r\nfunction isValidDuration (val) {\r\n  return typeof val === 'number' && !isNaN(val)\r\n}\r\n\r\n/**\r\n * Normalize a transition hook's argument length. The hook may be:\r\n * - a merged hook (invoker) with the original in .fns\r\n * - a wrapped component method (check ._length)\r\n * - a plain function (.length)\r\n */\r\nfunction getHookArgumentsLength (fn) {\r\n  if (isUndef(fn)) {\r\n    return false\r\n  }\r\n  var invokerFns = fn.fns;\r\n  if (isDef(invokerFns)) {\r\n    // invoker\r\n    return getHookArgumentsLength(\r\n      Array.isArray(invokerFns)\r\n        ? invokerFns[0]\r\n        : invokerFns\r\n    )\r\n  } else {\r\n    return (fn._length || fn.length) > 1\r\n  }\r\n}\r\n\r\nfunction _enter (_, vnode) {\r\n  if (vnode.data.show !== true) {\r\n    enter(vnode);\r\n  }\r\n}\r\n\r\nvar transition = inBrowser ? {\r\n  create: _enter,\r\n  activate: _enter,\r\n  remove: function remove$$1 (vnode, rm) {\r\n    /* istanbul ignore else */\r\n    if (vnode.data.show !== true) {\r\n      leave(vnode, rm);\r\n    } else {\r\n      rm();\r\n    }\r\n  }\r\n} : {};\r\n\r\nvar platformModules = [\r\n  attrs,\r\n  klass,\r\n  events,\r\n  domProps,\r\n  style,\r\n  transition\r\n];\r\n\r\n/*  */\r\n\r\n// the directive module should be applied last, after all\r\n// built-in modules have been applied.\r\nvar modules = platformModules.concat(baseModules);\r\n\r\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\r\n\r\n/**\r\n * Not type checking this file because flow doesn't like attaching\r\n * properties to Elements.\r\n */\r\n\r\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\r\n\r\n/* istanbul ignore if */\r\nif (isIE9) {\r\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\r\n  document.addEventListener('selectionchange', function () {\r\n    var el = document.activeElement;\r\n    if (el && el.vmodel) {\r\n      trigger(el, 'input');\r\n    }\r\n  });\r\n}\r\n\r\nvar model$1 = {\r\n  inserted: function inserted (el, binding, vnode) {\r\n    if (vnode.tag === 'select') {\r\n      var cb = function () {\r\n        setSelected(el, binding, vnode.context);\r\n      };\r\n      cb();\r\n      /* istanbul ignore if */\r\n      if (isIE || isEdge) {\r\n        setTimeout(cb, 0);\r\n      }\r\n      el._vOptions = [].map.call(el.options, getValue);\r\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\r\n      el._vModifiers = binding.modifiers;\r\n      if (!binding.modifiers.lazy) {\r\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n        // switching focus before confirming composition choice\r\n        // this also fixes the issue where some browsers e.g. iOS Chrome\r\n        // fires \"change\" instead of \"input\" on autocomplete.\r\n        el.addEventListener('change', onCompositionEnd);\r\n        if (!isAndroid) {\r\n          el.addEventListener('compositionstart', onCompositionStart);\r\n          el.addEventListener('compositionend', onCompositionEnd);\r\n        }\r\n        /* istanbul ignore if */\r\n        if (isIE9) {\r\n          el.vmodel = true;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  componentUpdated: function componentUpdated (el, binding, vnode) {\r\n    if (vnode.tag === 'select') {\r\n      setSelected(el, binding, vnode.context);\r\n      // in case the options rendered by v-for have changed,\r\n      // it's possible that the value is out-of-sync with the rendered options.\r\n      // detect such cases and filter out values that no longer has a matching\r\n      // option in the DOM.\r\n      var prevOptions = el._vOptions;\r\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\r\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\r\n        trigger(el, 'change');\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction setSelected (el, binding, vm) {\r\n  var value = binding.value;\r\n  var isMultiple = el.multiple;\r\n  if (isMultiple && !Array.isArray(value)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\r\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\r\n      vm\r\n    );\r\n    return\r\n  }\r\n  var selected, option;\r\n  for (var i = 0, l = el.options.length; i < l; i++) {\r\n    option = el.options[i];\r\n    if (isMultiple) {\r\n      selected = looseIndexOf(value, getValue(option)) > -1;\r\n      if (option.selected !== selected) {\r\n        option.selected = selected;\r\n      }\r\n    } else {\r\n      if (looseEqual(getValue(option), value)) {\r\n        if (el.selectedIndex !== i) {\r\n          el.selectedIndex = i;\r\n        }\r\n        return\r\n      }\r\n    }\r\n  }\r\n  if (!isMultiple) {\r\n    el.selectedIndex = -1;\r\n  }\r\n}\r\n\r\nfunction getValue (option) {\r\n  return '_value' in option\r\n    ? option._value\r\n    : option.value\r\n}\r\n\r\nfunction onCompositionStart (e) {\r\n  e.target.composing = true;\r\n}\r\n\r\nfunction onCompositionEnd (e) {\r\n  // prevent triggering an input event for no reason\r\n  if (!e.target.composing) { return }\r\n  e.target.composing = false;\r\n  trigger(e.target, 'input');\r\n}\r\n\r\nfunction trigger (el, type) {\r\n  var e = document.createEvent('HTMLEvents');\r\n  e.initEvent(type, true, true);\r\n  el.dispatchEvent(e);\r\n}\r\n\r\n/*  */\r\n\r\n// recursively search for possible transition defined inside the component root\r\nfunction locateNode (vnode) {\r\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\r\n    ? locateNode(vnode.componentInstance._vnode)\r\n    : vnode\r\n}\r\n\r\nvar show = {\r\n  bind: function bind (el, ref, vnode) {\r\n    var value = ref.value;\r\n\r\n    vnode = locateNode(vnode);\r\n    var transition$$1 = vnode.data && vnode.data.transition;\r\n    var originalDisplay = el.__vOriginalDisplay =\r\n      el.style.display === 'none' ? '' : el.style.display;\r\n    if (value && transition$$1) {\r\n      vnode.data.show = true;\r\n      enter(vnode, function () {\r\n        el.style.display = originalDisplay;\r\n      });\r\n    } else {\r\n      el.style.display = value ? originalDisplay : 'none';\r\n    }\r\n  },\r\n\r\n  update: function update (el, ref, vnode) {\r\n    var value = ref.value;\r\n    var oldValue = ref.oldValue;\r\n\r\n    /* istanbul ignore if */\r\n    if (value === oldValue) { return }\r\n    vnode = locateNode(vnode);\r\n    var transition$$1 = vnode.data && vnode.data.transition;\r\n    if (transition$$1) {\r\n      vnode.data.show = true;\r\n      if (value) {\r\n        enter(vnode, function () {\r\n          el.style.display = el.__vOriginalDisplay;\r\n        });\r\n      } else {\r\n        leave(vnode, function () {\r\n          el.style.display = 'none';\r\n        });\r\n      }\r\n    } else {\r\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\r\n    }\r\n  },\r\n\r\n  unbind: function unbind (\r\n    el,\r\n    binding,\r\n    vnode,\r\n    oldVnode,\r\n    isDestroy\r\n  ) {\r\n    if (!isDestroy) {\r\n      el.style.display = el.__vOriginalDisplay;\r\n    }\r\n  }\r\n};\r\n\r\nvar platformDirectives = {\r\n  model: model$1,\r\n  show: show\r\n};\r\n\r\n/*  */\r\n\r\n// Provides transition support for a single element/component.\r\n// supports transition mode (out-in / in-out)\r\n\r\nvar transitionProps = {\r\n  name: String,\r\n  appear: Boolean,\r\n  css: Boolean,\r\n  mode: String,\r\n  type: String,\r\n  enterClass: String,\r\n  leaveClass: String,\r\n  enterToClass: String,\r\n  leaveToClass: String,\r\n  enterActiveClass: String,\r\n  leaveActiveClass: String,\r\n  appearClass: String,\r\n  appearActiveClass: String,\r\n  appearToClass: String,\r\n  duration: [Number, String, Object]\r\n};\r\n\r\n// in case the child is also an abstract component, e.g. <keep-alive>\r\n// we want to recursively retrieve the real component to be rendered\r\nfunction getRealChild (vnode) {\r\n  var compOptions = vnode && vnode.componentOptions;\r\n  if (compOptions && compOptions.Ctor.options.abstract) {\r\n    return getRealChild(getFirstComponentChild(compOptions.children))\r\n  } else {\r\n    return vnode\r\n  }\r\n}\r\n\r\nfunction extractTransitionData (comp) {\r\n  var data = {};\r\n  var options = comp.$options;\r\n  // props\r\n  for (var key in options.propsData) {\r\n    data[key] = comp[key];\r\n  }\r\n  // events.\r\n  // extract listeners and pass them directly to the transition methods\r\n  var listeners = options._parentListeners;\r\n  for (var key$1 in listeners) {\r\n    data[camelize(key$1)] = listeners[key$1];\r\n  }\r\n  return data\r\n}\r\n\r\nfunction placeholder (h, rawChild) {\r\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\r\n    return h('keep-alive', {\r\n      props: rawChild.componentOptions.propsData\r\n    })\r\n  }\r\n}\r\n\r\nfunction hasParentTransition (vnode) {\r\n  while ((vnode = vnode.parent)) {\r\n    if (vnode.data.transition) {\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nfunction isSameChild (child, oldChild) {\r\n  return oldChild.key === child.key && oldChild.tag === child.tag\r\n}\r\n\r\nfunction isAsyncPlaceholder (node) {\r\n  return node.isComment && node.asyncFactory\r\n}\r\n\r\nvar Transition = {\r\n  name: 'transition',\r\n  props: transitionProps,\r\n  abstract: true,\r\n\r\n  render: function render (h) {\r\n    var this$1 = this;\r\n\r\n    var children = this.$options._renderChildren;\r\n    if (!children) {\r\n      return\r\n    }\r\n\r\n    // filter out text nodes (possible whitespaces)\r\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\r\n    /* istanbul ignore if */\r\n    if (!children.length) {\r\n      return\r\n    }\r\n\r\n    // warn multiple elements\r\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\r\n      warn(\r\n        '<transition> can only be used on a single element. Use ' +\r\n        '<transition-group> for lists.',\r\n        this.$parent\r\n      );\r\n    }\r\n\r\n    var mode = this.mode;\r\n\r\n    // warn invalid mode\r\n    if (process.env.NODE_ENV !== 'production' &&\r\n      mode && mode !== 'in-out' && mode !== 'out-in'\r\n    ) {\r\n      warn(\r\n        'invalid <transition> mode: ' + mode,\r\n        this.$parent\r\n      );\r\n    }\r\n\r\n    var rawChild = children[0];\r\n\r\n    // if this is a component root node and the component's\r\n    // parent container node also has transition, skip.\r\n    if (hasParentTransition(this.$vnode)) {\r\n      return rawChild\r\n    }\r\n\r\n    // apply transition data to child\r\n    // use getRealChild() to ignore abstract components e.g. keep-alive\r\n    var child = getRealChild(rawChild);\r\n    /* istanbul ignore if */\r\n    if (!child) {\r\n      return rawChild\r\n    }\r\n\r\n    if (this._leaving) {\r\n      return placeholder(h, rawChild)\r\n    }\r\n\r\n    // ensure a key that is unique to the vnode type and to this transition\r\n    // component instance. This key will be used to remove pending leaving nodes\r\n    // during entering.\r\n    var id = \"__transition-\" + (this._uid) + \"-\";\r\n    child.key = child.key == null\r\n      ? child.isComment\r\n        ? id + 'comment'\r\n        : id + child.tag\r\n      : isPrimitive(child.key)\r\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\r\n        : child.key;\r\n\r\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\r\n    var oldRawChild = this._vnode;\r\n    var oldChild = getRealChild(oldRawChild);\r\n\r\n    // mark v-show\r\n    // so that the transition module can hand over the control to the directive\r\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\r\n      child.data.show = true;\r\n    }\r\n\r\n    if (\r\n      oldChild &&\r\n      oldChild.data &&\r\n      !isSameChild(child, oldChild) &&\r\n      !isAsyncPlaceholder(oldChild)\r\n    ) {\r\n      // replace old child transition data with fresh one\r\n      // important for dynamic transitions!\r\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\r\n      // handle transition mode\r\n      if (mode === 'out-in') {\r\n        // return placeholder node and queue update when leave finishes\r\n        this._leaving = true;\r\n        mergeVNodeHook(oldData, 'afterLeave', function () {\r\n          this$1._leaving = false;\r\n          this$1.$forceUpdate();\r\n        });\r\n        return placeholder(h, rawChild)\r\n      } else if (mode === 'in-out') {\r\n        if (isAsyncPlaceholder(child)) {\r\n          return oldRawChild\r\n        }\r\n        var delayedLeave;\r\n        var performLeave = function () { delayedLeave(); };\r\n        mergeVNodeHook(data, 'afterEnter', performLeave);\r\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\r\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\r\n      }\r\n    }\r\n\r\n    return rawChild\r\n  }\r\n};\r\n\r\n/*  */\r\n\r\n// Provides transition support for list items.\r\n// supports move transitions using the FLIP technique.\r\n\r\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\r\n// it doesn't guarantee the relative positioning of removed elements,\r\n// we force transition-group to update its children into two passes:\r\n// in the first pass, we remove all nodes that need to be removed,\r\n// triggering their leaving transition; in the second pass, we insert/move\r\n// into the final desired state. This way in the second pass removed\r\n// nodes will remain where they should be.\r\n\r\nvar props = extend({\r\n  tag: String,\r\n  moveClass: String\r\n}, transitionProps);\r\n\r\ndelete props.mode;\r\n\r\nvar TransitionGroup = {\r\n  props: props,\r\n\r\n  render: function render (h) {\r\n    var tag = this.tag || this.$vnode.data.tag || 'span';\r\n    var map = Object.create(null);\r\n    var prevChildren = this.prevChildren = this.children;\r\n    var rawChildren = this.$slots.default || [];\r\n    var children = this.children = [];\r\n    var transitionData = extractTransitionData(this);\r\n\r\n    for (var i = 0; i < rawChildren.length; i++) {\r\n      var c = rawChildren[i];\r\n      if (c.tag) {\r\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\r\n          children.push(c);\r\n          map[c.key] = c\r\n          ;(c.data || (c.data = {})).transition = transitionData;\r\n        } else if (process.env.NODE_ENV !== 'production') {\r\n          var opts = c.componentOptions;\r\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\r\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (prevChildren) {\r\n      var kept = [];\r\n      var removed = [];\r\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\r\n        var c$1 = prevChildren[i$1];\r\n        c$1.data.transition = transitionData;\r\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\r\n        if (map[c$1.key]) {\r\n          kept.push(c$1);\r\n        } else {\r\n          removed.push(c$1);\r\n        }\r\n      }\r\n      this.kept = h(tag, null, kept);\r\n      this.removed = removed;\r\n    }\r\n\r\n    return h(tag, null, children)\r\n  },\r\n\r\n  beforeUpdate: function beforeUpdate () {\r\n    // force removing pass\r\n    this.__patch__(\r\n      this._vnode,\r\n      this.kept,\r\n      false, // hydrating\r\n      true // removeOnly (!important, avoids unnecessary moves)\r\n    );\r\n    this._vnode = this.kept;\r\n  },\r\n\r\n  updated: function updated () {\r\n    var children = this.prevChildren;\r\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\r\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\r\n      return\r\n    }\r\n\r\n    // we divide the work into three loops to avoid mixing DOM reads and writes\r\n    // in each iteration - which helps prevent layout thrashing.\r\n    children.forEach(callPendingCbs);\r\n    children.forEach(recordPosition);\r\n    children.forEach(applyTranslation);\r\n\r\n    // force reflow to put everything in position\r\n    var body = document.body;\r\n    var f = body.offsetHeight; // eslint-disable-line\r\n\r\n    children.forEach(function (c) {\r\n      if (c.data.moved) {\r\n        var el = c.elm;\r\n        var s = el.style;\r\n        addTransitionClass(el, moveClass);\r\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\r\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\r\n          if (!e || /transform$/.test(e.propertyName)) {\r\n            el.removeEventListener(transitionEndEvent, cb);\r\n            el._moveCb = null;\r\n            removeTransitionClass(el, moveClass);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    hasMove: function hasMove (el, moveClass) {\r\n      /* istanbul ignore if */\r\n      if (!hasTransition) {\r\n        return false\r\n      }\r\n      /* istanbul ignore if */\r\n      if (this._hasMove) {\r\n        return this._hasMove\r\n      }\r\n      // Detect whether an element with the move class applied has\r\n      // CSS transitions. Since the element may be inside an entering\r\n      // transition at this very moment, we make a clone of it and remove\r\n      // all other transition classes applied to ensure only the move class\r\n      // is applied.\r\n      var clone = el.cloneNode();\r\n      if (el._transitionClasses) {\r\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\r\n      }\r\n      addClass(clone, moveClass);\r\n      clone.style.display = 'none';\r\n      this.$el.appendChild(clone);\r\n      var info = getTransitionInfo(clone);\r\n      this.$el.removeChild(clone);\r\n      return (this._hasMove = info.hasTransform)\r\n    }\r\n  }\r\n};\r\n\r\nfunction callPendingCbs (c) {\r\n  /* istanbul ignore if */\r\n  if (c.elm._moveCb) {\r\n    c.elm._moveCb();\r\n  }\r\n  /* istanbul ignore if */\r\n  if (c.elm._enterCb) {\r\n    c.elm._enterCb();\r\n  }\r\n}\r\n\r\nfunction recordPosition (c) {\r\n  c.data.newPos = c.elm.getBoundingClientRect();\r\n}\r\n\r\nfunction applyTranslation (c) {\r\n  var oldPos = c.data.pos;\r\n  var newPos = c.data.newPos;\r\n  var dx = oldPos.left - newPos.left;\r\n  var dy = oldPos.top - newPos.top;\r\n  if (dx || dy) {\r\n    c.data.moved = true;\r\n    var s = c.elm.style;\r\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\r\n    s.transitionDuration = '0s';\r\n  }\r\n}\r\n\r\nvar platformComponents = {\r\n  Transition: Transition,\r\n  TransitionGroup: TransitionGroup\r\n};\r\n\r\n/*  */\r\n\r\n// install platform specific utils\r\nVue$3.config.mustUseProp = mustUseProp;\r\nVue$3.config.isReservedTag = isReservedTag;\r\nVue$3.config.isReservedAttr = isReservedAttr;\r\nVue$3.config.getTagNamespace = getTagNamespace;\r\nVue$3.config.isUnknownElement = isUnknownElement;\r\n\r\n// install platform runtime directives & components\r\nextend(Vue$3.options.directives, platformDirectives);\r\nextend(Vue$3.options.components, platformComponents);\r\n\r\n// install platform patch function\r\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\r\n\r\n// public mount method\r\nVue$3.prototype.$mount = function (\r\n  el,\r\n  hydrating\r\n) {\r\n  el = el && inBrowser ? query(el) : undefined;\r\n  return mountComponent(this, el, hydrating)\r\n};\r\n\r\n// devtools global hook\r\n/* istanbul ignore next */\r\nsetTimeout(function () {\r\n  if (config.devtools) {\r\n    if (devtools) {\r\n      devtools.emit('init', Vue$3);\r\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\r\n      console[console.info ? 'info' : 'log'](\r\n        'Download the Vue Devtools extension for a better development experience:\\n' +\r\n        'https://github.com/vuejs/vue-devtools'\r\n      );\r\n    }\r\n  }\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n    config.productionTip !== false &&\r\n    inBrowser && typeof console !== 'undefined'\r\n  ) {\r\n    console[console.info ? 'info' : 'log'](\r\n      \"You are running Vue in development mode.\\n\" +\r\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\r\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\r\n    );\r\n  }\r\n}, 0);\r\n\r\n/*  */\r\n\r\n// check whether current browser encodes a char inside attribute values\r\nfunction shouldDecode (content, encoded) {\r\n  var div = document.createElement('div');\r\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\"/>\";\r\n  return div.innerHTML.indexOf(encoded) > 0\r\n}\r\n\r\n// #3663\r\n// IE encodes newlines inside attribute values while other browsers don't\r\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\r\n\r\n/*  */\r\n\r\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\r\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\n\r\nvar buildRegex = cached(function (delimiters) {\r\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\r\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\r\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\r\n});\r\n\r\nfunction parseText (\r\n  text,\r\n  delimiters\r\n) {\r\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\r\n  if (!tagRE.test(text)) {\r\n    return\r\n  }\r\n  var tokens = [];\r\n  var lastIndex = tagRE.lastIndex = 0;\r\n  var match, index;\r\n  while ((match = tagRE.exec(text))) {\r\n    index = match.index;\r\n    // push text token\r\n    if (index > lastIndex) {\r\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\r\n    }\r\n    // tag token\r\n    var exp = parseFilters(match[1].trim());\r\n    tokens.push((\"_s(\" + exp + \")\"));\r\n    lastIndex = index + match[0].length;\r\n  }\r\n  if (lastIndex < text.length) {\r\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\r\n  }\r\n  return tokens.join('+')\r\n}\r\n\r\n/*  */\r\n\r\nfunction transformNode (el, options) {\r\n  var warn = options.warn || baseWarn;\r\n  var staticClass = getAndRemoveAttr(el, 'class');\r\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\r\n    var expression = parseText(staticClass, options.delimiters);\r\n    if (expression) {\r\n      warn(\r\n        \"class=\\\"\" + staticClass + \"\\\": \" +\r\n        'Interpolation inside attributes has been removed. ' +\r\n        'Use v-bind or the colon shorthand instead. For example, ' +\r\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\r\n      );\r\n    }\r\n  }\r\n  if (staticClass) {\r\n    el.staticClass = JSON.stringify(staticClass);\r\n  }\r\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\r\n  if (classBinding) {\r\n    el.classBinding = classBinding;\r\n  }\r\n}\r\n\r\nfunction genData (el) {\r\n  var data = '';\r\n  if (el.staticClass) {\r\n    data += \"staticClass:\" + (el.staticClass) + \",\";\r\n  }\r\n  if (el.classBinding) {\r\n    data += \"class:\" + (el.classBinding) + \",\";\r\n  }\r\n  return data\r\n}\r\n\r\nvar klass$1 = {\r\n  staticKeys: ['staticClass'],\r\n  transformNode: transformNode,\r\n  genData: genData\r\n};\r\n\r\n/*  */\r\n\r\nfunction transformNode$1 (el, options) {\r\n  var warn = options.warn || baseWarn;\r\n  var staticStyle = getAndRemoveAttr(el, 'style');\r\n  if (staticStyle) {\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      var expression = parseText(staticStyle, options.delimiters);\r\n      if (expression) {\r\n        warn(\r\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\r\n          'Interpolation inside attributes has been removed. ' +\r\n          'Use v-bind or the colon shorthand instead. For example, ' +\r\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\r\n        );\r\n      }\r\n    }\r\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\r\n  }\r\n\r\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\r\n  if (styleBinding) {\r\n    el.styleBinding = styleBinding;\r\n  }\r\n}\r\n\r\nfunction genData$1 (el) {\r\n  var data = '';\r\n  if (el.staticStyle) {\r\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\r\n  }\r\n  if (el.styleBinding) {\r\n    data += \"style:(\" + (el.styleBinding) + \"),\";\r\n  }\r\n  return data\r\n}\r\n\r\nvar style$1 = {\r\n  staticKeys: ['staticStyle'],\r\n  transformNode: transformNode$1,\r\n  genData: genData$1\r\n};\r\n\r\nvar modules$1 = [\r\n  klass$1,\r\n  style$1\r\n];\r\n\r\n/*  */\r\n\r\nfunction text (el, dir) {\r\n  if (dir.value) {\r\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction html (el, dir) {\r\n  if (dir.value) {\r\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\r\n  }\r\n}\r\n\r\nvar directives$1 = {\r\n  model: model,\r\n  text: text,\r\n  html: html\r\n};\r\n\r\n/*  */\r\n\r\nvar isUnaryTag = makeMap(\r\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\r\n  'link,meta,param,source,track,wbr'\r\n);\r\n\r\n// Elements that you can, intentionally, leave open\r\n// (and which close themselves)\r\nvar canBeLeftOpenTag = makeMap(\r\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\r\n);\r\n\r\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\r\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\r\nvar isNonPhrasingTag = makeMap(\r\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\r\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\r\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\r\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\r\n  'title,tr,track'\r\n);\r\n\r\n/*  */\r\n\r\nvar baseOptions = {\r\n  expectHTML: true,\r\n  modules: modules$1,\r\n  directives: directives$1,\r\n  isPreTag: isPreTag,\r\n  isUnaryTag: isUnaryTag,\r\n  mustUseProp: mustUseProp,\r\n  canBeLeftOpenTag: canBeLeftOpenTag,\r\n  isReservedTag: isReservedTag,\r\n  getTagNamespace: getTagNamespace,\r\n  staticKeys: genStaticKeys(modules$1)\r\n};\r\n\r\n/*  */\r\n\r\nvar decoder;\r\n\r\nvar he = {\r\n  decode: function decode (html) {\r\n    decoder = decoder || document.createElement('div');\r\n    decoder.innerHTML = html;\r\n    return decoder.textContent\r\n  }\r\n};\r\n\r\n/**\r\n * Not type-checking this file because it's mostly vendor code.\r\n */\r\n\r\n/*!\r\n * HTML Parser By John Resig (ejohn.org)\r\n * Modified by Juriy \"kangax\" Zaytsev\r\n * Original code by Erik Arvidsson, Mozilla Public License\r\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\r\n */\r\n\r\n// Regular Expressions for parsing tags and attributes\r\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\r\nvar singleAttrAssign = /(?:=)/;\r\nvar singleAttrValues = [\r\n  // attr value double quotes\r\n  /\"([^\"]*)\"+/.source,\r\n  // attr value, single quotes\r\n  /'([^']*)'+/.source,\r\n  // attr value, no quotes\r\n  /([^\\s\"'=<>`]+)/.source\r\n];\r\nvar attribute = new RegExp(\r\n  '^\\\\s*' + singleAttrIdentifier.source +\r\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\r\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\r\n);\r\n\r\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\r\n// but for Vue templates we can enforce a simple charset\r\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\r\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\r\nvar startTagOpen = new RegExp('^<' + qnameCapture);\r\nvar startTagClose = /^\\s*(\\/?)>/;\r\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\r\nvar doctype = /^<!DOCTYPE [^>]+>/i;\r\nvar comment = /^<!--/;\r\nvar conditionalComment = /^<!\\[/;\r\n\r\nvar IS_REGEX_CAPTURING_BROKEN = false;\r\n'x'.replace(/x(.)?/g, function (m, g) {\r\n  IS_REGEX_CAPTURING_BROKEN = g === '';\r\n});\r\n\r\n// Special Elements (can contain anything)\r\nvar isPlainTextElement = makeMap('script,style,textarea', true);\r\nvar reCache = {};\r\n\r\nvar decodingMap = {\r\n  '&lt;': '<',\r\n  '&gt;': '>',\r\n  '&quot;': '\"',\r\n  '&amp;': '&',\r\n  '&#10;': '\\n'\r\n};\r\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\r\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\r\n\r\n// #5992\r\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\r\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\r\n\r\nfunction decodeAttr (value, shouldDecodeNewlines) {\r\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\r\n  return value.replace(re, function (match) { return decodingMap[match]; })\r\n}\r\n\r\nfunction parseHTML (html, options) {\r\n  var stack = [];\r\n  var expectHTML = options.expectHTML;\r\n  var isUnaryTag$$1 = options.isUnaryTag || no;\r\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\r\n  var index = 0;\r\n  var last, lastTag;\r\n  while (html) {\r\n    last = html;\r\n    // Make sure we're not in a plaintext content element like script/style\r\n    if (!lastTag || !isPlainTextElement(lastTag)) {\r\n      var textEnd = html.indexOf('<');\r\n      if (textEnd === 0) {\r\n        // Comment:\r\n        if (comment.test(html)) {\r\n          var commentEnd = html.indexOf('-->');\r\n\r\n          if (commentEnd >= 0) {\r\n            if (options.shouldKeepComment) {\r\n              options.comment(html.substring(4, commentEnd));\r\n            }\r\n            advance(commentEnd + 3);\r\n            continue\r\n          }\r\n        }\r\n\r\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\r\n        if (conditionalComment.test(html)) {\r\n          var conditionalEnd = html.indexOf(']>');\r\n\r\n          if (conditionalEnd >= 0) {\r\n            advance(conditionalEnd + 2);\r\n            continue\r\n          }\r\n        }\r\n\r\n        // Doctype:\r\n        var doctypeMatch = html.match(doctype);\r\n        if (doctypeMatch) {\r\n          advance(doctypeMatch[0].length);\r\n          continue\r\n        }\r\n\r\n        // End tag:\r\n        var endTagMatch = html.match(endTag);\r\n        if (endTagMatch) {\r\n          var curIndex = index;\r\n          advance(endTagMatch[0].length);\r\n          parseEndTag(endTagMatch[1], curIndex, index);\r\n          continue\r\n        }\r\n\r\n        // Start tag:\r\n        var startTagMatch = parseStartTag();\r\n        if (startTagMatch) {\r\n          handleStartTag(startTagMatch);\r\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\r\n            advance(1);\r\n          }\r\n          continue\r\n        }\r\n      }\r\n\r\n      var text = (void 0), rest = (void 0), next = (void 0);\r\n      if (textEnd >= 0) {\r\n        rest = html.slice(textEnd);\r\n        while (\r\n          !endTag.test(rest) &&\r\n          !startTagOpen.test(rest) &&\r\n          !comment.test(rest) &&\r\n          !conditionalComment.test(rest)\r\n        ) {\r\n          // < in plain text, be forgiving and treat it as text\r\n          next = rest.indexOf('<', 1);\r\n          if (next < 0) { break }\r\n          textEnd += next;\r\n          rest = html.slice(textEnd);\r\n        }\r\n        text = html.substring(0, textEnd);\r\n        advance(textEnd);\r\n      }\r\n\r\n      if (textEnd < 0) {\r\n        text = html;\r\n        html = '';\r\n      }\r\n\r\n      if (options.chars && text) {\r\n        options.chars(text);\r\n      }\r\n    } else {\r\n      var endTagLength = 0;\r\n      var stackedTag = lastTag.toLowerCase();\r\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\r\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\r\n        endTagLength = endTag.length;\r\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\r\n          text = text\r\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\r\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\r\n        }\r\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\r\n          text = text.slice(1);\r\n        }\r\n        if (options.chars) {\r\n          options.chars(text);\r\n        }\r\n        return ''\r\n      });\r\n      index += html.length - rest$1.length;\r\n      html = rest$1;\r\n      parseEndTag(stackedTag, index - endTagLength, index);\r\n    }\r\n\r\n    if (html === last) {\r\n      options.chars && options.chars(html);\r\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\r\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  // Clean up any remaining tags\r\n  parseEndTag();\r\n\r\n  function advance (n) {\r\n    index += n;\r\n    html = html.substring(n);\r\n  }\r\n\r\n  function parseStartTag () {\r\n    var start = html.match(startTagOpen);\r\n    if (start) {\r\n      var match = {\r\n        tagName: start[1],\r\n        attrs: [],\r\n        start: index\r\n      };\r\n      advance(start[0].length);\r\n      var end, attr;\r\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n        advance(attr[0].length);\r\n        match.attrs.push(attr);\r\n      }\r\n      if (end) {\r\n        match.unarySlash = end[1];\r\n        advance(end[0].length);\r\n        match.end = index;\r\n        return match\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleStartTag (match) {\r\n    var tagName = match.tagName;\r\n    var unarySlash = match.unarySlash;\r\n\r\n    if (expectHTML) {\r\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\r\n        parseEndTag(lastTag);\r\n      }\r\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\r\n        parseEndTag(tagName);\r\n      }\r\n    }\r\n\r\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\r\n\r\n    var l = match.attrs.length;\r\n    var attrs = new Array(l);\r\n    for (var i = 0; i < l; i++) {\r\n      var args = match.attrs[i];\r\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\r\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\r\n        if (args[3] === '') { delete args[3]; }\r\n        if (args[4] === '') { delete args[4]; }\r\n        if (args[5] === '') { delete args[5]; }\r\n      }\r\n      var value = args[3] || args[4] || args[5] || '';\r\n      attrs[i] = {\r\n        name: args[1],\r\n        value: decodeAttr(\r\n          value,\r\n          options.shouldDecodeNewlines\r\n        )\r\n      };\r\n    }\r\n\r\n    if (!unary) {\r\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\r\n      lastTag = tagName;\r\n    }\r\n\r\n    if (options.start) {\r\n      options.start(tagName, attrs, unary, match.start, match.end);\r\n    }\r\n  }\r\n\r\n  function parseEndTag (tagName, start, end) {\r\n    var pos, lowerCasedTagName;\r\n    if (start == null) { start = index; }\r\n    if (end == null) { end = index; }\r\n\r\n    if (tagName) {\r\n      lowerCasedTagName = tagName.toLowerCase();\r\n    }\r\n\r\n    // Find the closest opened tag of the same type\r\n    if (tagName) {\r\n      for (pos = stack.length - 1; pos >= 0; pos--) {\r\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\r\n          break\r\n        }\r\n      }\r\n    } else {\r\n      // If no tag name is provided, clean shop\r\n      pos = 0;\r\n    }\r\n\r\n    if (pos >= 0) {\r\n      // Close all the open elements, up the stack\r\n      for (var i = stack.length - 1; i >= pos; i--) {\r\n        if (process.env.NODE_ENV !== 'production' &&\r\n          (i > pos || !tagName) &&\r\n          options.warn\r\n        ) {\r\n          options.warn(\r\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\r\n          );\r\n        }\r\n        if (options.end) {\r\n          options.end(stack[i].tag, start, end);\r\n        }\r\n      }\r\n\r\n      // Remove the open elements from the stack\r\n      stack.length = pos;\r\n      lastTag = pos && stack[pos - 1].tag;\r\n    } else if (lowerCasedTagName === 'br') {\r\n      if (options.start) {\r\n        options.start(tagName, [], true, start, end);\r\n      }\r\n    } else if (lowerCasedTagName === 'p') {\r\n      if (options.start) {\r\n        options.start(tagName, [], false, start, end);\r\n      }\r\n      if (options.end) {\r\n        options.end(tagName, start, end);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar onRE = /^@|^v-on:/;\r\nvar dirRE = /^v-|^@|^:/;\r\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\r\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\r\n\r\nvar argRE = /:(.*)$/;\r\nvar bindRE = /^:|^v-bind:/;\r\nvar modifierRE = /\\.[^.]+/g;\r\n\r\nvar decodeHTMLCached = cached(he.decode);\r\n\r\n// configurable state\r\nvar warn$2;\r\nvar delimiters;\r\nvar transforms;\r\nvar preTransforms;\r\nvar postTransforms;\r\nvar platformIsPreTag;\r\nvar platformMustUseProp;\r\nvar platformGetTagNamespace;\r\n\r\n/**\r\n * Convert HTML string to AST.\r\n */\r\nfunction parse (\r\n  template,\r\n  options\r\n) {\r\n  warn$2 = options.warn || baseWarn;\r\n\r\n  platformIsPreTag = options.isPreTag || no;\r\n  platformMustUseProp = options.mustUseProp || no;\r\n  platformGetTagNamespace = options.getTagNamespace || no;\r\n\r\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\r\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\r\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\r\n\r\n  delimiters = options.delimiters;\r\n\r\n  var stack = [];\r\n  var preserveWhitespace = options.preserveWhitespace !== false;\r\n  var root;\r\n  var currentParent;\r\n  var inVPre = false;\r\n  var inPre = false;\r\n  var warned = false;\r\n\r\n  function warnOnce (msg) {\r\n    if (!warned) {\r\n      warned = true;\r\n      warn$2(msg);\r\n    }\r\n  }\r\n\r\n  function endPre (element) {\r\n    // check pre state\r\n    if (element.pre) {\r\n      inVPre = false;\r\n    }\r\n    if (platformIsPreTag(element.tag)) {\r\n      inPre = false;\r\n    }\r\n  }\r\n\r\n  parseHTML(template, {\r\n    warn: warn$2,\r\n    expectHTML: options.expectHTML,\r\n    isUnaryTag: options.isUnaryTag,\r\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\r\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\r\n    shouldKeepComment: options.comments,\r\n    start: function start (tag, attrs, unary) {\r\n      // check namespace.\r\n      // inherit parent ns if there is one\r\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\r\n\r\n      // handle IE svg bug\r\n      /* istanbul ignore if */\r\n      if (isIE && ns === 'svg') {\r\n        attrs = guardIESVGBug(attrs);\r\n      }\r\n\r\n      var element = {\r\n        type: 1,\r\n        tag: tag,\r\n        attrsList: attrs,\r\n        attrsMap: makeAttrsMap(attrs),\r\n        parent: currentParent,\r\n        children: []\r\n      };\r\n      if (ns) {\r\n        element.ns = ns;\r\n      }\r\n\r\n      if (isForbiddenTag(element) && !isServerRendering()) {\r\n        element.forbidden = true;\r\n        process.env.NODE_ENV !== 'production' && warn$2(\r\n          'Templates should only be responsible for mapping the state to the ' +\r\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\r\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\r\n        );\r\n      }\r\n\r\n      // apply pre-transforms\r\n      for (var i = 0; i < preTransforms.length; i++) {\r\n        preTransforms[i](element, options);\r\n      }\r\n\r\n      if (!inVPre) {\r\n        processPre(element);\r\n        if (element.pre) {\r\n          inVPre = true;\r\n        }\r\n      }\r\n      if (platformIsPreTag(element.tag)) {\r\n        inPre = true;\r\n      }\r\n      if (inVPre) {\r\n        processRawAttrs(element);\r\n      } else {\r\n        processFor(element);\r\n        processIf(element);\r\n        processOnce(element);\r\n        processKey(element);\r\n\r\n        // determine whether this is a plain element after\r\n        // removing structural attributes\r\n        element.plain = !element.key && !attrs.length;\r\n\r\n        processRef(element);\r\n        processSlot(element);\r\n        processComponent(element);\r\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\r\n          transforms[i$1](element, options);\r\n        }\r\n        processAttrs(element);\r\n      }\r\n\r\n      function checkRootConstraints (el) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (el.tag === 'slot' || el.tag === 'template') {\r\n            warnOnce(\r\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\r\n              'contain multiple nodes.'\r\n            );\r\n          }\r\n          if (el.attrsMap.hasOwnProperty('v-for')) {\r\n            warnOnce(\r\n              'Cannot use v-for on stateful component root element because ' +\r\n              'it renders multiple elements.'\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // tree management\r\n      if (!root) {\r\n        root = element;\r\n        checkRootConstraints(root);\r\n      } else if (!stack.length) {\r\n        // allow root elements with v-if, v-else-if and v-else\r\n        if (root.if && (element.elseif || element.else)) {\r\n          checkRootConstraints(element);\r\n          addIfCondition(root, {\r\n            exp: element.elseif,\r\n            block: element\r\n          });\r\n        } else if (process.env.NODE_ENV !== 'production') {\r\n          warnOnce(\r\n            \"Component template should contain exactly one root element. \" +\r\n            \"If you are using v-if on multiple elements, \" +\r\n            \"use v-else-if to chain them instead.\"\r\n          );\r\n        }\r\n      }\r\n      if (currentParent && !element.forbidden) {\r\n        if (element.elseif || element.else) {\r\n          processIfConditions(element, currentParent);\r\n        } else if (element.slotScope) { // scoped slot\r\n          currentParent.plain = false;\r\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\r\n        } else {\r\n          currentParent.children.push(element);\r\n          element.parent = currentParent;\r\n        }\r\n      }\r\n      if (!unary) {\r\n        currentParent = element;\r\n        stack.push(element);\r\n      } else {\r\n        endPre(element);\r\n      }\r\n      // apply post-transforms\r\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\r\n        postTransforms[i$2](element, options);\r\n      }\r\n    },\r\n\r\n    end: function end () {\r\n      // remove trailing whitespace\r\n      var element = stack[stack.length - 1];\r\n      var lastNode = element.children[element.children.length - 1];\r\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\r\n        element.children.pop();\r\n      }\r\n      // pop stack\r\n      stack.length -= 1;\r\n      currentParent = stack[stack.length - 1];\r\n      endPre(element);\r\n    },\r\n\r\n    chars: function chars (text) {\r\n      if (!currentParent) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (text === template) {\r\n            warnOnce(\r\n              'Component template requires a root element, rather than just text.'\r\n            );\r\n          } else if ((text = text.trim())) {\r\n            warnOnce(\r\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\r\n            );\r\n          }\r\n        }\r\n        return\r\n      }\r\n      // IE textarea placeholder bug\r\n      /* istanbul ignore if */\r\n      if (isIE &&\r\n        currentParent.tag === 'textarea' &&\r\n        currentParent.attrsMap.placeholder === text\r\n      ) {\r\n        return\r\n      }\r\n      var children = currentParent.children;\r\n      text = inPre || text.trim()\r\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\r\n        // only preserve whitespace if its not right after a starting tag\r\n        : preserveWhitespace && children.length ? ' ' : '';\r\n      if (text) {\r\n        var expression;\r\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\r\n          children.push({\r\n            type: 2,\r\n            expression: expression,\r\n            text: text\r\n          });\r\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\r\n          children.push({\r\n            type: 3,\r\n            text: text\r\n          });\r\n        }\r\n      }\r\n    },\r\n    comment: function comment (text) {\r\n      currentParent.children.push({\r\n        type: 3,\r\n        text: text,\r\n        isComment: true\r\n      });\r\n    }\r\n  });\r\n  return root\r\n}\r\n\r\nfunction processPre (el) {\r\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\r\n    el.pre = true;\r\n  }\r\n}\r\n\r\nfunction processRawAttrs (el) {\r\n  var l = el.attrsList.length;\r\n  if (l) {\r\n    var attrs = el.attrs = new Array(l);\r\n    for (var i = 0; i < l; i++) {\r\n      attrs[i] = {\r\n        name: el.attrsList[i].name,\r\n        value: JSON.stringify(el.attrsList[i].value)\r\n      };\r\n    }\r\n  } else if (!el.pre) {\r\n    // non root node in pre blocks with no attributes\r\n    el.plain = true;\r\n  }\r\n}\r\n\r\nfunction processKey (el) {\r\n  var exp = getBindingAttr(el, 'key');\r\n  if (exp) {\r\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\r\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\r\n    }\r\n    el.key = exp;\r\n  }\r\n}\r\n\r\nfunction processRef (el) {\r\n  var ref = getBindingAttr(el, 'ref');\r\n  if (ref) {\r\n    el.ref = ref;\r\n    el.refInFor = checkInFor(el);\r\n  }\r\n}\r\n\r\nfunction processFor (el) {\r\n  var exp;\r\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\r\n    var inMatch = exp.match(forAliasRE);\r\n    if (!inMatch) {\r\n      process.env.NODE_ENV !== 'production' && warn$2(\r\n        (\"Invalid v-for expression: \" + exp)\r\n      );\r\n      return\r\n    }\r\n    el.for = inMatch[2].trim();\r\n    var alias = inMatch[1].trim();\r\n    var iteratorMatch = alias.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n      el.alias = iteratorMatch[1].trim();\r\n      el.iterator1 = iteratorMatch[2].trim();\r\n      if (iteratorMatch[3]) {\r\n        el.iterator2 = iteratorMatch[3].trim();\r\n      }\r\n    } else {\r\n      el.alias = alias;\r\n    }\r\n  }\r\n}\r\n\r\nfunction processIf (el) {\r\n  var exp = getAndRemoveAttr(el, 'v-if');\r\n  if (exp) {\r\n    el.if = exp;\r\n    addIfCondition(el, {\r\n      exp: exp,\r\n      block: el\r\n    });\r\n  } else {\r\n    if (getAndRemoveAttr(el, 'v-else') != null) {\r\n      el.else = true;\r\n    }\r\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\r\n    if (elseif) {\r\n      el.elseif = elseif;\r\n    }\r\n  }\r\n}\r\n\r\nfunction processIfConditions (el, parent) {\r\n  var prev = findPrevElement(parent.children);\r\n  if (prev && prev.if) {\r\n    addIfCondition(prev, {\r\n      exp: el.elseif,\r\n      block: el\r\n    });\r\n  } else if (process.env.NODE_ENV !== 'production') {\r\n    warn$2(\r\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\r\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\r\n    );\r\n  }\r\n}\r\n\r\nfunction findPrevElement (children) {\r\n  var i = children.length;\r\n  while (i--) {\r\n    if (children[i].type === 1) {\r\n      return children[i]\r\n    } else {\r\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\r\n        warn$2(\r\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\r\n          \"will be ignored.\"\r\n        );\r\n      }\r\n      children.pop();\r\n    }\r\n  }\r\n}\r\n\r\nfunction addIfCondition (el, condition) {\r\n  if (!el.ifConditions) {\r\n    el.ifConditions = [];\r\n  }\r\n  el.ifConditions.push(condition);\r\n}\r\n\r\nfunction processOnce (el) {\r\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\r\n  if (once$$1 != null) {\r\n    el.once = true;\r\n  }\r\n}\r\n\r\nfunction processSlot (el) {\r\n  if (el.tag === 'slot') {\r\n    el.slotName = getBindingAttr(el, 'name');\r\n    if (process.env.NODE_ENV !== 'production' && el.key) {\r\n      warn$2(\r\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\r\n        \"and can possibly expand into multiple elements. \" +\r\n        \"Use the key on a wrapping element instead.\"\r\n      );\r\n    }\r\n  } else {\r\n    var slotTarget = getBindingAttr(el, 'slot');\r\n    if (slotTarget) {\r\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\r\n    }\r\n    if (el.tag === 'template') {\r\n      el.slotScope = getAndRemoveAttr(el, 'scope');\r\n    }\r\n  }\r\n}\r\n\r\nfunction processComponent (el) {\r\n  var binding;\r\n  if ((binding = getBindingAttr(el, 'is'))) {\r\n    el.component = binding;\r\n  }\r\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\r\n    el.inlineTemplate = true;\r\n  }\r\n}\r\n\r\nfunction processAttrs (el) {\r\n  var list = el.attrsList;\r\n  var i, l, name, rawName, value, modifiers, isProp;\r\n  for (i = 0, l = list.length; i < l; i++) {\r\n    name = rawName = list[i].name;\r\n    value = list[i].value;\r\n    if (dirRE.test(name)) {\r\n      // mark element as dynamic\r\n      el.hasBindings = true;\r\n      // modifiers\r\n      modifiers = parseModifiers(name);\r\n      if (modifiers) {\r\n        name = name.replace(modifierRE, '');\r\n      }\r\n      if (bindRE.test(name)) { // v-bind\r\n        name = name.replace(bindRE, '');\r\n        value = parseFilters(value);\r\n        isProp = false;\r\n        if (modifiers) {\r\n          if (modifiers.prop) {\r\n            isProp = true;\r\n            name = camelize(name);\r\n            if (name === 'innerHtml') { name = 'innerHTML'; }\r\n          }\r\n          if (modifiers.camel) {\r\n            name = camelize(name);\r\n          }\r\n          if (modifiers.sync) {\r\n            addHandler(\r\n              el,\r\n              (\"update:\" + (camelize(name))),\r\n              genAssignmentCode(value, \"$event\")\r\n            );\r\n          }\r\n        }\r\n        if (isProp || (\r\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\r\n        )) {\r\n          addProp(el, name, value);\r\n        } else {\r\n          addAttr(el, name, value);\r\n        }\r\n      } else if (onRE.test(name)) { // v-on\r\n        name = name.replace(onRE, '');\r\n        addHandler(el, name, value, modifiers, false, warn$2);\r\n      } else { // normal directives\r\n        name = name.replace(dirRE, '');\r\n        // parse arg\r\n        var argMatch = name.match(argRE);\r\n        var arg = argMatch && argMatch[1];\r\n        if (arg) {\r\n          name = name.slice(0, -(arg.length + 1));\r\n        }\r\n        addDirective(el, name, rawName, value, arg, modifiers);\r\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\r\n          checkForAliasModel(el, value);\r\n        }\r\n      }\r\n    } else {\r\n      // literal attribute\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        var expression = parseText(value, delimiters);\r\n        if (expression) {\r\n          warn$2(\r\n            name + \"=\\\"\" + value + \"\\\": \" +\r\n            'Interpolation inside attributes has been removed. ' +\r\n            'Use v-bind or the colon shorthand instead. For example, ' +\r\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\r\n          );\r\n        }\r\n      }\r\n      addAttr(el, name, JSON.stringify(value));\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkInFor (el) {\r\n  var parent = el;\r\n  while (parent) {\r\n    if (parent.for !== undefined) {\r\n      return true\r\n    }\r\n    parent = parent.parent;\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseModifiers (name) {\r\n  var match = name.match(modifierRE);\r\n  if (match) {\r\n    var ret = {};\r\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\r\n    return ret\r\n  }\r\n}\r\n\r\nfunction makeAttrsMap (attrs) {\r\n  var map = {};\r\n  for (var i = 0, l = attrs.length; i < l; i++) {\r\n    if (\r\n      process.env.NODE_ENV !== 'production' &&\r\n      map[attrs[i].name] && !isIE && !isEdge\r\n    ) {\r\n      warn$2('duplicate attribute: ' + attrs[i].name);\r\n    }\r\n    map[attrs[i].name] = attrs[i].value;\r\n  }\r\n  return map\r\n}\r\n\r\n// for script (e.g. type=\"x/template\") or style, do not decode content\r\nfunction isTextTag (el) {\r\n  return el.tag === 'script' || el.tag === 'style'\r\n}\r\n\r\nfunction isForbiddenTag (el) {\r\n  return (\r\n    el.tag === 'style' ||\r\n    (el.tag === 'script' && (\r\n      !el.attrsMap.type ||\r\n      el.attrsMap.type === 'text/javascript'\r\n    ))\r\n  )\r\n}\r\n\r\nvar ieNSBug = /^xmlns:NS\\d+/;\r\nvar ieNSPrefix = /^NS\\d+:/;\r\n\r\n/* istanbul ignore next */\r\nfunction guardIESVGBug (attrs) {\r\n  var res = [];\r\n  for (var i = 0; i < attrs.length; i++) {\r\n    var attr = attrs[i];\r\n    if (!ieNSBug.test(attr.name)) {\r\n      attr.name = attr.name.replace(ieNSPrefix, '');\r\n      res.push(attr);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction checkForAliasModel (el, value) {\r\n  var _el = el;\r\n  while (_el) {\r\n    if (_el.for && _el.alias === value) {\r\n      warn$2(\r\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\r\n        \"You are binding v-model directly to a v-for iteration alias. \" +\r\n        \"This will not be able to modify the v-for source array because \" +\r\n        \"writing to the alias is like modifying a function local variable. \" +\r\n        \"Consider using an array of objects and use v-model on an object property instead.\"\r\n      );\r\n    }\r\n    _el = _el.parent;\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar isStaticKey;\r\nvar isPlatformReservedTag;\r\n\r\nvar genStaticKeysCached = cached(genStaticKeys$1);\r\n\r\n/**\r\n * Goal of the optimizer: walk the generated template AST tree\r\n * and detect sub-trees that are purely static, i.e. parts of\r\n * the DOM that never needs to change.\r\n *\r\n * Once we detect these sub-trees, we can:\r\n *\r\n * 1. Hoist them into constants, so that we no longer need to\r\n *    create fresh nodes for them on each re-render;\r\n * 2. Completely skip them in the patching process.\r\n */\r\nfunction optimize (root, options) {\r\n  if (!root) { return }\r\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\r\n  isPlatformReservedTag = options.isReservedTag || no;\r\n  // first pass: mark all non-static nodes.\r\n  markStatic$1(root);\r\n  // second pass: mark static roots.\r\n  markStaticRoots(root, false);\r\n}\r\n\r\nfunction genStaticKeys$1 (keys) {\r\n  return makeMap(\r\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\r\n    (keys ? ',' + keys : '')\r\n  )\r\n}\r\n\r\nfunction markStatic$1 (node) {\r\n  node.static = isStatic(node);\r\n  if (node.type === 1) {\r\n    // do not make component slot content static. this avoids\r\n    // 1. components not able to mutate slot nodes\r\n    // 2. static slot content fails for hot-reloading\r\n    if (\r\n      !isPlatformReservedTag(node.tag) &&\r\n      node.tag !== 'slot' &&\r\n      node.attrsMap['inline-template'] == null\r\n    ) {\r\n      return\r\n    }\r\n    for (var i = 0, l = node.children.length; i < l; i++) {\r\n      var child = node.children[i];\r\n      markStatic$1(child);\r\n      if (!child.static) {\r\n        node.static = false;\r\n      }\r\n    }\r\n    if (node.ifConditions) {\r\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\r\n        var block = node.ifConditions[i$1].block;\r\n        markStatic$1(block);\r\n        if (!block.static) {\r\n          node.static = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction markStaticRoots (node, isInFor) {\r\n  if (node.type === 1) {\r\n    if (node.static || node.once) {\r\n      node.staticInFor = isInFor;\r\n    }\r\n    // For a node to qualify as a static root, it should have children that\r\n    // are not just static text. Otherwise the cost of hoisting out will\r\n    // outweigh the benefits and it's better off to just always render it fresh.\r\n    if (node.static && node.children.length && !(\r\n      node.children.length === 1 &&\r\n      node.children[0].type === 3\r\n    )) {\r\n      node.staticRoot = true;\r\n      return\r\n    } else {\r\n      node.staticRoot = false;\r\n    }\r\n    if (node.children) {\r\n      for (var i = 0, l = node.children.length; i < l; i++) {\r\n        markStaticRoots(node.children[i], isInFor || !!node.for);\r\n      }\r\n    }\r\n    if (node.ifConditions) {\r\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\r\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isStatic (node) {\r\n  if (node.type === 2) { // expression\r\n    return false\r\n  }\r\n  if (node.type === 3) { // text\r\n    return true\r\n  }\r\n  return !!(node.pre || (\r\n    !node.hasBindings && // no dynamic bindings\r\n    !node.if && !node.for && // not v-if or v-for or v-else\r\n    !isBuiltInTag(node.tag) && // not a built-in\r\n    isPlatformReservedTag(node.tag) && // not a component\r\n    !isDirectChildOfTemplateFor(node) &&\r\n    Object.keys(node).every(isStaticKey)\r\n  ))\r\n}\r\n\r\nfunction isDirectChildOfTemplateFor (node) {\r\n  while (node.parent) {\r\n    node = node.parent;\r\n    if (node.tag !== 'template') {\r\n      return false\r\n    }\r\n    if (node.for) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/*  */\r\n\r\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\r\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\r\n\r\n// keyCode aliases\r\nvar keyCodes = {\r\n  esc: 27,\r\n  tab: 9,\r\n  enter: 13,\r\n  space: 32,\r\n  up: 38,\r\n  left: 37,\r\n  right: 39,\r\n  down: 40,\r\n  'delete': [8, 46]\r\n};\r\n\r\n// #4868: modifiers that prevent the execution of the listener\r\n// need to explicitly return null so that we can determine whether to remove\r\n// the listener for .once\r\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\r\n\r\nvar modifierCode = {\r\n  stop: '$event.stopPropagation();',\r\n  prevent: '$event.preventDefault();',\r\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\r\n  ctrl: genGuard(\"!$event.ctrlKey\"),\r\n  shift: genGuard(\"!$event.shiftKey\"),\r\n  alt: genGuard(\"!$event.altKey\"),\r\n  meta: genGuard(\"!$event.metaKey\"),\r\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\r\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\r\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\r\n};\r\n\r\nfunction genHandlers (\r\n  events,\r\n  isNative,\r\n  warn\r\n) {\r\n  var res = isNative ? 'nativeOn:{' : 'on:{';\r\n  for (var name in events) {\r\n    var handler = events[name];\r\n    // #5330: warn click.right, since right clicks do not actually fire click events.\r\n    if (process.env.NODE_ENV !== 'production' &&\r\n      name === 'click' &&\r\n      handler && handler.modifiers && handler.modifiers.right\r\n    ) {\r\n      warn(\r\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\r\n        \"do not actually fire \\\"click\\\" events.\"\r\n      );\r\n    }\r\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\r\n  }\r\n  return res.slice(0, -1) + '}'\r\n}\r\n\r\nfunction genHandler (\r\n  name,\r\n  handler\r\n) {\r\n  if (!handler) {\r\n    return 'function(){}'\r\n  }\r\n\r\n  if (Array.isArray(handler)) {\r\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\r\n  }\r\n\r\n  var isMethodPath = simplePathRE.test(handler.value);\r\n  var isFunctionExpression = fnExpRE.test(handler.value);\r\n\r\n  if (!handler.modifiers) {\r\n    return isMethodPath || isFunctionExpression\r\n      ? handler.value\r\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\r\n  } else {\r\n    var code = '';\r\n    var genModifierCode = '';\r\n    var keys = [];\r\n    for (var key in handler.modifiers) {\r\n      if (modifierCode[key]) {\r\n        genModifierCode += modifierCode[key];\r\n        // left/right\r\n        if (keyCodes[key]) {\r\n          keys.push(key);\r\n        }\r\n      } else {\r\n        keys.push(key);\r\n      }\r\n    }\r\n    if (keys.length) {\r\n      code += genKeyFilter(keys);\r\n    }\r\n    // Make sure modifiers like prevent and stop get executed after key filtering\r\n    if (genModifierCode) {\r\n      code += genModifierCode;\r\n    }\r\n    var handlerCode = isMethodPath\r\n      ? handler.value + '($event)'\r\n      : isFunctionExpression\r\n        ? (\"(\" + (handler.value) + \")($event)\")\r\n        : handler.value;\r\n    return (\"function($event){\" + code + handlerCode + \"}\")\r\n  }\r\n}\r\n\r\nfunction genKeyFilter (keys) {\r\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\r\n}\r\n\r\nfunction genFilterCode (key) {\r\n  var keyVal = parseInt(key, 10);\r\n  if (keyVal) {\r\n    return (\"$event.keyCode!==\" + keyVal)\r\n  }\r\n  var alias = keyCodes[key];\r\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\r\n}\r\n\r\n/*  */\r\n\r\nfunction on (el, dir) {\r\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\r\n    warn(\"v-on without argument does not support modifiers.\");\r\n  }\r\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\r\n}\r\n\r\n/*  */\r\n\r\nfunction bind$1 (el, dir) {\r\n  el.wrapData = function (code) {\r\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nvar baseDirectives = {\r\n  on: on,\r\n  bind: bind$1,\r\n  cloak: noop\r\n};\r\n\r\n/*  */\r\n\r\nvar CodegenState = function CodegenState (options) {\r\n  this.options = options;\r\n  this.warn = options.warn || baseWarn;\r\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\r\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\r\n  this.directives = extend(extend({}, baseDirectives), options.directives);\r\n  var isReservedTag = options.isReservedTag || no;\r\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\r\n  this.onceId = 0;\r\n  this.staticRenderFns = [];\r\n};\r\n\r\n\r\n\r\nfunction generate (\r\n  ast,\r\n  options\r\n) {\r\n  var state = new CodegenState(options);\r\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\r\n  return {\r\n    render: (\"with(this){return \" + code + \"}\"),\r\n    staticRenderFns: state.staticRenderFns\r\n  }\r\n}\r\n\r\nfunction genElement (el, state) {\r\n  if (el.staticRoot && !el.staticProcessed) {\r\n    return genStatic(el, state)\r\n  } else if (el.once && !el.onceProcessed) {\r\n    return genOnce(el, state)\r\n  } else if (el.for && !el.forProcessed) {\r\n    return genFor(el, state)\r\n  } else if (el.if && !el.ifProcessed) {\r\n    return genIf(el, state)\r\n  } else if (el.tag === 'template' && !el.slotTarget) {\r\n    return genChildren(el, state) || 'void 0'\r\n  } else if (el.tag === 'slot') {\r\n    return genSlot(el, state)\r\n  } else {\r\n    // component or element\r\n    var code;\r\n    if (el.component) {\r\n      code = genComponent(el.component, el, state);\r\n    } else {\r\n      var data = el.plain ? undefined : genData$2(el, state);\r\n\r\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\r\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\r\n    }\r\n    // module transforms\r\n    for (var i = 0; i < state.transforms.length; i++) {\r\n      code = state.transforms[i](el, code);\r\n    }\r\n    return code\r\n  }\r\n}\r\n\r\n// hoist static sub-trees out\r\nfunction genStatic (el, state) {\r\n  el.staticProcessed = true;\r\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\r\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\r\n}\r\n\r\n// v-once\r\nfunction genOnce (el, state) {\r\n  el.onceProcessed = true;\r\n  if (el.if && !el.ifProcessed) {\r\n    return genIf(el, state)\r\n  } else if (el.staticInFor) {\r\n    var key = '';\r\n    var parent = el.parent;\r\n    while (parent) {\r\n      if (parent.for) {\r\n        key = parent.key;\r\n        break\r\n      }\r\n      parent = parent.parent;\r\n    }\r\n    if (!key) {\r\n      process.env.NODE_ENV !== 'production' && state.warn(\r\n        \"v-once can only be used inside v-for that is keyed. \"\r\n      );\r\n      return genElement(el, state)\r\n    }\r\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + (key ? (\",\" + key) : \"\") + \")\")\r\n  } else {\r\n    return genStatic(el, state)\r\n  }\r\n}\r\n\r\nfunction genIf (\r\n  el,\r\n  state,\r\n  altGen,\r\n  altEmpty\r\n) {\r\n  el.ifProcessed = true; // avoid recursion\r\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\r\n}\r\n\r\nfunction genIfConditions (\r\n  conditions,\r\n  state,\r\n  altGen,\r\n  altEmpty\r\n) {\r\n  if (!conditions.length) {\r\n    return altEmpty || '_e()'\r\n  }\r\n\r\n  var condition = conditions.shift();\r\n  if (condition.exp) {\r\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\r\n  } else {\r\n    return (\"\" + (genTernaryExp(condition.block)))\r\n  }\r\n\r\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\r\n  function genTernaryExp (el) {\r\n    return altGen\r\n      ? altGen(el, state)\r\n      : el.once\r\n        ? genOnce(el, state)\r\n        : genElement(el, state)\r\n  }\r\n}\r\n\r\nfunction genFor (\r\n  el,\r\n  state,\r\n  altGen,\r\n  altHelper\r\n) {\r\n  var exp = el.for;\r\n  var alias = el.alias;\r\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\r\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\r\n\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n    state.maybeComponent(el) &&\r\n    el.tag !== 'slot' &&\r\n    el.tag !== 'template' &&\r\n    !el.key\r\n  ) {\r\n    state.warn(\r\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\r\n      \"v-for should have explicit keys. \" +\r\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\r\n      true /* tip */\r\n    );\r\n  }\r\n\r\n  el.forProcessed = true; // avoid recursion\r\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\r\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\r\n      \"return \" + ((altGen || genElement)(el, state)) +\r\n    '})'\r\n}\r\n\r\nfunction genData$2 (el, state) {\r\n  var data = '{';\r\n\r\n  // directives first.\r\n  // directives may mutate the el's other properties before they are generated.\r\n  var dirs = genDirectives(el, state);\r\n  if (dirs) { data += dirs + ','; }\r\n\r\n  // key\r\n  if (el.key) {\r\n    data += \"key:\" + (el.key) + \",\";\r\n  }\r\n  // ref\r\n  if (el.ref) {\r\n    data += \"ref:\" + (el.ref) + \",\";\r\n  }\r\n  if (el.refInFor) {\r\n    data += \"refInFor:true,\";\r\n  }\r\n  // pre\r\n  if (el.pre) {\r\n    data += \"pre:true,\";\r\n  }\r\n  // record original tag name for components using \"is\" attribute\r\n  if (el.component) {\r\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\r\n  }\r\n  // module data generation functions\r\n  for (var i = 0; i < state.dataGenFns.length; i++) {\r\n    data += state.dataGenFns[i](el);\r\n  }\r\n  // attributes\r\n  if (el.attrs) {\r\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\r\n  }\r\n  // DOM props\r\n  if (el.props) {\r\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\r\n  }\r\n  // event handlers\r\n  if (el.events) {\r\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\r\n  }\r\n  if (el.nativeEvents) {\r\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\r\n  }\r\n  // slot target\r\n  if (el.slotTarget) {\r\n    data += \"slot:\" + (el.slotTarget) + \",\";\r\n  }\r\n  // scoped slots\r\n  if (el.scopedSlots) {\r\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\r\n  }\r\n  // component v-model\r\n  if (el.model) {\r\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\r\n  }\r\n  // inline-template\r\n  if (el.inlineTemplate) {\r\n    var inlineTemplate = genInlineTemplate(el, state);\r\n    if (inlineTemplate) {\r\n      data += inlineTemplate + \",\";\r\n    }\r\n  }\r\n  data = data.replace(/,$/, '') + '}';\r\n  // v-bind data wrap\r\n  if (el.wrapData) {\r\n    data = el.wrapData(data);\r\n  }\r\n  // v-on data wrap\r\n  if (el.wrapListeners) {\r\n    data = el.wrapListeners(data);\r\n  }\r\n  return data\r\n}\r\n\r\nfunction genDirectives (el, state) {\r\n  var dirs = el.directives;\r\n  if (!dirs) { return }\r\n  var res = 'directives:[';\r\n  var hasRuntime = false;\r\n  var i, l, dir, needRuntime;\r\n  for (i = 0, l = dirs.length; i < l; i++) {\r\n    dir = dirs[i];\r\n    needRuntime = true;\r\n    var gen = state.directives[dir.name];\r\n    if (gen) {\r\n      // compile-time directive that manipulates AST.\r\n      // returns true if it also needs a runtime counterpart.\r\n      needRuntime = !!gen(el, dir, state.warn);\r\n    }\r\n    if (needRuntime) {\r\n      hasRuntime = true;\r\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\r\n    }\r\n  }\r\n  if (hasRuntime) {\r\n    return res.slice(0, -1) + ']'\r\n  }\r\n}\r\n\r\nfunction genInlineTemplate (el, state) {\r\n  var ast = el.children[0];\r\n  if (process.env.NODE_ENV !== 'production' && (\r\n    el.children.length > 1 || ast.type !== 1\r\n  )) {\r\n    state.warn('Inline-template components must have exactly one child element.');\r\n  }\r\n  if (ast.type === 1) {\r\n    var inlineRenderFns = generate(ast, state.options);\r\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\r\n  }\r\n}\r\n\r\nfunction genScopedSlots (\r\n  slots,\r\n  state\r\n) {\r\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\r\n      return genScopedSlot(key, slots[key], state)\r\n    }).join(',')) + \"])\")\r\n}\r\n\r\nfunction genScopedSlot (\r\n  key,\r\n  el,\r\n  state\r\n) {\r\n  if (el.for && !el.forProcessed) {\r\n    return genForScopedSlot(key, el, state)\r\n  }\r\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\r\n    \"return \" + (el.tag === 'template'\r\n      ? genChildren(el, state) || 'void 0'\r\n      : genElement(el, state)) + \"}}\"\r\n}\r\n\r\nfunction genForScopedSlot (\r\n  key,\r\n  el,\r\n  state\r\n) {\r\n  var exp = el.for;\r\n  var alias = el.alias;\r\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\r\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\r\n  el.forProcessed = true; // avoid recursion\r\n  return \"_l((\" + exp + \"),\" +\r\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\r\n      \"return \" + (genScopedSlot(key, el, state)) +\r\n    '})'\r\n}\r\n\r\nfunction genChildren (\r\n  el,\r\n  state,\r\n  checkSkip,\r\n  altGenElement,\r\n  altGenNode\r\n) {\r\n  var children = el.children;\r\n  if (children.length) {\r\n    var el$1 = children[0];\r\n    // optimize single v-for\r\n    if (children.length === 1 &&\r\n      el$1.for &&\r\n      el$1.tag !== 'template' &&\r\n      el$1.tag !== 'slot'\r\n    ) {\r\n      return (altGenElement || genElement)(el$1, state)\r\n    }\r\n    var normalizationType = checkSkip\r\n      ? getNormalizationType(children, state.maybeComponent)\r\n      : 0;\r\n    var gen = altGenNode || genNode;\r\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\r\n  }\r\n}\r\n\r\n// determine the normalization needed for the children array.\r\n// 0: no normalization needed\r\n// 1: simple normalization needed (possible 1-level deep nested array)\r\n// 2: full normalization needed\r\nfunction getNormalizationType (\r\n  children,\r\n  maybeComponent\r\n) {\r\n  var res = 0;\r\n  for (var i = 0; i < children.length; i++) {\r\n    var el = children[i];\r\n    if (el.type !== 1) {\r\n      continue\r\n    }\r\n    if (needsNormalization(el) ||\r\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\r\n      res = 2;\r\n      break\r\n    }\r\n    if (maybeComponent(el) ||\r\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\r\n      res = 1;\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction needsNormalization (el) {\r\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\r\n}\r\n\r\nfunction genNode (node, state) {\r\n  if (node.type === 1) {\r\n    return genElement(node, state)\r\n  } if (node.type === 3 && node.isComment) {\r\n    return genComment(node)\r\n  } else {\r\n    return genText(node)\r\n  }\r\n}\r\n\r\nfunction genText (text) {\r\n  return (\"_v(\" + (text.type === 2\r\n    ? text.expression // no need for () because already wrapped in _s()\r\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\r\n}\r\n\r\nfunction genComment (comment) {\r\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\r\n}\r\n\r\nfunction genSlot (el, state) {\r\n  var slotName = el.slotName || '\"default\"';\r\n  var children = genChildren(el, state);\r\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\r\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\r\n  var bind$$1 = el.attrsMap['v-bind'];\r\n  if ((attrs || bind$$1) && !children) {\r\n    res += \",null\";\r\n  }\r\n  if (attrs) {\r\n    res += \",\" + attrs;\r\n  }\r\n  if (bind$$1) {\r\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\r\n  }\r\n  return res + ')'\r\n}\r\n\r\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\r\nfunction genComponent (\r\n  componentName,\r\n  el,\r\n  state\r\n) {\r\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\r\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\r\n}\r\n\r\nfunction genProps (props) {\r\n  var res = '';\r\n  for (var i = 0; i < props.length; i++) {\r\n    var prop = props[i];\r\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\r\n  }\r\n  return res.slice(0, -1)\r\n}\r\n\r\n// #3895, #4268\r\nfunction transformSpecialNewlines (text) {\r\n  return text\r\n    .replace(/\\u2028/g, '\\\\u2028')\r\n    .replace(/\\u2029/g, '\\\\u2029')\r\n}\r\n\r\n/*  */\r\n\r\n// these keywords should not appear inside expressions, but operators like\r\n// typeof, instanceof and in are allowed\r\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\r\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n  'extends,finally,continue,debugger,function,arguments'\r\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\r\n\r\n// these unary operators should not be used as property/method names\r\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\r\n  'delete,typeof,void'\r\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\r\n\r\n// check valid identifier for v-for\r\nvar identRE = /[A-Za-z_$][\\w$]*/;\r\n\r\n// strip strings in expressions\r\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n\r\n// detect problematic expressions in a template\r\nfunction detectErrors (ast) {\r\n  var errors = [];\r\n  if (ast) {\r\n    checkNode(ast, errors);\r\n  }\r\n  return errors\r\n}\r\n\r\nfunction checkNode (node, errors) {\r\n  if (node.type === 1) {\r\n    for (var name in node.attrsMap) {\r\n      if (dirRE.test(name)) {\r\n        var value = node.attrsMap[name];\r\n        if (value) {\r\n          if (name === 'v-for') {\r\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\r\n          } else if (onRE.test(name)) {\r\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\r\n          } else {\r\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (node.children) {\r\n      for (var i = 0; i < node.children.length; i++) {\r\n        checkNode(node.children[i], errors);\r\n      }\r\n    }\r\n  } else if (node.type === 2) {\r\n    checkExpression(node.expression, node.text, errors);\r\n  }\r\n}\r\n\r\nfunction checkEvent (exp, text, errors) {\r\n  var stipped = exp.replace(stripStringRE, '');\r\n  var keywordMatch = stipped.match(unaryOperatorsRE);\r\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\r\n    errors.push(\r\n      \"avoid using JavaScript unary operator as property name: \" +\r\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\r\n    );\r\n  }\r\n  checkExpression(exp, text, errors);\r\n}\r\n\r\nfunction checkFor (node, text, errors) {\r\n  checkExpression(node.for || '', text, errors);\r\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\r\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\r\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\r\n}\r\n\r\nfunction checkIdentifier (ident, type, text, errors) {\r\n  if (typeof ident === 'string' && !identRE.test(ident)) {\r\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\r\n  }\r\n}\r\n\r\nfunction checkExpression (exp, text, errors) {\r\n  try {\r\n    new Function((\"return \" + exp));\r\n  } catch (e) {\r\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\r\n    if (keywordMatch) {\r\n      errors.push(\r\n        \"avoid using JavaScript keyword as property name: \" +\r\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\r\n      );\r\n    } else {\r\n      errors.push((\"invalid expression: \" + (text.trim())));\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction createFunction (code, errors) {\r\n  try {\r\n    return new Function(code)\r\n  } catch (err) {\r\n    errors.push({ err: err, code: code });\r\n    return noop\r\n  }\r\n}\r\n\r\nfunction createCompileToFunctionFn (compile) {\r\n  var cache = Object.create(null);\r\n\r\n  return function compileToFunctions (\r\n    template,\r\n    options,\r\n    vm\r\n  ) {\r\n    options = options || {};\r\n\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      // detect possible CSP restriction\r\n      try {\r\n        new Function('return 1');\r\n      } catch (e) {\r\n        if (e.toString().match(/unsafe-eval|CSP/)) {\r\n          warn(\r\n            'It seems you are using the standalone build of Vue.js in an ' +\r\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\r\n            'The template compiler cannot work in this environment. Consider ' +\r\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\r\n            'templates into render functions.'\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // check cache\r\n    var key = options.delimiters\r\n      ? String(options.delimiters) + template\r\n      : template;\r\n    if (cache[key]) {\r\n      return cache[key]\r\n    }\r\n\r\n    // compile\r\n    var compiled = compile(template, options);\r\n\r\n    // check compilation errors/tips\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (compiled.errors && compiled.errors.length) {\r\n        warn(\r\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\r\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\r\n          vm\r\n        );\r\n      }\r\n      if (compiled.tips && compiled.tips.length) {\r\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\r\n      }\r\n    }\r\n\r\n    // turn code into functions\r\n    var res = {};\r\n    var fnGenErrors = [];\r\n    res.render = createFunction(compiled.render, fnGenErrors);\r\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\r\n      return createFunction(code, fnGenErrors)\r\n    });\r\n\r\n    // check function generation errors.\r\n    // this should only happen if there is a bug in the compiler itself.\r\n    // mostly for codegen development use\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\r\n        warn(\r\n          \"Failed to generate render function:\\n\\n\" +\r\n          fnGenErrors.map(function (ref) {\r\n            var err = ref.err;\r\n            var code = ref.code;\r\n\r\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\r\n        }).join('\\n'),\r\n          vm\r\n        );\r\n      }\r\n    }\r\n\r\n    return (cache[key] = res)\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction createCompilerCreator (baseCompile) {\r\n  return function createCompiler (baseOptions) {\r\n    function compile (\r\n      template,\r\n      options\r\n    ) {\r\n      var finalOptions = Object.create(baseOptions);\r\n      var errors = [];\r\n      var tips = [];\r\n      finalOptions.warn = function (msg, tip) {\r\n        (tip ? tips : errors).push(msg);\r\n      };\r\n\r\n      if (options) {\r\n        // merge custom modules\r\n        if (options.modules) {\r\n          finalOptions.modules =\r\n            (baseOptions.modules || []).concat(options.modules);\r\n        }\r\n        // merge custom directives\r\n        if (options.directives) {\r\n          finalOptions.directives = extend(\r\n            Object.create(baseOptions.directives),\r\n            options.directives\r\n          );\r\n        }\r\n        // copy other options\r\n        for (var key in options) {\r\n          if (key !== 'modules' && key !== 'directives') {\r\n            finalOptions[key] = options[key];\r\n          }\r\n        }\r\n      }\r\n\r\n      var compiled = baseCompile(template, finalOptions);\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        errors.push.apply(errors, detectErrors(compiled.ast));\r\n      }\r\n      compiled.errors = errors;\r\n      compiled.tips = tips;\r\n      return compiled\r\n    }\r\n\r\n    return {\r\n      compile: compile,\r\n      compileToFunctions: createCompileToFunctionFn(compile)\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n// `createCompilerCreator` allows creating compilers that use alternative\r\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\r\n// Here we just export a default compiler using the default parts.\r\nvar createCompiler = createCompilerCreator(function baseCompile (\r\n  template,\r\n  options\r\n) {\r\n  var ast = parse(template.trim(), options);\r\n  optimize(ast, options);\r\n  var code = generate(ast, options);\r\n  return {\r\n    ast: ast,\r\n    render: code.render,\r\n    staticRenderFns: code.staticRenderFns\r\n  }\r\n});\r\n\r\n/*  */\r\n\r\nvar ref$1 = createCompiler(baseOptions);\r\nvar compileToFunctions = ref$1.compileToFunctions;\r\n\r\n/*  */\r\n\r\nvar idToTemplate = cached(function (id) {\r\n  var el = query(id);\r\n  return el && el.innerHTML\r\n});\r\n\r\nvar mount = Vue$3.prototype.$mount;\r\nVue$3.prototype.$mount = function (\r\n  el,\r\n  hydrating\r\n) {\r\n  el = el && query(el);\r\n\r\n  /* istanbul ignore if */\r\n  if (el === document.body || el === document.documentElement) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\r\n    );\r\n    return this\r\n  }\r\n\r\n  var options = this.$options;\r\n  // resolve template/el and convert to render function\r\n  if (!options.render) {\r\n    var template = options.template;\r\n    if (template) {\r\n      if (typeof template === 'string') {\r\n        if (template.charAt(0) === '#') {\r\n          template = idToTemplate(template);\r\n          /* istanbul ignore if */\r\n          if (process.env.NODE_ENV !== 'production' && !template) {\r\n            warn(\r\n              (\"Template element not found or is empty: \" + (options.template)),\r\n              this\r\n            );\r\n          }\r\n        }\r\n      } else if (template.nodeType) {\r\n        template = template.innerHTML;\r\n      } else {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          warn('invalid template option:' + template, this);\r\n        }\r\n        return this\r\n      }\r\n    } else if (el) {\r\n      template = getOuterHTML(el);\r\n    }\r\n    if (template) {\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n        mark('compile');\r\n      }\r\n\r\n      var ref = compileToFunctions(template, {\r\n        shouldDecodeNewlines: shouldDecodeNewlines,\r\n        delimiters: options.delimiters,\r\n        comments: options.comments\r\n      }, this);\r\n      var render = ref.render;\r\n      var staticRenderFns = ref.staticRenderFns;\r\n      options.render = render;\r\n      options.staticRenderFns = staticRenderFns;\r\n\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n        mark('compile end');\r\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\r\n      }\r\n    }\r\n  }\r\n  return mount.call(this, el, hydrating)\r\n};\r\n\r\n/**\r\n * Get outerHTML of elements, taking care\r\n * of SVG elements in IE as well.\r\n */\r\nfunction getOuterHTML (el) {\r\n  if (el.outerHTML) {\r\n    return el.outerHTML\r\n  } else {\r\n    var container = document.createElement('div');\r\n    container.appendChild(el.cloneNode(true));\r\n    return container.innerHTML\r\n  }\r\n}\r\n\r\nVue$3.compile = compileToFunctions;\r\n\r\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue$3);\r\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(3), __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'app'\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQXBwLnZ1ZT81YTExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFZQTtRQUdBOztBQUZBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gIDxkaXYgaWQ9XCJhcHBcIj5cclxuICAgIDwhLS0gdGhlIHJvdXRlciBvdXRsZXQsIHdoZXJlIGFsbCBtYXRjaGVkIGNvbXBvbmVudHMgd291bGQgYmVyIHZpZXdlZCAtLT5cclxuXHJcbiAgICA8cm91dGVyLWxpbmsgdi1iaW5kOnRvPVwiJy9hYm91dCdcIj5BYm91dDwvcm91dGVyLWxpbms+XHJcblxyXG4gICAgPHJvdXRlci12aWV3Pjwvcm91dGVyLXZpZXc+XHJcblxyXG4gIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hbWU6ICdhcHAnLFxyXG5cclxufVxyXG5cclxuPC9zY3JpcHQ+XHJcbjwhLS0gc3R5bGluZyBmb3IgdGhlIGNvbXBvbmVudCAtLT5cclxuPHN0eWxlPlxyXG4jYXBwIHtcclxuICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XHJcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XHJcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgY29sb3I6ICMyYzNlNTA7XHJcbiAgbWFyZ2luLXRvcDogNjBweDtcclxufVxyXG48L3N0eWxlPlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBcHAudnVlP2E0ZmUyZTg2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'meat'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWVhdC52dWU/YjVlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFXQTtRQUVBO0FBREEiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XHJcbiAgPGRpdiBpZD1cIm1lYXRcIj5cclxuXHJcbiAgICA8aDE+TWVhdDwvaDE+XHJcblxyXG4gICAgPHJvdXRlci1saW5rIHYtYmluZDp0bz1cIicvJ1wiPk1vb3NlPC9yb3V0ZXItbGluaz5cclxuICA8ZGl2PlVzZXIge3sgJHJvdXRlLnBhcmFtcy5uYW1lIH19PC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbmFtZTogJ21lYXQnXHJcbn1cclxuPC9zY3JpcHQ+XHJcbjwhLS0gc3R5bGluZyBmb3IgdGhlIGNvbXBvbmVudCAtLT5cclxuPHN0eWxlPlxyXG4jYWJvdXQge1xyXG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcclxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBjb2xvcjogIzJjM2U1MDtcclxuICBtYXJnaW4tdG9wOiA2MHB4O1xyXG59XHJcbjwvc3R5bGU+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG1lYXQudnVlP2JmMjg1NzJjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'moose',\n  data: function data() {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    };\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbW9vc2UudnVlPzIwMDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFVQTtRQUVBO3dCQUNBOztXQUdBO0FBRkE7QUFHQTtBQU5BIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gIDxkaXYgY2xhc3M9XCJtb29zZVwiPlxyXG5cclxuICAgIDxoMT5Nb29zZTwvaDE+XHJcblxyXG4gICAgPHJvdXRlci1saW5rIHYtYmluZDp0bz1cIicvbWVhdCdcIj5NZWF0PC9yb3V0ZXItbGluaz5cclxuXHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBuYW1lOiAnbW9vc2UnLFxyXG4gIGRhdGEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtc2c6ICdXZWxjb21lIHRvIFlvdXIgVnVlLmpzIEFwcCdcclxuICAgIH1cclxuICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbjwhLS0gQWRkIFwic2NvcGVkXCIgYXR0cmlidXRlIHRvIGxpbWl0IENTUyB0byB0aGlzIGNvbXBvbmVudCBvbmx5IC0tPlxyXG48c3R5bGUgc2NvcGVkPlxyXG5oMSxcclxuaDIge1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbnVsIHtcclxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxubGkge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBtYXJnaW46IDAgMTBweDtcclxufVxyXG5cclxuYSB7XHJcbiAgY29sb3I6ICM0MmI5ODM7XHJcbn1cclxuPC9zdHlsZT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbW9vc2UudnVlPzM5OTcyZjlhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__App_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_router__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_moose_vue__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_moose_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__components_moose_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_meat_vue__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_meat_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__components_meat_vue__);\n\n\n\n// Import the styles directly. (Or you could add them via script tags.)\n\n\n//import the vue router\n\n//tell vue to use the router\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_2_vue_router__[\"a\" /* default */]);\n\n//import the hello component\n\n//import the about component\n\n//define your routes\nvar routes = [{ path: '/', component: __WEBPACK_IMPORTED_MODULE_3__components_moose_vue___default.a }, { path: '/meat', component: __WEBPACK_IMPORTED_MODULE_4__components_meat_vue___default.a }];\n\n// Create the router instance and pass the `routes` option\n// You can pass in additional options here, but let's\n// keep it simple for now.\nvar router = new __WEBPACK_IMPORTED_MODULE_2_vue_router__[\"a\" /* default */]({\n  routes: routes, // short for routes: routes\n  mode: 'history'\n});\n\nnew __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */]({\n  el: '#app',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_1__App_vue___default.a);\n  },\n  router: router\n}).$mount('#app'); //mount the router on the app\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIlZ1ZSIsInVzZSIsInJvdXRlcyIsInBhdGgiLCJjb21wb25lbnQiLCJyb3V0ZXIiLCJtb2RlIiwiZWwiLCJyZW5kZXIiLCJoIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBOztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUEsb0RBQUFBLENBQUlDLEdBQUosQ0FBUSwyREFBUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsU0FBUyxDQUViLEVBQUVDLE1BQU0sR0FBUixFQUFhQyxXQUFXLDZEQUF4QixFQUZhLEVBSWIsRUFBRUQsTUFBTSxPQUFSLEVBQWlCQyxXQUFXLDREQUE1QixFQUphLENBQWY7O0FBT0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsU0FBUyxJQUFJLDJEQUFKLENBQWM7QUFDM0JILGdCQUQyQixFQUNuQjtBQUNSSSxRQUFNO0FBRnFCLENBQWQsQ0FBZjs7QUFLQSxJQUFJLG9EQUFKLENBQVE7QUFDTkMsTUFBSSxNQURFO0FBRU5DLFVBQVE7QUFBQSxXQUFLQyxFQUFFLGdEQUFGLENBQUw7QUFBQSxHQUZGO0FBR05KO0FBSE0sQ0FBUixFQUlHSyxNQUpILENBSVUsTUFKVixFLENBSWlCIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xyXG5cclxuXHJcbi8vIEltcG9ydCB0aGUgc3R5bGVzIGRpcmVjdGx5LiAoT3IgeW91IGNvdWxkIGFkZCB0aGVtIHZpYSBzY3JpcHQgdGFncy4pXHJcblxyXG5cclxuLy9pbXBvcnQgdGhlIHZ1ZSByb3V0ZXJcclxuaW1wb3J0IFZ1ZVJvdXRlciBmcm9tICd2dWUtcm91dGVyJ1xyXG4vL3RlbGwgdnVlIHRvIHVzZSB0aGUgcm91dGVyXHJcblxyXG5WdWUudXNlKFZ1ZVJvdXRlcik7XHJcblxyXG4vL2ltcG9ydCB0aGUgaGVsbG8gY29tcG9uZW50XHJcbmltcG9ydCBtb29zZSBmcm9tICcuL2NvbXBvbmVudHMvbW9vc2UudnVlJ1xyXG4vL2ltcG9ydCB0aGUgYWJvdXQgY29tcG9uZW50XHJcbmltcG9ydCBtZWF0IGZyb20gJy4vY29tcG9uZW50cy9tZWF0LnZ1ZSdcclxuLy9kZWZpbmUgeW91ciByb3V0ZXNcclxuY29uc3Qgcm91dGVzID0gW1xyXG4gIFxyXG4gIHsgcGF0aDogJy8nLCBjb21wb25lbnQ6IG1vb3NlIH0sXHJcbiAgXHJcbiAgeyBwYXRoOiAnL21lYXQnLCBjb21wb25lbnQ6IG1lYXQgfVxyXG5dXHJcblxyXG4vLyBDcmVhdGUgdGhlIHJvdXRlciBpbnN0YW5jZSBhbmQgcGFzcyB0aGUgYHJvdXRlc2Agb3B0aW9uXHJcbi8vIFlvdSBjYW4gcGFzcyBpbiBhZGRpdGlvbmFsIG9wdGlvbnMgaGVyZSwgYnV0IGxldCdzXHJcbi8vIGtlZXAgaXQgc2ltcGxlIGZvciBub3cuXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoe1xyXG4gIHJvdXRlcywgLy8gc2hvcnQgZm9yIHJvdXRlczogcm91dGVzXHJcbiAgbW9kZTogJ2hpc3RvcnknXHJcbn0pXHJcblxyXG5uZXcgVnVlKHtcclxuICBlbDogJyNhcHAnLFxyXG4gIHJlbmRlcjogaCA9PiBoKEFwcCksXHJcbiAgcm91dGVyXHJcbn0pLiRtb3VudCgnI2FwcCcpLy9tb3VudCB0aGUgcm91dGVyIG9uIHRoZSBhcHBcclxuXHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#about {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/meat.vue?bf28572c\"],\"names\":[],\"mappings\":\";AAiBA;EACA,oDAAA;EACA,oCAAA;EACA,mCAAA;EACA,mBAAA;EACA,eAAA;EACA,iBAAA;CACA\",\"file\":\"meat.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div id=\\\"meat\\\">\\r\\n\\r\\n    <h1>Meat</h1>\\r\\n\\r\\n    <router-link v-bind:to=\\\"'/'\\\">Moose</router-link>\\r\\n  <div>User {{ $route.params.name }}</div>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nexport default {\\r\\n  name: 'meat'\\r\\n}\\r\\n</script>\\r\\n<!-- styling for the component -->\\r\\n<style>\\r\\n#about {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZWF0LnZ1ZT80MzhhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsbUNBQW9DLDBEQUEwRCwwQ0FBMEMseUNBQXlDLHlCQUF5QixxQkFBcUIsdUJBQXVCLEdBQUcsWUFBWSxzRkFBc0YsTUFBTSxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxxTEFBcUwsc0JBQXNCLHFFQUFxRSx1QkFBdUIsMEVBQTBFLDBEQUEwRCwwQ0FBMEMseUNBQXlDLHlCQUF5QixxQkFBcUIsdUJBQXVCLEtBQUsseUNBQXlDOztBQUVuaEMiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4jYWJvdXQge1xcclxcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXInLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxyXFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgY29sb3I6ICMyYzNlNTA7XFxyXFxuICBtYXJnaW4tdG9wOiA2MHB4O1xcbn1cXHJcXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiLy4vc3JjL2NvbXBvbmVudHMvbWVhdC52dWU/YmYyODU3MmNcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQWlCQTtFQUNBLG9EQUFBO0VBQ0Esb0NBQUE7RUFDQSxtQ0FBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0NBQ0FcIixcImZpbGVcIjpcIm1lYXQudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gIDxkaXYgaWQ9XFxcIm1lYXRcXFwiPlxcclxcblxcclxcbiAgICA8aDE+TWVhdDwvaDE+XFxyXFxuXFxyXFxuICAgIDxyb3V0ZXItbGluayB2LWJpbmQ6dG89XFxcIicvJ1xcXCI+TW9vc2U8L3JvdXRlci1saW5rPlxcclxcbiAgPGRpdj5Vc2VyIHt7ICRyb3V0ZS5wYXJhbXMubmFtZSB9fTwvZGl2PlxcclxcbiAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbmV4cG9ydCBkZWZhdWx0IHtcXHJcXG4gIG5hbWU6ICdtZWF0J1xcclxcbn1cXHJcXG48L3NjcmlwdD5cXHJcXG48IS0tIHN0eWxpbmcgZm9yIHRoZSBjb21wb25lbnQgLS0+XFxyXFxuPHN0eWxlPlxcclxcbiNhYm91dCB7XFxyXFxuICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXHJcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBjb2xvcjogIzJjM2U1MDtcXHJcXG4gIG1hcmdpbi10b3A6IDYwcHg7XFxyXFxufVxcclxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwid2VicGFjazovL1wifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTA4YTg0N2JlXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL21lYXQudnVlXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\nh1[data-v-6e6425b9],\\r\\nh2[data-v-6e6425b9] {\\r\\n  font-weight: normal;\\n}\\nul[data-v-6e6425b9] {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\n}\\nli[data-v-6e6425b9] {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\n}\\na[data-v-6e6425b9] {\\r\\n  color: #42b983;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/components/moose.vue?39972f9a\"],\"names\":[],\"mappings\":\";AAqBA;;EAEA,oBAAA;CACA;AAEA;EACA,sBAAA;EACA,WAAA;CACA;AAEA;EACA,sBAAA;EACA,eAAA;CACA;AAEA;EACA,eAAA;CACA\",\"file\":\"moose.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div class=\\\"moose\\\">\\r\\n\\r\\n    <h1>Moose</h1>\\r\\n\\r\\n    <router-link v-bind:to=\\\"'/meat'\\\">Meat</router-link>\\r\\n\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nexport default {\\r\\n  name: 'moose',\\r\\n  data() {\\r\\n    return {\\r\\n      msg: 'Welcome to Your Vue.js App'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n</script>\\r\\n<!-- Add \\\"scoped\\\" attribute to limit CSS to this component only -->\\r\\n<style scoped>\\r\\nh1,\\r\\nh2 {\\r\\n  font-weight: normal;\\r\\n}\\r\\n\\r\\nul {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\r\\n}\\r\\n\\r\\na {\\r\\n  color: #42b983;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWU/MTYwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLHdFQUF5RSwwQkFBMEIsR0FBRyx1QkFBdUIsNEJBQTRCLGlCQUFpQixHQUFHLHVCQUF1Qiw0QkFBNEIscUJBQXFCLEdBQUcsc0JBQXNCLHFCQUFxQixHQUFHLFlBQVksdUZBQXVGLE9BQU8sV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLEtBQUssS0FBSyxXQUFXLFVBQVUsS0FBSyxLQUFLLFVBQVUsMk9BQTJPLGtDQUFrQyxnQkFBZ0Isb0RBQW9ELE9BQU8sS0FBSyx1SEFBdUgsMEJBQTBCLEtBQUssWUFBWSw0QkFBNEIsaUJBQWlCLEtBQUssWUFBWSw0QkFBNEIscUJBQXFCLEtBQUssV0FBVyxxQkFBcUIsS0FBSyx5Q0FBeUM7O0FBRTlxQyIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmgxW2RhdGEtdi02ZTY0MjViOV0sXFxyXFxuaDJbZGF0YS12LTZlNjQyNWI5XSB7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbn1cXG51bFtkYXRhLXYtNmU2NDI1YjldIHtcXHJcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXHJcXG4gIHBhZGRpbmc6IDA7XFxufVxcbmxpW2RhdGEtdi02ZTY0MjViOV0ge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgbWFyZ2luOiAwIDEwcHg7XFxufVxcbmFbZGF0YS12LTZlNjQyNWI5XSB7XFxyXFxuICBjb2xvcjogIzQyYjk4MztcXG59XFxyXFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi8uL3NyYy9jb21wb25lbnRzL21vb3NlLnZ1ZT8zOTk3MmY5YVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBcUJBOztFQUVBLG9CQUFBO0NBQ0E7QUFFQTtFQUNBLHNCQUFBO0VBQ0EsV0FBQTtDQUNBO0FBRUE7RUFDQSxzQkFBQTtFQUNBLGVBQUE7Q0FDQTtBQUVBO0VBQ0EsZUFBQTtDQUNBXCIsXCJmaWxlXCI6XCJtb29zZS52dWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgPGRpdiBjbGFzcz1cXFwibW9vc2VcXFwiPlxcclxcblxcclxcbiAgICA8aDE+TW9vc2U8L2gxPlxcclxcblxcclxcbiAgICA8cm91dGVyLWxpbmsgdi1iaW5kOnRvPVxcXCInL21lYXQnXFxcIj5NZWF0PC9yb3V0ZXItbGluaz5cXHJcXG5cXHJcXG4gIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuPHNjcmlwdD5cXHJcXG5leHBvcnQgZGVmYXVsdCB7XFxyXFxuICBuYW1lOiAnbW9vc2UnLFxcclxcbiAgZGF0YSgpIHtcXHJcXG4gICAgcmV0dXJuIHtcXHJcXG4gICAgICBtc2c6ICdXZWxjb21lIHRvIFlvdXIgVnVlLmpzIEFwcCdcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG48L3NjcmlwdD5cXHJcXG48IS0tIEFkZCBcXFwic2NvcGVkXFxcIiBhdHRyaWJ1dGUgdG8gbGltaXQgQ1NTIHRvIHRoaXMgY29tcG9uZW50IG9ubHkgLS0+XFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG5oMSxcXHJcXG5oMiB7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbn1cXHJcXG5cXHJcXG51bCB7XFxyXFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5saSB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBtYXJnaW46IDAgMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuYSB7XFxyXFxuICBjb2xvcjogIzQyYjk4MztcXHJcXG59XFxyXFxuPC9zdHlsZT5cIl0sXCJzb3VyY2VSb290XCI6XCJ3ZWJwYWNrOi8vXCJ9XSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtNmU2NDI1YjlcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWVcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#app {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/App.vue?a4fe2e86\"],\"names\":[],\"mappings\":\";AAoBA;EACA,oDAAA;EACA,oCAAA;EACA,mCAAA;EACA,mBAAA;EACA,eAAA;EACA,iBAAA;CACA\",\"file\":\"App.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div id=\\\"app\\\">\\r\\n    <!-- the router outlet, where all matched components would ber viewed -->\\r\\n\\r\\n    <router-link v-bind:to=\\\"'/about'\\\">About</router-link>\\r\\n\\r\\n    <router-view></router-view>\\r\\n\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nexport default {\\r\\n  name: 'app',\\r\\n\\r\\n}\\r\\n\\r\\n</script>\\r\\n<!-- styling for the component -->\\r\\n<style>\\r\\n#app {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9hYzUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsaUNBQWtDLDBEQUEwRCwwQ0FBMEMseUNBQXlDLHlCQUF5QixxQkFBcUIsdUJBQXVCLEdBQUcsWUFBWSwwRUFBMEUsTUFBTSxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyx3VUFBd1UsMkJBQTJCLDRFQUE0RSwwREFBMEQsMENBQTBDLHlDQUF5Qyx5QkFBeUIscUJBQXFCLHVCQUF1QixLQUFLLHlDQUF5Qzs7QUFFbmtDIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2FwcCB7XFxyXFxuICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXHJcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBjb2xvcjogIzJjM2U1MDtcXHJcXG4gIG1hcmdpbi10b3A6IDYwcHg7XFxufVxcclxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvLi9zcmMvQXBwLnZ1ZT9hNGZlMmU4NlwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBb0JBO0VBQ0Esb0RBQUE7RUFDQSxvQ0FBQTtFQUNBLG1DQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7Q0FDQVwiLFwiZmlsZVwiOlwiQXBwLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICA8ZGl2IGlkPVxcXCJhcHBcXFwiPlxcclxcbiAgICA8IS0tIHRoZSByb3V0ZXIgb3V0bGV0LCB3aGVyZSBhbGwgbWF0Y2hlZCBjb21wb25lbnRzIHdvdWxkIGJlciB2aWV3ZWQgLS0+XFxyXFxuXFxyXFxuICAgIDxyb3V0ZXItbGluayB2LWJpbmQ6dG89XFxcIicvYWJvdXQnXFxcIj5BYm91dDwvcm91dGVyLWxpbms+XFxyXFxuXFxyXFxuICAgIDxyb3V0ZXItdmlldz48L3JvdXRlci12aWV3PlxcclxcblxcclxcbiAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbmV4cG9ydCBkZWZhdWx0IHtcXHJcXG4gIG5hbWU6ICdhcHAnLFxcclxcblxcclxcbn1cXHJcXG5cXHJcXG48L3NjcmlwdD5cXHJcXG48IS0tIHN0eWxpbmcgZm9yIHRoZSBjb21wb25lbnQgLS0+XFxyXFxuPHN0eWxlPlxcclxcbiNhcHAge1xcclxcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXInLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxyXFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgY29sb3I6ICMyYzNlNTA7XFxyXFxuICBtYXJnaW4tdG9wOiA2MHB4O1xcclxcbn1cXHJcXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIndlYnBhY2s6Ly9cIn1dKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi1mNjVmMTAwNFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"meat\"\n    }\n  }, [_c('h1', [_vm._v(\"Meat\")]), _vm._v(\" \"), _c('router-link', {\n    attrs: {\n      \"to\": '/'\n    }\n  }, [_vm._v(\"Moose\")]), _vm._v(\" \"), _c('div', [_vm._v(\"User \" + _vm._s(_vm.$route.params.name))])], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-08a847be\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZWF0LnZ1ZT9jZTI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwibWVhdFwiXG4gICAgfVxuICB9LCBbX2MoJ2gxJywgW192bS5fdihcIk1lYXRcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3JvdXRlci1saW5rJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInRvXCI6ICcvJ1xuICAgIH1cbiAgfSwgW192bS5fdihcIk1vb3NlXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCBbX3ZtLl92KFwiVXNlciBcIiArIF92bS5fcyhfdm0uJHJvdXRlLnBhcmFtcy5uYW1lKSldKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTA4YTg0N2JlXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMDhhODQ3YmVcIixcImhhc1Njb3BlZFwiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbWVhdC52dWVcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"moose\"\n  }, [_c('h1', [_vm._v(\"Moose\")]), _vm._v(\" \"), _c('router-link', {\n    attrs: {\n      \"to\": '/meat'\n    }\n  }, [_vm._v(\"Meat\")])], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-6e6425b9\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWU/NGM1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm1vb3NlXCJcbiAgfSwgW19jKCdoMScsIFtfdm0uX3YoXCJNb29zZVwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncm91dGVyLWxpbmsnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidG9cIjogJy9tZWF0J1xuICAgIH1cbiAgfSwgW192bS5fdihcIk1lYXRcIildKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTZlNjQyNWI5XCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNmU2NDI1YjlcIixcImhhc1Njb3BlZFwiOnRydWV9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWVcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"app\"\n    }\n  }, [_c('router-link', {\n    attrs: {\n      \"to\": '/about'\n    }\n  }, [_vm._v(\"About\")]), _vm._v(\" \"), _c('router-view')], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-f65f1004\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8xNjljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiYXBwXCJcbiAgICB9XG4gIH0sIFtfYygncm91dGVyLWxpbmsnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidG9cIjogJy9hYm91dCdcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJBYm91dFwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygncm91dGVyLXZpZXcnKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LWY2NWYxMDA0XCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtZjY1ZjEwMDRcIixcImhhc1Njb3BlZFwiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(17);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"6e722cd5\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-08a847be\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./meat.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-08a847be\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./meat.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZWF0LnZ1ZT9mYjcwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQXdOO0FBQ3hOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSUFBb0ksbUZBQW1GO0FBQ3ZOLDZJQUE2SSxtRkFBbUY7QUFDaE87QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0wOGE4NDdiZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vbWVhdC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjZlNzIyY2Q1XCIsIGNvbnRlbnQsIGZhbHNlKTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTA4YTg0N2JlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9tZWF0LnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0wOGE4NDdiZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vbWVhdC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMDhhODQ3YmVcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbWVhdC52dWVcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(18);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"353abe1e\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6e6425b9\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./moose.vue\", function() {\n     var newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6e6425b9\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./moose.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tb29zZS52dWU/NTZmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLG9DQUF1TjtBQUN2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0lBQW9JLGtGQUFrRjtBQUN0Tiw2SUFBNkksa0ZBQWtGO0FBQy9OO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNmU2NDI1YjlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vbW9vc2UudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCIzNTNhYmUxZVwiLCBjb250ZW50LCBmYWxzZSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi02ZTY0MjViOVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9tb29zZS52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNmU2NDI1YjlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vbW9vc2UudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTZlNjQyNWI5XCIsXCJzY29wZWRcIjp0cnVlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbW9vc2UudnVlXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(19);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"9e179122\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f65f1004\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\", function() {\n     var newContent = require(\"!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f65f1004\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9iZDRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQWtOO0FBQ2xOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4SEFBOEgsbUZBQW1GO0FBQ2pOLHVJQUF1SSxtRkFBbUY7QUFDMU47QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1mNjVmMTAwNFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiOWUxNzkxMjJcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjY1ZjEwMDRcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjY1ZjEwMDRcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtZjY1ZjEwMDRcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports) {

eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz9lNmFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBsaXN0IGZvcm1hdCBwcm9kdWNlZCBieSBjc3MtbG9hZGVyIGludG8gc29tZXRoaW5nXG4gKiBlYXNpZXIgdG8gbWFuaXB1bGF0ZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n");

/***/ })
/******/ ]);